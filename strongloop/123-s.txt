Making a call to http://localhost:8080 for the intacct element
Calling GET http://localhost:8080/elements/api-v2/elements/intacct
Calling GET http://localhost:8080/elements/api-v2/elements/166/docs
{
    "basePath": "/elements/api-v2/hubs/finance",
    "paths": {
        "/bills": {
            "post": {
                "summary": "Create an AP, (accounts payable) bill ",
                "operationId": "createBill",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/bills"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/newBill"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The bill object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills"
                ]
            },
            "get": {
                "summary": "Search for bills    ",
                "operationId": "getBills",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/billsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> totalpaid asc, totaldue desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((totalpaid > 0 and totaldue > 0) or whenmodified>='08/13/2016 05:26:37') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills"
                ]
            }
        },
        "/bills-payments": {
            "post": {
                "summary": "Create a payment, to record against an AP, (accounts payable) invoice or AP adjustment",
                "operationId": "createBillsPayment",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/billsPaymentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/billsPaymentsCreate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The payments object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills-payments"
                ]
            },
            "get": {
                "summary": "Search for payments, that have been recorded against an AP, (accounts payable) invoice or AP adjustment",
                "operationId": "getBillsPayments",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/billsPaymentsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((totalpaid > 0 and totaldue > 0) or whenmodified>='08/13/2016 05:26:37') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "nextPage",
                        "description": "The next page cursor, taken from the response header `elements-next-page-token`",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills-payments"
                ]
            }
        },
        "/bills-payments/{id}": {
            "patch": {
                "summary": "Update a bills-payment",
                "operationId": "updateBillsPaymentById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/billsPaymentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id of the bills-payment",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/billsPaymentsUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The bills-payment object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills-payments"
                ]
            },
            "get": {
                "summary": "Retrieve a payment, that has been recorded against an AP, (accounts payable) invoice or AP adjustment",
                "operationId": "getBillsPaymentById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/billsPayments"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The payments ID (key / paymentsid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills-payments"
                ]
            },
            "delete": {
                "summary": "Delete a payment, that has been recorded against an AP, (accounts payable) invoice or AP adjustment",
                "operationId": "deleteBillsPaymentById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id of the AP payment ",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills-payments"
                ]
            }
        },
        "/bills/{id}": {
            "patch": {
                "summary": "Update an AP, (accounts payable) bill  ",
                "operationId": "updateBillById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/bills"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The bill ID (key / billid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/updateBills"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The bill object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills"
                ]
            },
            "get": {
                "summary": "Retrieve a bill ",
                "operationId": "getBillById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/bills"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The bill ID (key / billid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills"
                ]
            },
            "delete": {
                "summary": "Delete a bill  ",
                "operationId": "deleteBillById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The bill ID (key / billid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "bills"
                ]
            }
        },
        "/bulk/query": {
            "post": {
                "operationId": "createBulkQuery",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Url to send the notification to when the Job is completed",
                        "in": "header",
                        "name": "Elements-Async-Callback-Url",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
                        "in": "query",
                        "name": "q",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
                        "in": "query",
                        "name": "lastRunDate",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
                        "in": "query",
                        "name": "from",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
                        "in": "query",
                        "name": "to",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "If this id is supplied the previous job will be continued from where it left off and continue to get all records to the time the new job was started. If this value is passed in - the query parameter is ignored",
                        "in": "query",
                        "name": "continueFromJobId",
                        "required": false,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/BulkQuery"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Create an asynchronous bulk query job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/cancel": {
            "put": {
                "operationId": "replaceBulkCancel",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job to cancel.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/BulkStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Cancel an asynchronous bulk query job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/errors": {
            "get": {
                "operationId": "getBulkErrors",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job to retrieve its errors.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The start page for pagination, which defaults to 1 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The Next page to get from set of bulk results",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Retrieve the errors of a bulk job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/status": {
            "get": {
                "operationId": "getBulkStatus",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job to retrieve its status.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/BulkStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve the status of a bulk job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/{objectName}": {
            "get": {
                "operationId": "getBulkByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/csv",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Retrieve the results of an asynchronous bulk query.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{objectName}": {
            "post": {
                "operationId": "createBulkByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Url to send the notification to when the Job is completed",
                        "in": "header",
                        "name": "Elements-Async-Callback-Url",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object for which data needs to be uploaded.",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Optional JSON MetaData that contains path or format, ex: {\"path\" : <path for the sub resource>, \"format\": <json/csv>}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}.",
                        "in": "formData",
                        "name": "metaData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
                        "in": "formData",
                        "name": "file",
                        "type": "file"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Upload a file of objects to be bulk uploaded to the provider.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/checking-accounts": {
            "get": {
                "summary": "Search for checking accounts",
                "operationId": "getCheckingAccounts",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/checkingAccountsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "nextPage",
                        "description": "The next page cursor, taken from the response header `elements-next-page-token`",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. With single field queries: <i> BANKACCOUNTID='CHK-WFB0004' </i>. With complex queries: <i>(BANKACCOUNTID='CHK-WFB0004' and WHENMODIFIED = '08/13/2016 05:26:37')</i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "checking-accounts"
                ]
            }
        },
        "/checking-accounts/{id}": {
            "get": {
                "summary": "Retrieve a checking account",
                "operationId": "getCheckingAccountById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/checkingAccounts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The checking account ID ",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "checking-accounts"
                ]
            }
        },
        "/classes": {
            "post": {
                "summary": "Create a class ",
                "operationId": "createClasse",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/classes"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/newClass"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The class object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "classes"
                ]
            },
            "get": {
                "summary": "Search for classes ",
                "operationId": "getClasses",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/classesListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> classid desc, whenmodified desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> whenmodified>='08/13/2016 05:26:37' and status = 'active' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "classes"
                ]
            }
        },
        "/classes/{id}": {
            "patch": {
                "summary": "Update a class ",
                "operationId": "updateClasseById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/classes"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The class ID (classid / key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/updateClass"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The class object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "classes"
                ]
            },
            "get": {
                "summary": "Retrieve a class ",
                "operationId": "getClasseById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/classes"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The class ID (key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "classes"
                ]
            },
            "delete": {
                "summary": "Delete a class ",
                "operationId": "deleteClasseById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The class ID (key / classid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "classes"
                ]
            }
        },
        "/contacts": {
            "post": {
                "summary": "Create a contact    ",
                "operationId": "createContact",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/contacts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/newContact"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The contact object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "contacts"
                ]
            },
            "get": {
                "summary": "Search for contacts      ",
                "operationId": "getContacts",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contactsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> contactname desc </i>. Or with multiple sorts with a comma separator: <i> companyname desc, contactname asc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> status = 'active' </i>. With complex queries: <i> ((companyname='intacct' or contactname = 'admin') and status = 'active') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "contacts"
                ]
            }
        },
        "/contacts/{id}": {
            "patch": {
                "summary": "Update a contact     ",
                "operationId": "updateContactById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/contacts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The contact name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/contactUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The contacts object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "contacts"
                ]
            },
            "get": {
                "summary": "Retrieve a contact   ",
                "operationId": "getContactById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/contacts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The contact name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "contacts"
                ]
            },
            "delete": {
                "summary": "Delete a contact   ",
                "operationId": "deleteContactById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The contact name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "contacts"
                ]
            }
        },
        "/customers": {
            "post": {
                "summary": "Create a customer  ",
                "operationId": "createCustomer",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/customers"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/customerCreate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The customers object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "customers"
                ]
            },
            "get": {
                "summary": "Search for customers      ",
                "operationId": "getCustomers",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customersListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> customerid desc </i>. Or with multiple sorts with a comma separator: <i> customerid desc, totaldue asc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((recordno > 1 and recordno < 10) or whenmodified > '08/17/2016 17:33:34') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "customers"
                ]
            }
        },
        "/customers/{id}": {
            "patch": {
                "summary": "Update a customer  ",
                "operationId": "updateCustomerById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/customers"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The customer ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/customerUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The customers object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "customers"
                ]
            },
            "get": {
                "summary": "Retrieve a customer ",
                "operationId": "getCustomerById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/customers"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The customer ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "customers"
                ]
            },
            "delete": {
                "summary": "Delete a customer  ",
                "operationId": "deleteCustomerById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The customer ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "customers"
                ]
            }
        },
        "/departments": {
            "post": {
                "summary": "Create a department",
                "operationId": "createDepartment",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/departments"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/departments"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The department object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "departments"
                ]
            },
            "get": {
                "summary": "Search for departments       ",
                "operationId": "getDepartments",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/departmentsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, departmentid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> status = 'active' </i>. With complex queries: <i> whenmodified>='08/13/2016 05:26:37' and status = 'active' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "departments"
                ]
            }
        },
        "/departments/{id}": {
            "patch": {
                "summary": "Update a department      ",
                "operationId": "updateDepartmentById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/departments"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The department ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/departmentUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The departments object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "departments"
                ]
            },
            "get": {
                "summary": "Retrieve a department  ",
                "operationId": "getDepartmentById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/departments"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The department ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "departments"
                ]
            },
            "delete": {
                "summary": "Delete a department    ",
                "operationId": "deleteDepartmentById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The department ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "departments"
                ]
            }
        },
        "/employees": {
            "post": {
                "summary": "Create an employee ",
                "operationId": "createEmployee",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/employees"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/employees"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The employee object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "employees"
                ]
            },
            "get": {
                "summary": "Search for employees ",
                "operationId": "getEmployees",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/employeesListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, employeeid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((recordno > 1 and recordno < 10) or whenmodified > '08/17/2016 17:33:34') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "employees"
                ]
            }
        },
        "/employees/{id}": {
            "patch": {
                "summary": "Update an employee  ",
                "operationId": "updateEmployeeById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/employees"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The customer ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/employeeUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The customers object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "employees"
                ]
            },
            "get": {
                "summary": "Retrieve an employee  ",
                "operationId": "getEmployeeById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/employees"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The employee ID (key / employeeid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "employees"
                ]
            },
            "delete": {
                "summary": "Delete an employee ",
                "operationId": "deleteEmployeeById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The employee ID (employeeid / key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "employees"
                ]
            }
        },
        "/entities": {
            "get": {
                "summary": "Search for location entities ",
                "operationId": "getEntities",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/entities"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, entityid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> status = 'active' and whenmodified > '08/17/2016 17:33:34' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "entities"
                ]
            }
        },
        "/entities/{id}": {
            "get": {
                "summary": "Retrieve a location entity ",
                "operationId": "getEntityById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/entities"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The entity ID (key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "entities"
                ]
            }
        },
        "/expense-reports": {
            "post": {
                "summary": "Create an expense report  ",
                "operationId": "createExpenseReport",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/expenseReportsResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/expenseReportCreate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The expense report object ",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "expense-reports"
                ]
            },
            "get": {
                "summary": "Search for expense reports",
                "operationId": "getExpenseReports",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/expenseReportsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 2000",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": " The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> employeeid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> status = 'Approved' </i>. With complex queries: <i> ((employeeid='1' or currency= 'USD') or status = 'Approved')</i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number. Defaults to 1 if not provided",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "expense-reports"
                ]
            }
        },
        "/expense-reports/{id}": {
            "patch": {
                "summary": "Update an expense report",
                "operationId": "updateExpenseReportById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/expenseReportsPatchResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The expense  report ID (key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/expenseReportsPatch"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The expense report object body",
                        "required": false
                    }
                ],
                "tags": [
                    "expense-reports"
                ]
            },
            "get": {
                "summary": "Retrieve an expense report",
                "operationId": "getExpenseReportById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/expenseReports"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The expense report ID(key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "expense-reports"
                ]
            },
            "delete": {
                "summary": "Delete an expense report",
                "operationId": "deleteExpenseReportById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The expense report ID(key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "expense-reports"
                ]
            }
        },
        "/folders": {
            "post": {
                "summary": "Create a folder",
                "operationId": "createFolder",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/foldersCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/createFolder"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The folder object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            },
            "get": {
                "summary": "Search folders",
                "operationId": "getFolders",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/foldersListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, <, AND, OR. With single field queries: <i> description='des' </i>.",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> name asc, whenmodified desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            }
        },
        "/folders/{folderName}": {
            "patch": {
                "summary": "Update a folder",
                "operationId": "updateFolderByFolderName",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/foldersUpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "folderName",
                        "description": "The folder name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/updateFolder"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The XML request body.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            },
            "get": {
                "summary": "Retrieve a folder",
                "operationId": "getFolderByFolderName",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/folders"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "folderName",
                        "description": "The folder name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            },
            "delete": {
                "summary": "Delete a folder",
                "operationId": "deleteFolderByFolderName",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "folderName",
                        "description": "The folder name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            }
        },
        "/folders/{folderName}/files": {
            "post": {
                "summary": "Create an attachment",
                "operationId": "createFolderFile",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/files"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "folderName",
                        "description": "The folder a",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/createFile"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The attachment object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            },
            "get": {
                "summary": "Search for attachments",
                "operationId": "getFoldersFiles",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/attachmentsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "folderName",
                        "description": "The folder name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, <, AND, OR. With single field queries: <i> supdocid='12' </i>. With complex queries: <i> creationdate > '11/22/2017' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> totalpaid asc, totaldue desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            }
        },
        "/folders/{folderName}/files/{id}": {
            "patch": {
                "summary": "Update an attachment",
                "operationId": "updateFoldersFileById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/foldersFiles"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "folderName",
                        "description": "The folder name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The supdoc ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/updateFile"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The XML request body.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            },
            "get": {
                "summary": "Retrieve an attachment",
                "operationId": "getFoldersFileById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/filesGet"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "folderName",
                        "description": "The folder name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The supdoc Id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            },
            "delete": {
                "summary": "Delete an attachment",
                "operationId": "deleteFoldersFileById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "folderName",
                        "description": "The folder name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The supdoc Id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "folders"
                ]
            }
        },
        "/invoices": {
            "post": {
                "summary": "Create an invoice ",
                "operationId": "createInvoice",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/invoices"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/invoiceCreate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The invoice object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "invoices"
                ]
            },
            "get": {
                "summary": "Search for invoices ",
                "operationId": "getInvoices",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/invoicesListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> totalpaid asc, totaldue desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((totalpaid > 0 and totaldue > 0) or whenmodified>='08/13/2016 05:26:37') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "invoices"
                ]
            }
        },
        "/invoices/{id}": {
            "patch": {
                "summary": "Update an invoice",
                "operationId": "updateInvoiceById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/invoices"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The invoice ID (key / invoiceid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/invoicesUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The invoice object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "invoices"
                ]
            },
            "get": {
                "summary": "Retrieve an invoice ",
                "operationId": "getInvoiceById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/invoices"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The invoice ID (key / invoiceid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "invoices"
                ]
            },
            "delete": {
                "summary": "Delete an invoice ",
                "operationId": "deleteInvoiceById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The invoice ID (invoiceid / key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "invoices"
                ]
            }
        },
        "/items": {
            "post": {
                "summary": "Create an item      ",
                "operationId": "createItem",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/items"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/items"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The item object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "items"
                ]
            },
            "get": {
                "summary": "Search for items ",
                "operationId": "getItems",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/itemsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> recordno desc, whenmodified desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((itemtype = 'Inventory' and status = 'active') or whenmodified>='08/13/2016 05:26:37') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "items"
                ]
            }
        },
        "/items/{id}": {
            "patch": {
                "summary": "Update an item ",
                "operationId": "updateItemById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/items"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The item ID (key / itemid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/itemUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The item object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "items"
                ]
            },
            "get": {
                "summary": "Retrieve an item ",
                "operationId": "getItemById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/items"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The item ID (key / itemid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "items"
                ]
            },
            "delete": {
                "summary": "Delete an item  ",
                "operationId": "deleteItemById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The item ID (itemid / key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "items"
                ]
            }
        },
        "/journals": {
            "post": {
                "summary": "Create a journal ",
                "operationId": "createJournal",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/journals"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/journals"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The journal object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "journals"
                ]
            },
            "get": {
                "summary": "Search for journals ",
                "operationId": "getJournals",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/journalsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whencreated desc, whenmodified desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((whencreated > '08/17/2016 17:33:34' and whenmodified<='08/30/2016 05:26:37') or status = 'active') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "journals"
                ]
            }
        },
        "/journals/{id}": {
            "patch": {
                "summary": "Update a journal",
                "operationId": "updateJournalById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/journals"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The item ID (key / itemid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/journalUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The item object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "journals"
                ]
            },
            "get": {
                "summary": "Retrieve a journal   ",
                "operationId": "getJournalById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/journals"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The journal ID (symbol / journalid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "journals"
                ]
            },
            "delete": {
                "summary": "Delete a journal ",
                "operationId": "deleteJournalById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The invoice ID (invoiceid / key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "journals"
                ]
            }
        },
        "/ledger-accounts": {
            "post": {
                "summary": "Create a general ledger account",
                "operationId": "createLedgerAccount",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ledgerAccounts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ledgerAccounts"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The ledger account object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "ledger-accounts"
                ]
            },
            "get": {
                "summary": "Search for general ledger accounts        ",
                "operationId": "getLedgerAccounts",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ledgerAccountsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> glaccountno desc, whenmodified desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((accounttype = 'balancesheet' and status = 'active') or whenmodified>='08/13/2016 05:26:37') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "ledger-accounts"
                ]
            }
        },
        "/ledger-accounts/{id}": {
            "patch": {
                "summary": "Update a general ledger account       ",
                "operationId": "updateLedgerAccountById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ledgerAccounts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The ledger account ID (glaccountno / glaccountid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ledgerAccountUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The ledger accounts object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "ledger-accounts"
                ]
            },
            "get": {
                "summary": "Retrieve a general ledger account  ",
                "operationId": "getLedgerAccountById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ledgerAccounts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The account number (glaccountno / glaccountid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "ledger-accounts"
                ]
            },
            "delete": {
                "summary": "Delete a general ledger account    ",
                "operationId": "deleteLedgerAccountById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The ledger account ID (glaccountno / glaccountid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "ledger-accounts"
                ]
            }
        },
        "/locations": {
            "post": {
                "summary": "Create a location ",
                "operationId": "createLocation",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/locations"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/locations"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The locations object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "locations"
                ]
            },
            "get": {
                "summary": "Search for locations",
                "operationId": "getLocations",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/locationsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, locationid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> status = 'active' and whenmodified > '08/17/2016 17:33:34' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "locations"
                ]
            }
        },
        "/locations/{id}": {
            "patch": {
                "summary": "Update a location ",
                "operationId": "updateLocationById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/locations"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The location ID (locationid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/locationUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The location object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "locations"
                ]
            },
            "get": {
                "summary": "Retrieve a location",
                "operationId": "getLocationById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/locations"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The location ID (locationid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "locations"
                ]
            },
            "delete": {
                "summary": "Delete a location  ",
                "operationId": "deleteLocationById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The location ID (locationid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "locations"
                ]
            }
        },
        "/objects": {
            "get": {
                "operationId": "getObjects",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Get a list of all the available objects.",
                "tags": [
                    "objects"
                ]
            }
        },
        "/objects/{objectName}/metadata": {
            "get": {
                "operationId": "getObjectsObjectNameMetadata",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/objectsMetadata"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Get a list of all the field for an object.",
                "tags": [
                    "objects"
                ]
            }
        },
        "/payments": {
            "post": {
                "summary": "Create a payment, to record against an AR, (accounts receivable) invoice or AR adjustment   ",
                "operationId": "createPayment",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/payments"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/payments"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The payments object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "payments"
                ]
            },
            "get": {
                "summary": "Search for payments, that have been recorded against an AR, (accounts receivable) invoice or AR adjustment",
                "operationId": "getPayments",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/paymentsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> totalpaid asc, totaldue desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((totalpaid > 0 and totaldue > 0) or whenmodified>='08/13/2016 05:26:37') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "payments"
                ]
            }
        },
        "/payments/{id}": {
            "get": {
                "summary": "Retrieve a payment, that have been recorded against an AR, (accounts receivable) invoice or AR adjustment ",
                "operationId": "getPaymentById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/payments"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The payments ID (key / paymentsid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "payments"
                ]
            }
        },
        "/payments/{id}/apply": {
            "post": {
                "summary": "Apply an existing payment, that has not been already assigned to an invoice, against any invoice you specify",
                "operationId": "createPaymentApply",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/paymentsApply"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The payment ID (arpaymentkey)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/paymentsApply"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The apply payment object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "payments"
                ]
            }
        },
        "/ping": {
            "get": {
                "operationId": "getPing",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Pong"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
                "tags": [
                    "ping"
                ]
            }
        },
        "/projects": {
            "post": {
                "summary": "Create a project  ",
                "operationId": "createProject",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/projects"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The project object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "projects"
                ]
            },
            "get": {
                "summary": "Search for projects ",
                "operationId": "getProjects",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/projectsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, key desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> status = 'active' and whenmodified > '08/17/2016 17:33:34' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "projects"
                ]
            }
        },
        "/projects/{id}": {
            "patch": {
                "summary": "Update a project ",
                "operationId": "updateProjectById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The project ID (key / projectid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/projectUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The project object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "projects"
                ]
            },
            "get": {
                "summary": "Retrieve a project  ",
                "operationId": "getProjectById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/projects"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The project ID (key / projectid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "projects"
                ]
            },
            "delete": {
                "summary": "Delete a project ",
                "operationId": "deleteProjectById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The project ID (key / projectid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "projects"
                ]
            }
        },
        "/purchase-orders": {
            "post": {
                "summary": "Create a purchase order (PO transaction)        ",
                "operationId": "createPurchaseOrder",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/purchaseOrders"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/newPurchaseOrder"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The purchase order object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "purchase-orders"
                ]
            },
            "get": {
                "summary": "Search for purchase orders (PO transactions) ",
                "operationId": "getPurchaseOrders",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/purchaseOrdersListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, transactionid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((transactionstate = 'Pending' and status = 'active') or whenmodified>='08/13/2016 05:26:37') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "purchase-orders"
                ]
            }
        },
        "/purchase-orders/{id}": {
            "patch": {
                "summary": "Update a purchase order (PO transaction)      ",
                "operationId": "updatePurchaseOrderById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/purchaseOrders"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The purchase order ID (transactionid / potransactionid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/updatePurchaseOrders"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The purchase order object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "purchase-orders"
                ]
            },
            "get": {
                "summary": "Retrieve a purchase order (PO transaction) ",
                "operationId": "getPurchaseOrderById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/purchaseOrders"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The purchase order ID (key / potransactionid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "purchase-orders"
                ]
            },
            "delete": {
                "summary": "Delete a purchase order (PO transaction) ",
                "operationId": "deletePurchaseOrderById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The purchase order ID (transactionid / sotransactionid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "purchase-orders"
                ]
            }
        },
        "/reporting-periods": {
            "get": {
                "summary": "Search for reporting periods",
                "operationId": "getReportingPeriods",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/reportingPeriodsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> name desc </i>. Or with multiple sorts with a comma separator",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field. Operators supported are =, >, >=, <, <=, AND. <i> e.g name='test' </i>. Supports complex queries like: <i> startdate>='01/01/1970') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 2000",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number. Defaults to 1 if not provided",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "reporting-periods"
                ]
            }
        },
        "/sales-orders": {
            "post": {
                "summary": "Create a sales order (SO transaction)             ",
                "operationId": "createSalesOrder",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/salesOrders"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/createSalesOrders"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The sales order object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "sales-orders"
                ]
            },
            "get": {
                "summary": "Search for sales orders (SO transactions)  ",
                "operationId": "getSalesOrders",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/salesOrdersListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, transactionid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((transactionstate = 'Pending' and status = 'active') or whenmodified>='08/13/2016 05:26:37') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "sales-orders"
                ]
            }
        },
        "/sales-orders/{id}": {
            "patch": {
                "summary": "Update a sales order (SO transaction)",
                "operationId": "updateSalesOrderById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/salesOrders"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The sales order ID (transactionid / potransactionid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/updateSalesOrders"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The sales order object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "sales-orders"
                ]
            },
            "get": {
                "summary": "Retrieve a sales order (SO transaction)  ",
                "operationId": "getSalesOrderById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/salesOrders"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The sales order ID (key / sotransactionid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "sales-orders"
                ]
            },
            "delete": {
                "summary": "Delete a sales order (SO transaction)  ",
                "operationId": "deleteSalesOrderById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The sales order ID (transactionid / sotransactionid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "sales-orders"
                ]
            }
        },
        "/terms": {
            "post": {
                "summary": "Create an AR (accounts receivable) term    ",
                "operationId": "createTerm",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/terms"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/terms"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The terms object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "terms"
                ]
            },
            "get": {
                "summary": "Search for AR (accounts receivable) terms",
                "operationId": "getTerms",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/termsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whencreated desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, createdby desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((whencreated > '08/17/2016 17:33:34' and whenmodified<='08/30/2016 05:26:37') or status = 'active') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "terms"
                ]
            }
        },
        "/terms/{id}": {
            "patch": {
                "summary": "Update an AR, (accounts receivable) term ",
                "operationId": "updateTermById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/terms"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The terms name (artermname)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/termUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The AR terms object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "terms"
                ]
            },
            "get": {
                "summary": "Retrieve a AR, (accounts receivable) term ",
                "operationId": "getTermById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/terms"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The AR term name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "terms"
                ]
            },
            "delete": {
                "summary": "Delete an AR, (accounts receivable) term ",
                "operationId": "deleteTermById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The AR term name (artermname)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "terms"
                ]
            }
        },
        "/transactions": {
            "post": {
                "summary": "Create a general ledger transactions     ",
                "operationId": "createTransaction",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/transactions"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/transactions"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The transactions object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "transactions"
                ]
            },
            "get": {
                "summary": "Search for general ledger transactions  ",
                "operationId": "getTransactions",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/transactionsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, journalid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((whenmodified>='08/13/2016 05:26:37' or state = 'Posted') and description != 'blank') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "transactions"
                ]
            }
        },
        "/transactions-entries": {
            "get": {
                "summary": "Search for general ledger entries for a general ledger transactions",
                "operationId": "getTransactionsEntries",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/transactionsEntriesListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, glaccountno desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((whenmodified>='08/13/2016 05:26:37' or state = 'Posted') and amount > 0) </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "transactions-entries"
                ]
            }
        },
        "/transactions/{id}": {
            "get": {
                "summary": "Retrieve a general ledger transaction   ",
                "operationId": "getTransactionById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/transactions"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The transaction ID (key / gltransactionid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "transactions"
                ]
            },
            "delete": {
                "summary": "Delete an general ledger transaction",
                "operationId": "deleteTransactionById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The transaction ID (key / gltransactionid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "transactions"
                ]
            }
        },
        "/vendors": {
            "post": {
                "summary": "Create a vendor",
                "operationId": "createVendor",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/vendors"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/vendors"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The vendor object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vendors"
                ]
            },
            "get": {
                "summary": "Search for vendors ",
                "operationId": "getVendors",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/vendorsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> vendorid desc </i>. Or with multiple sorts with a comma separator: <i> vendorid desc, creditlimit asc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((recordno > 1 and recordno < 10) or whenmodified > '08/17/2016 17:33:34') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vendors"
                ]
            }
        },
        "/vendors/{id}": {
            "patch": {
                "summary": "Update a vendor  ",
                "operationId": "updateVendorById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/vendors"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The vendor ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/vendorUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The vendor object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vendors"
                ]
            },
            "get": {
                "summary": "Retrieve a vendor  ",
                "operationId": "getVendorById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/vendors"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The vendor ID (key / vendorid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vendors"
                ]
            },
            "delete": {
                "summary": "Delete a vendor ",
                "operationId": "deleteVendorById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The vendor ID (key / vendorid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vendors"
                ]
            }
        },
        "/vouchers": {
            "post": {
                "summary": "Create a voucher ",
                "operationId": "createVoucher",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/vouchers"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/vouchers"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The voucher object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vouchers"
                ]
            },
            "get": {
                "summary": "Search for vouchers ",
                "operationId": "getVouchers",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/vouchersListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, journalid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> ((whenmodified>='08/13/2016 05:26:37' or state = 'Posted') and description != 'blank') </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vouchers"
                ]
            }
        },
        "/vouchers/{id}": {
            "patch": {
                "summary": "Update a voucher      ",
                "operationId": "updateVoucherById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/vouchers"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The voucher ID (key / voucherid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/vouchersUpdate"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The voucher object body",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vouchers"
                ]
            },
            "get": {
                "summary": "Retrieve a voucher",
                "operationId": "getVoucherById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/vouchers"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The voucher ID (key / voucherid)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vouchers"
                ]
            },
            "delete": {
                "summary": "Delete a voucher ",
                "operationId": "deleteVoucherById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The voucher ID (voucherID / key)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "vouchers"
                ]
            }
        },
        "/warehouses": {
            "get": {
                "summary": "Search for warehouses",
                "operationId": "getWarehouses",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/warehousesListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "The orderBy clause, either asc or desc. The format is fieldName order, for example: <i> whenmodified desc </i>. Or with multiple sorts with a comma separator: <i> whenmodified desc, warehouseid desc </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. You can query by any field and operators supported are =, !=, >, >=, <, <=, AND, OR. With single field queries: <i> whenmodified>='08/13/2016 05:26:37' </i>. With complex queries: <i> whenmodified>='08/13/2016 05:26:37' and status = 'active' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "warehouses"
                ]
            }
        },
        "/warehouses/{id}": {
            "get": {
                "summary": "Retrieve a warehouse",
                "operationId": "getWarehouseById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/warehouses"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The warehouse ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "locationId",
                        "description": "The Location/Entity ID of the company. This will override the Location ID provided in the instance configuration.",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "warehouses"
                ]
            }
        },
        "/{objectName}": {
            "get": {
                "operationId": "getByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page number. Defaults to 1 if not provided.",
                        "format": "int64",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Object"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "post": {
                "operationId": "createByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an {objectName}",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{objectId}": {
            "delete": {
                "operationId": "deleteObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "get": {
                "operationId": "getObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json",
                    "application/pdf"
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "patch": {
                "operationId": "updateObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "put": {
                "operationId": "replaceObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {objectName}",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{objectId}/{childObjectName}": {
            "get": {
                "operationId": "getObjectNameByChildObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page number. Defaults to 1 if not provided.",
                        "format": "int64",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Object"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "post": {
                "operationId": "createObjectNameByChildObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
            "delete": {
                "operationId": "deleteObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "get": {
                "operationId": "getObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "patch": {
                "operationId": "updateObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "put": {
                "operationId": "replaceObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            }
        }
    },
    "host": "localhost:8080",
    "schemes": [
        "http"
    ],
    "definitions": {
        "itemdetails": {
            "properties": {
                "aisle": {
                    "type": "string"
                },
                "bin": {
                    "type": "string"
                },
                "itemexpiration": {
                    "$ref": "#/definitions/itemexpiration"
                },
                "lotno": {
                    "type": "string"
                },
                "quantity": {
                    "type": "string"
                },
                "row": {
                    "type": "string"
                },
                "serialno": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "gltransactionentries": {
            "properties": {
                "glentry": {
                    "items": {
                        "$ref": "#/definitions/glentryCreate"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "projects": {
            "properties": {
                "begindate": {
                    "$ref": "#/definitions/begindate"
                },
                "billingpricing": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enddate": {
                    "$ref": "#/definitions/enddate"
                },
                "expensepricing": {
                    "type": "string"
                },
                "expenserate": {
                    "format": "int32",
                    "type": "integer"
                },
                "invoicewithparent": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "poappricing": {
                    "type": "string"
                },
                "poaprate": {
                    "format": "int32",
                    "type": "integer"
                },
                "projectcategory": {
                    "type": "string"
                },
                "projectid": {
                    "format": "int32",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "userrestrictions": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "projectid",
                "name",
                "projectcategory"
            ],
            "x-primary-key": [
                "projectid"
            ],
            "type": "object"
        },
        "salesOrdersListObject": {
            "properties": {
                "basecurr": {
                    "type": "string"
                },
                "billto": {
                    "$ref": "#/definitions/billto"
                },
                "currency": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "documentnumber": {
                    "type": "string"
                },
                "exchrate": {
                    "format": "int32",
                    "type": "integer"
                },
                "exchratedate": {
                    "$ref": "#/definitions/exchratedate"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "paymentstatus": {
                    "type": "string"
                },
                "referenceno": {
                    "type": "string"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "sotransitems": {
                    "$ref": "#/definitions/sotransitems"
                },
                "subtotals": {
                    "$ref": "#/definitions/subtotals"
                },
                "termname": {
                    "type": "string"
                },
                "transactionid": {
                    "type": "string"
                },
                "transactionstate": {
                    "type": "string"
                },
                "transactiontype": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "transactionid"
            ],
            "type": "object"
        },
        "dateFormat": {
            "properties": {
                "day": {
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "format": "int32",
                    "type": "integer"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "termsListObject": {
            "properties": {
                "createdby": {
                    "format": "int32",
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "disccalcon": {
                    "type": "string"
                },
                "due": {
                    "$ref": "#/definitions/due"
                },
                "modifiedby": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "penalty": {
                    "$ref": "#/definitions/penalty"
                },
                "status": {
                    "type": "string"
                },
                "whencreated": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "name"
            ],
            "type": "object"
        },
        "billsPaymentsResponse": {
            "properties": {
                "RECORDNO": {
                    "format": "int64",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "vendorPayto": {
            "properties": {
                "contact": {
                    "$ref": "#/definitions/contact"
                },
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "startdate": {
            "properties": {
                "day": {
                    "type": "string"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "departmentUpdate": {
            "properties": {
                "departmentid": {
                    "type": "string"
                },
                "parentid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "updatebillitems": {
            "properties": {
                "lineitem": {
                    "items": {
                        "$ref": "#/definitions/lineitem"
                    },
                    "type": "array"
                },
                "updatelineitem": {
                    "items": {
                        "$ref": "#/definitions/updatelineitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "itemsListObject": {
            "properties": {
                "averagecost": {
                    "format": "int32",
                    "type": "integer"
                },
                "complineitems": {
                    "$ref": "#/definitions/complineitems"
                },
                "computeforshortterm": {
                    "type": "boolean"
                },
                "costmethod": {
                    "type": "string"
                },
                "dropship": {
                    "type": "boolean"
                },
                "enable_bins": {
                    "type": "boolean"
                },
                "extdescription": {
                    "type": "string"
                },
                "glgroupname": {
                    "type": "string"
                },
                "hasstartenddates": {
                    "type": "boolean"
                },
                "inventory_precision": {
                    "format": "int32",
                    "type": "integer"
                },
                "itemid": {
                    "type": "string"
                },
                "itemname": {
                    "type": "string"
                },
                "itemtype": {
                    "type": "string"
                },
                "mrr": {
                    "type": "boolean"
                },
                "note": {
                    "type": "string"
                },
                "productlineid": {
                    "type": "string"
                },
                "purchasing_precision": {
                    "format": "int32",
                    "type": "integer"
                },
                "purchasingunit": {
                    "type": "string"
                },
                "purchasingunitfactor": {
                    "format": "int32",
                    "type": "integer"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "revenue_posting": {
                    "type": "string"
                },
                "sales_precision": {
                    "format": "int32",
                    "type": "integer"
                },
                "salesunit": {
                    "type": "string"
                },
                "salesunitfactor": {
                    "format": "int32",
                    "type": "integer"
                },
                "standardcost": {
                    "format": "int32",
                    "type": "integer"
                },
                "standardunit": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taxable": {
                    "type": "boolean"
                },
                "termperiod": {
                    "type": "string"
                },
                "totalperiods": {
                    "format": "int32",
                    "type": "integer"
                },
                "uom": {
                    "type": "string"
                },
                "vendlineitems": {
                    "$ref": "#/definitions/vendlineitems"
                },
                "vsoecategory": {
                    "type": "string"
                },
                "vsoedlvrstatus": {
                    "type": "string"
                },
                "vsoerevdefstatus": {
                    "type": "string"
                },
                "whenlastreceived": {
                    "$ref": "#/definitions/whenlastreceived"
                },
                "whenlastsold": {
                    "$ref": "#/definitions/whenlastsold"
                },
                "whenmodified": {
                    "type": "string"
                },
                "whslineitems": {
                    "$ref": "#/definitions/whslineitems"
                }
            },
            "x-primary-key": [
                "itemid"
            ],
            "type": "object"
        },
        "returnto": {
            "properties": {
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "glentry": {
            "properties": {
                "amount": {
                    "format": "int32",
                    "type": "integer"
                },
                "basecurrency": {
                    "type": "string"
                },
                "batchno": {
                    "format": "int32",
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "exch_rate_date": {
                    "type": "string"
                },
                "exchange_rate": {
                    "format": "int32",
                    "type": "integer"
                },
                "glaccountno": {
                    "format": "int32",
                    "type": "integer"
                },
                "journalid": {
                    "type": "string"
                },
                "memo": {
                    "type": "string"
                },
                "trtype": {
                    "type": "string"
                },
                "trx_amount": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "projectsListObject": {
            "properties": {
                "billingovermax": {
                    "type": "string"
                },
                "billingpricing": {
                    "type": "string"
                },
                "budgetamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "budgetduration": {
                    "format": "int32",
                    "type": "integer"
                },
                "budgetedcost": {
                    "format": "int32",
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "excludeexpenses": {
                    "type": "boolean"
                },
                "expensepricing": {
                    "type": "string"
                },
                "expenserate": {
                    "format": "int32",
                    "type": "integer"
                },
                "invoicewithparent": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "poappricing": {
                    "type": "string"
                },
                "poaprate": {
                    "format": "int32",
                    "type": "integer"
                },
                "projectcategory": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userrestrictions": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "arpaymentitemdetails": {
            "properties": {
                "arpaymentitemdetail": {
                    "$ref": "#/definitions/arpaymentitemdetail"
                }
            },
            "type": "object"
        },
        "datecreated": {
            "properties": {
                "day": {
                    "type": "string",
                    "x-samplevalue": "09"
                },
                "month": {
                    "type": "string",
                    "x-samplevalue": "09"
                },
                "year": {
                    "type": "string",
                    "x-samplevalue": "2016"
                }
            },
            "title": "datecreated",
            "type": "object",
            "x-has-customfields": false
        },
        "expenseReportsPatch": {
            "properties": {
                "basecurr": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "currency": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string",
                    "x-samplevalue": "Travel to client"
                },
                "employeeid": {
                    "type": "string",
                    "x-samplevalue": "2"
                },
                "expensereportno": {
                    "type": "string",
                    "x-samplevalue": "-- -- New --____-- -- --  "
                },
                "memo": {
                    "type": "string",
                    "x-samplevalue": "Marriott"
                },
                "state": {
                    "type": "string",
                    "x-samplevalue": "Submitted"
                },
                "supdocid": {
                    "type": "string",
                    "x-samplevalue": "101"
                },
                "updateexpenses": {
                    "$ref": "#/definitions/updateexpenses"
                }
            },
            "title": "expenseReportsPatch",
            "x-has-customfields": true,
            "x-primary-key": [
                "expensereportno"
            ],
            "x-vendor-objectname": "expensereport",
            "type": "object"
        },
        "vouchersListObject": {
            "properties": {
                "adjustmentno": {
                    "type": "string"
                },
                "apadjustmentitems": {
                    "$ref": "#/definitions/apadjustmentitems"
                },
                "basecurr": {
                    "type": "string"
                },
                "batchkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "billno": {
                    "format": "int32",
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datepaid": {
                    "$ref": "#/definitions/datepaid"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "vendorid": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "updatesubtotals": {
            "properties": {
                "updatesubtotal": {
                    "items": {
                        "$ref": "#/definitions/updatesubtotal"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "whslineitems": {
            "properties": {
                "whslineitem": {
                    "$ref": "#/definitions/whslineitem"
                }
            },
            "type": "object"
        },
        "newBill": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "basecurr": {
                    "type": "string"
                },
                "billid": {
                    "type": "string"
                },
                "billitems": {
                    "$ref": "#/definitions/billitems"
                },
                "billno": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/billsCustomfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string"
                },
                "exchrate": {
                    "type": "string"
                },
                "nogl": {
                    "type": "string"
                },
                "onhold": {
                    "type": "boolean"
                },
                "ponumber": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                }
            },
            "required": [
                "vendorid",
                "datecreated",
                "billno",
                "termname",
                "billitems"
            ],
            "x-primary-key": [
                "billid"
            ],
            "type": "object"
        },
        "subtotal": {
            "properties": {
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "departmentid": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "percentval": {
                    "type": "string"
                },
                "projectid": {
                    "type": "string"
                },
                "total": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "updatelineitem": {
            "properties": {
                "amount": {
                    "type": "string"
                },
                "billable": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "glaccountno": {
                    "type": "string"
                },
                "line_num": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "required": [
                "glaccountno",
                "amount"
            ],
            "type": "object"
        },
        "updateBills": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "basecurr": {
                    "type": "string"
                },
                "billno": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string"
                },
                "exchrate": {
                    "type": "string"
                },
                "nogl": {
                    "type": "string"
                },
                "onhold": {
                    "type": "boolean"
                },
                "ponumber": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "updatebillitems": {
                    "$ref": "#/definitions/updatebillitems"
                },
                "vendorid": {
                    "type": "string"
                }
            },
            "required": [
                "updatebillitems"
            ],
            "type": "object"
        },
        "potransitem": {
            "properties": {
                "billable": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "departmentid": {
                    "type": "string"
                },
                "form1099": {
                    "type": "string"
                },
                "itemid": {
                    "type": "string"
                },
                "locationid": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "quantity": {
                    "type": "string"
                },
                "taxable": {
                    "type": "string"
                },
                "unit": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                },
                "warehouseid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "items": {
            "properties": {
                "computeforshortterm": {
                    "type": "boolean"
                },
                "costmethod": {
                    "type": "string"
                },
                "dropship": {
                    "type": "boolean"
                },
                "enable_bins": {
                    "type": "boolean"
                },
                "glgroupname": {
                    "type": "string"
                },
                "hasstartenddates": {
                    "type": "boolean"
                },
                "icitemid": {
                    "format": "int32",
                    "type": "integer"
                },
                "itemid": {
                    "format": "int32",
                    "type": "integer"
                },
                "itemname": {
                    "type": "string"
                },
                "itemtype": {
                    "type": "string"
                },
                "mrr": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "productlineid": {
                    "type": "string"
                },
                "purchasingunit": {
                    "type": "string"
                },
                "purchasingunitfactor": {
                    "format": "int32",
                    "type": "integer"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "salesunit": {
                    "type": "string"
                },
                "salesunitfactor": {
                    "format": "int32",
                    "type": "integer"
                },
                "standardunit": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taxable": {
                    "type": "boolean"
                },
                "termperiod": {
                    "type": "string"
                },
                "totalperiods": {
                    "format": "int32",
                    "type": "integer"
                },
                "uom": {
                    "type": "string"
                },
                "vsoecategory": {
                    "type": "string"
                },
                "vsoedlvrstatus": {
                    "type": "string"
                },
                "vsoerevdefstatus": {
                    "type": "string"
                },
                "whenlastsold": {
                    "$ref": "#/definitions/whenlastsold"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "itemid",
                "name",
                "itemtype"
            ],
            "x-primary-key": [
                "itemid"
            ],
            "type": "object"
        },
        "Pong": {
            "properties": {
                "dateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                }
            }
        },
        "expenseReports": {
            "properties": {
                "basecurr": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "batchkey": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 128
                },
                "currency": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string",
                    "x-samplevalue": "Travel to client"
                },
                "employeeid": {
                    "type": "string",
                    "x-samplevalue": "1"
                },
                "expensereportno": {
                    "type": "string",
                    "x-samplevalue": "---New -- -- -- --"
                },
                "expenses": {
                    "$ref": "#/definitions/expensesArrResp"
                },
                "externalid": {
                    "type": "string",
                    "x-samplevalue": "Trav1334"
                },
                "key": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 2245
                },
                "memo": {
                    "type": "string",
                    "x-samplevalue": "FFFF"
                },
                "state": {
                    "type": "string",
                    "x-samplevalue": "Draft"
                },
                "supdocid": {
                    "type": "string",
                    "x-samplevalue": "101"
                },
                "totalamount": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 50
                },
                "totaldue": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 50
                },
                "totalpaid": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "trx_totalamount": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 50
                },
                "trx_totaldue": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 50
                },
                "trx_totalpaid": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                }
            },
            "title": "expenseReports",
            "x-has-customfields": true,
            "x-primary-key": [
                "expensereportno",
                "key"
            ],
            "x-vendor-objectname": "expensereport",
            "type": "object"
        },
        "billsListObject": {
            "properties": {
                "basecurr": {
                    "type": "string"
                },
                "batchkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "billitems": {
                    "$ref": "#/definitions/billitems"
                },
                "billno": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "datepaid": {
                    "$ref": "#/definitions/datepaid"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "onhold": {
                    "type": "boolean"
                },
                "payto": {
                    "$ref": "#/definitions/payto"
                },
                "ponumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "returnto": {
                    "$ref": "#/definitions/returnto"
                },
                "state": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "totalamount": {
                    "format": "double",
                    "type": "number"
                },
                "totaldue": {
                    "format": "double",
                    "type": "number"
                },
                "totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalamount": {
                    "format": "double",
                    "type": "number"
                },
                "trx_totaldue": {
                    "format": "double",
                    "type": "number"
                },
                "trx_totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "vendorid": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "customfield": {
            "properties": {
                "customfieldname": {
                    "type": "string"
                },
                "customfieldvalue": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "updateexpenses": {
            "properties": {
                "expense": {
                    "items": {
                        "$ref": "#/definitions/expensePatchReq"
                    },
                    "type": "array"
                }
            },
            "title": "updateexpenses",
            "type": "object",
            "x-has-customfields": true
        },
        "attachments": {
            "properties": {
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/attachment"
                    }
                }
            },
            "type": "object"
        },
        "sotransitems": {
            "properties": {
                "sotransitem": {
                    "items": {
                        "$ref": "#/definitions/sotransitemCreate"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "newContact": {
            "properties": {
                "cellphone": {
                    "type": "string"
                },
                "companyname": {
                    "type": "string"
                },
                "contactid": {
                    "type": "string"
                },
                "contactname": {
                    "type": "string"
                },
                "email1": {
                    "type": "string"
                },
                "email2": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "initial": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "mailaddress": {
                    "$ref": "#/definitions/mailaddress"
                },
                "pager": {
                    "type": "string"
                },
                "phone1": {
                    "type": "string"
                },
                "phone2": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "printas": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "url1": {
                    "type": "string"
                },
                "url2": {
                    "type": "string"
                }
            },
            "required": [
                "contactname",
                "printas"
            ],
            "x-primary-key": [
                "contactid"
            ],
            "type": "object"
        },
        "reportingPeriodsListObject": {
            "properties": {
                "budgetable": {
                    "type": "string"
                },
                "enddate": {
                    "$ref": "#/definitions/enddate"
                },
                "headingtitle": {
                    "type": "string"
                },
                "headingtitle2": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "startdate": {
                    "$ref": "#/definitions/startdate"
                },
                "status": {
                    "type": "string"
                }
            },
            "x-vendor-objectname": "reportingperiod",
            "type": "object"
        },
        "whenlastsold": {
            "properties": {
                "day": {
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "foldersListObject": {
            "properties": {
                "createdby": {
                    "type": "string"
                },
                "creationdate": {
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "lastmodified": {
                    "format": "date-time",
                    "type": "string"
                },
                "lastmodifiedby": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parentfolder": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "name"
            ],
            "x-vendor-objectname": "supdocfolder",
            "type": "object"
        },
        "expensePost": {
            "properties": {
                "amount": {
                    "type": "string",
                    "x-samplevalue": "50"
                },
                "billable": {
                    "type": "string",
                    "x-samplevalue": "true"
                },
                "classid": {
                    "type": "string",
                    "x-samplevalue": "wqfa3dlqdq3qn8tcsor"
                },
                "contractid": {
                    "type": "string",
                    "x-samplevalue": "E444"
                },
                "currency": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "customerid": {
                    "type": "string",
                    "x-samplevalue": "88542"
                },
                "departmentid": {
                    "type": "string",
                    "x-samplevalue": "20"
                },
                "employeeid": {
                    "type": "string",
                    "x-samplevalue": "2"
                },
                "exchrate": {
                    "type": "string",
                    "x-samplevalue": "srtt"
                },
                "exchratedate": {
                    "$ref": "#/definitions/exchratedate"
                },
                "exchratetype": {
                    "type": "string",
                    "x-samplevalue": "Test"
                },
                "expensedate": {
                    "$ref": "#/definitions/expensedate"
                },
                "expensetype": {
                    "type": "string",
                    "x-conditionally-required-description": "This is required if glaccountno is not given",
                    "x-samplevalue": "Telephone"
                },
                "exppmttype": {
                    "type": "string",
                    "x-samplevalue": "RRR5"
                },
                "form1099": {
                    "type": "string",
                    "x-samplevalue": "false"
                },
                "form1099box": {
                    "type": "string",
                    "x-samplevalue": "String"
                },
                "form1099type": {
                    "type": "string",
                    "x-samplevalue": "String"
                },
                "glaccountno": {
                    "type": "string",
                    "x-conditionally-required-description": "This is required if expensetype is not given",
                    "x-samplevalue": "6470"
                },
                "itemid": {
                    "type": "string",
                    "x-samplevalue": "desk"
                },
                "locationid": {
                    "type": "string",
                    "x-samplevalue": "100"
                },
                "memo": {
                    "type": "string",
                    "x-samplevalue": "Marriott"
                },
                "paidfor": {
                    "type": "string",
                    "x-samplevalue": "Hotel"
                },
                "projectid": {
                    "type": "string",
                    "x-samplevalue": "520"
                },
                "quantity": {
                    "format": "double",
                    "type": "number"
                },
                "rate": {
                    "format": "double",
                    "type": "number"
                },
                "trx_amount": {
                    "type": "string",
                    "x-samplevalue": "12"
                },
                "vendorid": {
                    "type": "string",
                    "x-samplevalue": "APDM0533"
                },
                "warehouseid": {
                    "type": "string",
                    "x-samplevalue": "1"
                }
            },
            "required": [
                "amount"
            ],
            "title": "expensePost",
            "x-has-customfields": true,
            "type": "object"
        },
        "appymtentry": {
            "properties": {
                "ACCOUNTKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "ACCOUNTNO": {
                    "format": "int64",
                    "type": "integer"
                },
                "ACCOUNTTITLE": {
                    "type": "string"
                },
                "AMOUNT": {
                    "format": "int64",
                    "type": "integer"
                },
                "BASECURR": {
                    "type": "string"
                },
                "CREATEDBY": {
                    "format": "int64",
                    "type": "integer"
                },
                "CURRENCY": {
                    "type": "string"
                },
                "EXCHANGE_RATE": {
                    "format": "int64",
                    "type": "integer"
                },
                "EXCH_RATE_DATE": {
                    "format": "date-time",
                    "type": "string"
                },
                "LINEITEM": {
                    "type": "string"
                },
                "LINE_NO": {
                    "format": "int64",
                    "type": "integer"
                },
                "MODIFIEDBY": {
                    "format": "int64",
                    "type": "integer"
                },
                "RECORDKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "RECORDNO": {
                    "format": "int64",
                    "type": "integer"
                },
                "RECORDTYPE": {
                    "type": "string"
                },
                "TOTALPAID": {
                    "format": "int64",
                    "type": "integer"
                },
                "TOTALSELECTED": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_AMOUNT": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALPAID": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALSELECTED": {
                    "format": "int64",
                    "type": "integer"
                },
                "WHENCREATED": {
                    "format": "date-time",
                    "type": "string"
                },
                "WHENMODIFIED": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "departments": {
            "properties": {
                "departmentid": {
                    "format": "int32",
                    "type": "integer"
                },
                "parentid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "supervisorid": {
                    "format": "int32",
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "departmentid",
                "title"
            ],
            "x-primary-key": [
                "departmentid"
            ],
            "type": "object"
        },
        "customers": {
            "properties": {
                "billto": {
                    "$ref": "#/definitions/billto"
                },
                "comments": {
                    "type": "string"
                },
                "contactinfo": {
                    "$ref": "#/definitions/contactinfo"
                },
                "contactlist": {
                    "$ref": "#/definitions/contactlist"
                },
                "customerid": {
                    "format": "int32",
                    "type": "integer"
                },
                "deliveryoptions": {
                    "$ref": "#/definitions/deliveryoptions"
                },
                "name": {
                    "type": "string"
                },
                "onhold": {
                    "type": "string"
                },
                "primary": {
                    "$ref": "#/definitions/primary"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "status": {
                    "type": "string"
                },
                "totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "customerid",
                "name"
            ],
            "x-primary-key": [
                "customerid"
            ],
            "type": "object"
        },
        "glentryCreate": {
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "basecurrency": {
                    "type": "string"
                },
                "batchno": {
                    "format": "int32",
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "exch_rate_date": {
                    "type": "string"
                },
                "exch_rate_type_id": {
                    "format": "int32",
                    "type": "integer"
                },
                "exchange_rate": {
                    "format": "int32",
                    "type": "integer"
                },
                "glaccountno": {
                    "format": "int32",
                    "type": "integer"
                },
                "journalid": {
                    "type": "string"
                },
                "memo": {
                    "type": "string"
                },
                "trtype": {
                    "type": "string"
                },
                "trx_amount": {
                    "format": "double",
                    "type": "number"
                }
            },
            "required": [
                "trtype",
                "amount",
                "glaccountno",
                "currency"
            ],
            "type": "object"
        },
        "locationsListObject": {
            "properties": {
                "enddate": {
                    "$ref": "#/definitions/enddate"
                },
                "locationid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentid": {
                    "format": "int32",
                    "type": "integer"
                },
                "primary": {
                    "$ref": "#/definitions/primary"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "startdate": {
                    "$ref": "#/definitions/startdate"
                },
                "status": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "locationid"
            ],
            "type": "object"
        },
        "customersListObject": {
            "properties": {
                "accountlabel": {
                    "type": "string"
                },
                "billto": {
                    "$ref": "#/definitions/billto"
                },
                "comments": {
                    "type": "string"
                },
                "contactinfo": {
                    "$ref": "#/definitions/contactinfo"
                },
                "contactlist": {
                    "$ref": "#/definitions/contactlist"
                },
                "creditlimit": {
                    "format": "double",
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "customerid": {
                    "format": "int32",
                    "type": "integer"
                },
                "custrepid": {
                    "type": "string"
                },
                "custtype": {
                    "type": "string"
                },
                "deliveryoptions": {
                    "$ref": "#/definitions/deliveryoptions"
                },
                "glaccountno": {
                    "type": "string"
                },
                "glgroup": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "offsetglaccountno": {
                    "type": "string"
                },
                "onhold": {
                    "type": "string"
                },
                "parentid": {
                    "type": "string"
                },
                "pricelist": {
                    "type": "string"
                },
                "primary": {
                    "$ref": "#/definitions/primary"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "resaleno": {
                    "type": "string"
                },
                "shippingmethod": {
                    "type": "string"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "status": {
                    "type": "string"
                },
                "supdocid": {
                    "type": "string"
                },
                "taxid": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "territoryid": {
                    "type": "string"
                },
                "totaldue": {
                    "format": "double",
                    "type": "number"
                },
                "visibility": {
                    "$ref": "#/definitions/visibility"
                },
                "vsoepricelist": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "customerid"
            ],
            "type": "object"
        },
        "vendorReturnto": {
            "properties": {
                "contact": {
                    "$ref": "#/definitions/contact"
                },
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "invoicesListObject": {
            "properties": {
                "basecurr": {
                    "type": "string"
                },
                "batchkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "billto": {
                    "$ref": "#/definitions/billto"
                },
                "currency": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "datepaid": {
                    "$ref": "#/definitions/datepaid"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string"
                },
                "invoiceitems": {
                    "$ref": "#/definitions/invoiceitems"
                },
                "invoiceno": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "ponumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "state": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "totalamount": {
                    "format": "double",
                    "type": "number"
                },
                "totaldue": {
                    "format": "double",
                    "type": "number"
                },
                "totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalamount": {
                    "format": "double",
                    "type": "number"
                },
                "trx_totaldue": {
                    "format": "double",
                    "type": "number"
                },
                "trx_totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "BulkStatus": {
            "description": "Status of the bulk upload.",
            "type": "object",
            "properties": {
                "batchId": {
                    "description": "Contact/Leads loaded",
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "numOfLeadsProcessed": {
                    "description": "Contact/Leads loaded",
                    "type": "number"
                },
                "numOfRowsFailed": {
                    "description": "Failed count",
                    "type": "number"
                },
                "numOfRowsWithWarning": {
                    "description": "Contact/Leads that had warnings",
                    "type": "number"
                },
                "status": {
                    "description": "Status of the bulk job",
                    "type": "string"
                }
            }
        },
        "checkingAccountsListObject": {
            "properties": {
                "ABO_EMAIL_ID": {
                    "type": "string",
                    "x-displayName": "ABO email ID",
                    "x-readOnly": false
                },
                "ABO_FIRST_NAME": {
                    "type": "string",
                    "x-displayName": "ABO first name",
                    "x-readOnly": false
                },
                "ABO_LAST_NAME": {
                    "type": "string",
                    "x-displayName": "ABO last name",
                    "x-readOnly": false
                },
                "ABO_MIDDLE_NAME": {
                    "type": "string",
                    "x-displayName": "ABO middle name",
                    "x-readOnly": false
                },
                "ABO_PHONE_NUMBER": {
                    "type": "string",
                    "x-displayName": "ABO phone number",
                    "x-readOnly": false
                },
                "ACHBANKID": {
                    "type": "string",
                    "x-displayName": "ACH bank ID",
                    "x-readOnly": false
                },
                "ACHCOMPANYID": {
                    "type": "string",
                    "x-displayName": "ACH company ID",
                    "x-readOnly": false
                },
                "ACHENABLED": {
                    "type": "boolean",
                    "x-displayName": "Enable ACH",
                    "x-readOnly": false
                },
                "AMEXCHECKNUM": {
                    "type": "string",
                    "x-displayName": "AMEX Check number",
                    "x-readOnly": true
                },
                "AMEX_PAYVE_ACCOUNTID": {
                    "type": "string",
                    "x-displayName": "Subscription account ID",
                    "x-readOnly": true
                },
                "AUTOMATE_ACH_PYMT_CONF": {
                    "type": "boolean",
                    "x-displayName": "Automated ACH payment confirmation",
                    "x-readOnly": false
                },
                "AUTOMATE_ACH_PYMT_SEND": {
                    "type": "boolean",
                    "x-displayName": "Automated sending ACH payment request",
                    "x-readOnly": false
                },
                "AUTOMATE_CHECK_PRINT": {
                    "type": "boolean",
                    "x-displayName": "Automated check printing",
                    "x-readOnly": false
                },
                "AUTOMATE_PYMT_CONF": {
                    "type": "boolean",
                    "x-displayName": "Automated payment confirmation",
                    "x-readOnly": false
                },
                "BANKACCOUNTID": {
                    "type": "string",
                    "x-displayName": "Account ID",
                    "x-readOnly": false
                },
                "BANKACCOUNTNO": {
                    "type": "string",
                    "x-displayName": "Account number",
                    "x-readOnly": false
                },
                "BANKACCOUNTTYPE": {
                    "type": "string",
                    "x-displayName": "Account type",
                    "x-readOnly": false
                },
                "BANKNAME": {
                    "type": "string",
                    "x-displayName": "Bank name",
                    "x-readOnly": false
                },
                "BATCHID": {
                    "type": "string",
                    "x-displayName": "Batch number",
                    "x-readOnly": false
                },
                "BRANCHID": {
                    "type": "string",
                    "x-displayName": "Branch ID",
                    "x-readOnly": false
                },
                "CHECKINFOCONTACT": {
                    "$ref": "#/definitions/CHECKINFOCONTACTDEF"
                },
                "CHECKLAYOUT": {
                    "$ref": "#/definitions/CHECKLAYOUTDEF"
                },
                "COMPANYIDENTIFICATION": {
                    "type": "string",
                    "x-displayName": "Company identification",
                    "x-readOnly": false
                },
                "COMPANYNAME": {
                    "type": "string",
                    "x-displayName": "Company name",
                    "x-readOnly": false
                },
                "CREATEDBY": {
                    "format": "int64",
                    "type": "integer",
                    "x-displayName": "Created by",
                    "x-readOnly": true
                },
                "CURRENCY": {
                    "type": "string",
                    "x-displayName": "Currency",
                    "x-readOnly": false
                },
                "CUTOFFDATE": {
                    "format": "date",
                    "type": "string",
                    "x-displayName": "Cut-off date",
                    "x-readOnly": true
                },
                "DEPARTMENTID": {
                    "type": "string",
                    "x-displayName": "Department ID",
                    "x-readOnly": false
                },
                "DESCRIPTION": {
                    "type": "string",
                    "x-displayName": "Company entry description",
                    "x-readOnly": false
                },
                "DISCRETIONARYDATA": {
                    "type": "string",
                    "x-displayName": "Company discretionary data",
                    "x-readOnly": false
                },
                "DOCNUMBERSEQ": {
                    "type": "string",
                    "x-displayName": "Payment number sequence",
                    "x-readOnly": false
                },
                "FINANCIALDATA": {
                    "$ref": "#/definitions/FINANCIALDATADEF"
                },
                "FINANCIALINSTITUTION": {
                    "type": "string",
                    "x-displayName": "Originating financial institution",
                    "x-readOnly": false
                },
                "FORWFPM": {
                    "type": "boolean",
                    "x-displayName": "Available for payment manager",
                    "x-readOnly": false
                },
                "FRACTIONALROUTINGNO": {
                    "type": "string",
                    "x-displayName": "Fractional routing number*",
                    "x-readOnly": false
                },
                "GLACCOUNTNO": {
                    "type": "string",
                    "x-displayName": "GL account",
                    "x-readOnly": false
                },
                "INTERESTEARNEDACCOUNTLABEL": {
                    "type": "string",
                    "x-displayName": "Interest earned account label",
                    "x-readOnly": false
                },
                "INTERESTEARNEDGLACCOUNT": {
                    "type": "string",
                    "x-displayName": "Interest earned GL account",
                    "x-readOnly": false
                },
                "LASTRECONCILEDBALANCE": {
                    "type": "string",
                    "x-displayName": "Last reconciled balance",
                    "x-readOnly": true
                },
                "LASTRECONCILEDDATE": {
                    "format": "date",
                    "type": "string",
                    "x-displayName": "Last reconciled date",
                    "x-readOnly": true
                },
                "LOCATIONID": {
                    "type": "string",
                    "x-displayName": "Location ID",
                    "x-readOnly": false
                },
                "MAILADDRESS": {
                    "$ref": "#/definitions/MAILADDRESSDEF"
                },
                "MEGAENTITYID": {
                    "type": "string",
                    "x-displayName": "Created at - Entity ID",
                    "x-readOnly": true
                },
                "MEGAENTITYKEY": {
                    "format": "int64",
                    "type": "integer",
                    "x-displayName": "Created at - Entity key",
                    "x-readOnly": true
                },
                "MEGAENTITYNAME": {
                    "type": "string",
                    "x-displayName": "Created at - Entity name",
                    "x-readOnly": true
                },
                "MODIFIEDBY": {
                    "format": "int64",
                    "type": "integer",
                    "x-displayName": "Modified by",
                    "x-readOnly": true
                },
                "NAMEONTHEACCOUNT": {
                    "type": "string",
                    "x-displayName": "Name on the account",
                    "x-readOnly": true
                },
                "NEXTCHECK": {
                    "type": "string",
                    "x-displayName": "Next check #",
                    "x-readOnly": false
                },
                "ORIGINATORSTATUSCODE": {
                    "type": "string",
                    "x-displayName": "Originator status code",
                    "x-readOnly": true
                },
                "OUTSOURCEACH": {
                    "type": "string",
                    "x-displayName": "Enable outsource ach",
                    "x-readOnly": true
                },
                "OUTSOURCECHECK": {
                    "type": "string",
                    "x-displayName": "Enable outsource check",
                    "x-readOnly": true
                },
                "PHONE": {
                    "type": "string",
                    "x-displayName": "Phone number",
                    "x-readOnly": false
                },
                "PMCHECKTEMPLATEID": {
                    "type": "string",
                    "x-displayName": "Payment manager check template ID",
                    "x-readOnly": false
                },
                "PRINTON": {
                    "type": "string",
                    "x-displayName": "Print on",
                    "x-readOnly": false
                },
                "RECORDNO": {
                    "format": "int64",
                    "type": "integer",
                    "x-displayName": "Record number",
                    "x-readOnly": true
                },
                "RECORDTYPECODE": {
                    "type": "string",
                    "x-displayName": "Record type code",
                    "x-readOnly": true
                },
                "RECORD_URL": {
                    "type": "string",
                    "x-displayName": "Record URL",
                    "x-readOnly": true
                },
                "ROUTINGNO": {
                    "type": "string",
                    "x-displayName": "Routing number",
                    "x-readOnly": false
                },
                "SERVICECHARGEACCOUNTLABEL": {
                    "type": "string",
                    "x-displayName": "Service charge account label",
                    "x-readOnly": false
                },
                "SERVICECHARGEGLACCOUNT": {
                    "type": "string",
                    "x-displayName": "Service charge GL account",
                    "x-readOnly": false
                },
                "SERVICECLASSCODE": {
                    "type": "string",
                    "x-displayName": "Service class code",
                    "x-readOnly": false
                },
                "SHARECHECKNO": {
                    "type": "boolean",
                    "x-displayName": "Same as printed check#",
                    "x-readOnly": false
                },
                "STATUS": {
                    "type": "string",
                    "x-displayName": "Status",
                    "x-readOnly": false
                },
                "TRACENUMBERSEQ": {
                    "type": "string",
                    "x-displayName": "Trace number sequence",
                    "x-readOnly": false
                },
                "USERECOMMENDEDSETUP": {
                    "type": "boolean",
                    "x-displayName": "Use recommended setup",
                    "x-readOnly": false
                },
                "USETRACENUMBER": {
                    "type": "string",
                    "x-displayName": "Use trace number",
                    "x-readOnly": false
                },
                "WHENCREATED": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "When created",
                    "x-readOnly": true
                },
                "WHENMODIFIED": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "When modified",
                    "x-readOnly": true
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "RECORDNO"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and",
                "or"
            ],
            "x-vendor-objectname": "CHECKINGACCOUNT",
            "type": "object"
        },
        "updateClass": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "personalinfo": {
            "properties": {
                "contact": {
                    "$ref": "#/definitions/contact"
                }
            },
            "required": [
                "contact"
            ],
            "type": "object"
        },
        "journalsListObject": {
            "properties": {
                "createdby": {
                    "format": "int32",
                    "type": "integer"
                },
                "modifiedby": {
                    "format": "int32",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "whencreated": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "symbol"
            ],
            "type": "object"
        },
        "arpaymentitems": {
            "properties": {
                "arpaymentitem": {
                    "$ref": "#/definitions/arpaymentitem"
                }
            },
            "type": "object"
        },
        "contacts": {
            "properties": {
                "cellphone": {
                    "type": "string"
                },
                "companyname": {
                    "type": "string"
                },
                "contactid": {
                    "type": "string"
                },
                "contactname": {
                    "type": "string"
                },
                "email1": {
                    "type": "string"
                },
                "email2": {
                    "type": "string"
                },
                "externalid": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "initial": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "mailaddress": {
                    "$ref": "#/definitions/mailaddress"
                },
                "pager": {
                    "type": "string"
                },
                "phone1": {
                    "type": "string"
                },
                "phone2": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "printas": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taxable": {
                    "type": "boolean"
                },
                "taxgroup": {
                    "type": "string"
                },
                "url1": {
                    "type": "string"
                },
                "url2": {
                    "type": "string"
                }
            },
            "required": [
                "contactname",
                "printas"
            ],
            "x-primary-key": [
                "contactname"
            ],
            "type": "object"
        },
        "dateposted": {
            "properties": {
                "day": {
                    "type": "string",
                    "x-samplevalue": "09"
                },
                "month": {
                    "type": "string",
                    "x-samplevalue": "09"
                },
                "year": {
                    "type": "string",
                    "x-samplevalue": "2016"
                }
            },
            "title": "dateposted",
            "type": "object",
            "x-has-customfields": false
        },
        "paymentdate": {
            "properties": {
                "month": {
                    "type": "string"
                },
                "year": {
                    "type": "string"
                },
                "day": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "folders": {
            "properties": {
                "createdby": {
                    "type": "string"
                },
                "creationdate": {
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "lastmodified": {
                    "format": "date-time",
                    "type": "string"
                },
                "lastmodifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "name"
            ],
            "x-vendor-objectname": "supdocfolder",
            "type": "object"
        },
        "employeesListObject": {
            "properties": {
                "birthdate": {
                    "$ref": "#/definitions/birthdate"
                },
                "classid": {
                    "type": "string"
                },
                "contactlist": {
                    "$ref": "#/definitions/contactlist"
                },
                "currency": {
                    "type": "string"
                },
                "departmentid": {
                    "format": "int32",
                    "type": "integer"
                },
                "earningtype": {
                    "type": "string"
                },
                "employeeid": {
                    "format": "int32",
                    "type": "integer"
                },
                "employeetype": {
                    "type": "string"
                },
                "enddate": {
                    "$ref": "#/definitions/enddate"
                },
                "form1099box": {
                    "type": "string"
                },
                "form1099type": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "locationid": {
                    "format": "int32",
                    "type": "integer"
                },
                "mergepaymentreq": {
                    "type": "boolean"
                },
                "name1099": {
                    "type": "string"
                },
                "paymentnotify": {
                    "type": "boolean"
                },
                "personalinfo": {
                    "$ref": "#/definitions/personalinfo"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "ssn": {
                    "type": "string"
                },
                "startdate": {
                    "$ref": "#/definitions/startdate"
                },
                "status": {
                    "type": "string"
                },
                "supervisorid": {
                    "type": "string"
                },
                "terminationtype": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "employeeid"
            ],
            "type": "object"
        },
        "updateSalesOrders": {
            "properties": {
                "basecurr": {
                    "type": "string"
                },
                "billto": {
                    "$ref": "#/definitions/billto"
                },
                "currency": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "exchrate": {
                    "type": "string"
                },
                "exchratedate": {
                    "$ref": "#/definitions/exchratedate"
                },
                "exchratetype": {
                    "type": "string"
                },
                "externalid": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "projectid": {
                    "type": "string"
                },
                "referenceno": {
                    "type": "string"
                },
                "shippingmethod": {
                    "type": "string"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "state": {
                    "type": "string"
                },
                "supdocid": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "updatesotransitems": {
                    "$ref": "#/definitions/updatesotransitems"
                },
                "updatesubtotals": {
                    "$ref": "#/definitions/updatesubtotals"
                },
                "vsoepricelist": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "whenlastreceived": {
            "properties": {
                "day": {
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "CHECKINFOCONTACTDEF": {
            "properties": {
                "COMPANYNAME": {
                    "type": "string",
                    "x-displayName": "Company name",
                    "x-readOnly": false
                },
                "CONTACTNAME": {
                    "type": "string",
                    "x-displayName": "Contact name",
                    "x-readOnly": false
                },
                "MAILADDRESS": {
                    "$ref": "#/definitions/MAILADDRESSDEF"
                },
                "PHONE1": {
                    "type": "string",
                    "x-displayName": "Phone number",
                    "x-readOnly": false
                }
            },
            "type": "object"
        },
        "contact": {
            "properties": {
                "cellphone": {
                    "type": "string"
                },
                "companyname": {
                    "type": "string"
                },
                "contactname": {
                    "type": "string"
                },
                "email1": {
                    "type": "string"
                },
                "email2": {
                    "type": "string"
                },
                "externalid": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "initial": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "mailaddress": {
                    "$ref": "#/definitions/mailaddress"
                },
                "pager": {
                    "type": "string"
                },
                "phone1": {
                    "type": "string"
                },
                "phone2": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "printas": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taxable": {
                    "type": "boolean"
                },
                "taxgroup": {
                    "type": "string"
                },
                "url1": {
                    "type": "string"
                },
                "url2": {
                    "type": "string"
                }
            },
            "required": [
                "contactname",
                "printas"
            ],
            "type": "object"
        },
        "billsPaymentsUpdate": {
            "properties": {
                "WHENCREATED": {
                    "format": "date-time",
                    "type": "string"
                },
                "action": {
                    "enum": [
                        "Draft",
                        "Submit"
                    ],
                    "type": "string"
                },
                "appymtdetails": {
                    "$ref": "#/definitions/appymtdetails"
                },
                "description": {
                    "type": "string"
                },
                "docnumber": {
                    "type": "string"
                },
                "financialentity": {
                    "type": "string"
                },
                "paymentdate": {
                    "format": "date-time",
                    "type": "string"
                },
                "paymentrequestmethod": {
                    "type": "string"
                },
                "recordno": {
                    "format": "int64",
                    "type": "integer",
                    "x-readOnly": true
                }
            },
            "required": [
                "recordno"
            ],
            "x-primary-key": [
                "recordno"
            ],
            "x-vendor-objectname": "APPYMT",
            "type": "object"
        },
        "expenseRespAll": {
            "properties": {
                "amount": {
                    "type": "string",
                    "x-samplevalue": "50"
                },
                "billable": {
                    "type": "string",
                    "x-samplevalue": "true"
                },
                "classid": {
                    "type": "string",
                    "x-samplevalue": "wqfa3dlqdq3qn8tcsor"
                },
                "contractid": {
                    "type": "string",
                    "x-samplevalue": "E444"
                },
                "currency": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "customerid": {
                    "type": "string",
                    "x-samplevalue": "88542"
                },
                "departmentid": {
                    "type": "string",
                    "x-samplevalue": "20"
                },
                "employeeid": {
                    "type": "string",
                    "x-samplevalue": "2"
                },
                "exchrate": {
                    "type": "string",
                    "x-samplevalue": "srtt"
                },
                "exchratedate": {
                    "$ref": "#/definitions/exchratedate"
                },
                "exchratetype": {
                    "type": "string",
                    "x-samplevalue": "Test"
                },
                "expensedate": {
                    "$ref": "#/definitions/expensedate"
                },
                "expenseexchinfo": {
                    "$ref": "#/definitions/expenseexchinfo"
                },
                "expensetype": {
                    "type": "string",
                    "x-samplevalue": "Telephone"
                },
                "exppmttype": {
                    "type": "string",
                    "x-samplevalue": "RRR5"
                },
                "form1099": {
                    "type": "string",
                    "x-samplevalue": "false"
                },
                "form1099box": {
                    "type": "string",
                    "x-samplevalue": "String"
                },
                "form1099type": {
                    "type": "string",
                    "x-samplevalue": "String"
                },
                "glaccountno": {
                    "type": "string",
                    "x-samplevalue": "6470"
                },
                "itemid": {
                    "type": "string",
                    "x-samplevalue": "desk"
                },
                "line_num": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 1
                },
                "locationid": {
                    "type": "string",
                    "x-samplevalue": "100"
                },
                "memo": {
                    "type": "string",
                    "x-samplevalue": "Marriott"
                },
                "nonreimbursable": {
                    "type": "string",
                    "x-samplevalue": "F"
                },
                "paidfor": {
                    "type": "string",
                    "x-samplevalue": "Hotel"
                },
                "projectid": {
                    "type": "string",
                    "x-samplevalue": "520"
                },
                "quantity": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 333.3
                },
                "rate": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 4.4
                },
                "trx_amount": {
                    "type": "string",
                    "x-samplevalue": "12"
                },
                "vendorid": {
                    "type": "string",
                    "x-samplevalue": "APDM0533"
                },
                "warehouseid": {
                    "type": "string",
                    "x-samplevalue": "1"
                }
            },
            "title": "expenseRespAll",
            "x-has-customfields": true,
            "type": "object"
        },
        "vendors": {
            "properties": {
                "achenabled": {
                    "type": "boolean"
                },
                "billingtype": {
                    "type": "string"
                },
                "checkenabled": {
                    "type": "boolean"
                },
                "contactinfo": {
                    "$ref": "#/definitions/vendorContactinfo"
                },
                "contactlist": {
                    "$ref": "#/definitions/contactlist"
                },
                "displaytermdiscount": {
                    "type": "boolean"
                },
                "donotcutcheck": {
                    "type": "boolean"
                },
                "form1099": {
                    "type": "boolean"
                },
                "mergepaymentreq": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "onetime": {
                    "type": "boolean"
                },
                "onhold": {
                    "type": "string"
                },
                "payto": {
                    "$ref": "#/definitions/vendorPayto"
                },
                "primary": {
                    "$ref": "#/definitions/vendorPrimary"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "returnto": {
                    "$ref": "#/definitions/vendorReturnto"
                },
                "status": {
                    "type": "string"
                },
                "taxid": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "totaldue": {
                    "format": "double",
                    "type": "number"
                },
                "vendorid": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                },
                "wireenabled": {
                    "type": "boolean"
                }
            },
            "required": [
                "vendorid",
                "name"
            ],
            "x-primary-key": [
                "vendorid"
            ],
            "type": "object"
        },
        "OFFSETS": {
            "properties": {
                "ACCOUNTKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "ACCOUNTNO": {
                    "format": "int64",
                    "type": "integer"
                },
                "ACCOUNTTITLE": {
                    "type": "string"
                },
                "AMOUNT": {
                    "format": "int64",
                    "type": "integer"
                },
                "BASECURR": {
                    "type": "string"
                },
                "BASELOCATION": {
                    "format": "int64",
                    "type": "integer"
                },
                "CREATEDBY": {
                    "format": "int64",
                    "type": "integer"
                },
                "CURRENCY": {
                    "type": "string"
                },
                "EXCHANGE_RATE": {
                    "format": "int64",
                    "type": "integer"
                },
                "EXCH_RATE_DATE": {
                    "format": "date-time",
                    "type": "string"
                },
                "LINEITEM": {
                    "type": "string"
                },
                "MODIFIEDBY": {
                    "format": "int64",
                    "type": "integer"
                },
                "RECORDKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "RECORDNO": {
                    "format": "int64",
                    "type": "integer"
                },
                "RECORDTYPE": {
                    "type": "string"
                },
                "TOTALPAID": {
                    "format": "int64",
                    "type": "integer"
                },
                "TOTALSELECTED": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_AMOUNT": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALPAID": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALSELECTED": {
                    "format": "int64",
                    "type": "integer"
                },
                "WHENCREATED": {
                    "format": "date-time",
                    "type": "string"
                },
                "WHENMODIFIED": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ledgerAccountUpdate": {
            "properties": {
                "accounttype": {
                    "type": "string"
                },
                "closingtype": {
                    "type": "string"
                },
                "normalbalance": {
                    "type": "string"
                },
                "requiredept": {
                    "type": "string"
                },
                "requireloc": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taxable": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "visibility": {
            "properties": {
                "visibility_type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "attachmentsListObject": {
            "properties": {
                "attachments": {
                    "$ref": "#/definitions/attachments"
                },
                "createdby": {
                    "type": "string"
                },
                "creationdate": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "supdocid": {
                    "format": "int32",
                    "type": "integer"
                },
                "supdocname": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "supdocid"
            ],
            "type": "object"
        },
        "vendlineitems": {
            "properties": {
                "vendlineitem": {
                    "$ref": "#/definitions/vendlineitem"
                }
            },
            "type": "object"
        },
        "contactinfo": {
            "properties": {
                "contact": {
                    "$ref": "#/definitions/contact"
                }
            },
            "type": "object"
        },
        "employees": {
            "properties": {
                "birthdate": {
                    "$ref": "#/definitions/birthdate"
                },
                "contactlist": {
                    "$ref": "#/definitions/contactlist"
                },
                "departmentid": {
                    "format": "int32",
                    "type": "integer"
                },
                "employeeid": {
                    "format": "int32",
                    "type": "integer"
                },
                "employeetype": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "locationid": {
                    "format": "int32",
                    "type": "integer"
                },
                "mergepaymentreq": {
                    "type": "boolean"
                },
                "personalinfo": {
                    "$ref": "#/definitions/personalinfo"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "startdate": {
                    "$ref": "#/definitions/startdate"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "employeeid",
                "personalinfo"
            ],
            "x-primary-key": [
                "employeeid"
            ],
            "type": "object"
        },
        "CHECKLAYOUTDEF": {
            "properties": {
                "BANKACCTALIGN": {
                    "type": "string",
                    "x-displayName": "Account number alignment",
                    "x-readOnly": false
                },
                "CHECKNOLENGTH": {
                    "type": "string",
                    "x-displayName": "Check number length",
                    "x-readOnly": false
                },
                "CHECKPAPERFORMAT": {
                    "type": "string",
                    "x-displayName": "Paper format",
                    "x-readOnly": false
                },
                "CHECKPRINTFORMAT": {
                    "type": "string",
                    "x-displayName": "Printing format",
                    "x-readOnly": false
                },
                "COMPANY_LOGO": {
                    "type": "string",
                    "x-displayName": "Company Logo",
                    "x-readOnly": false
                },
                "DFLTCNYADDR": {
                    "type": "boolean",
                    "x-displayName": "Do not print company address",
                    "x-readOnly": false
                },
                "DISPLAYLOCATIONAS": {
                    "type": "string",
                    "x-displayName": "Print these location details on the check stub",
                    "x-readOnly": false
                },
                "MICRTRANSCODE": {
                    "type": "boolean",
                    "x-displayName": "Code 45",
                    "x-readOnly": false
                },
                "ONUS": {
                    "type": "boolean",
                    "x-displayName": "ON-US symbol",
                    "x-readOnly": false
                },
                "ONUS32": {
                    "type": "string",
                    "x-displayName": "ON-US symbol position",
                    "x-readOnly": false
                },
                "PRINTCNYLOGO": {
                    "type": "boolean",
                    "x-displayName": "Print Company Logo",
                    "x-readOnly": false
                },
                "PRINTLINEITEMS": {
                    "type": "boolean",
                    "x-displayName": "Print line-item detail on check stubs",
                    "x-readOnly": false
                },
                "SIGLINE2AMOUNT": {
                    "type": "string",
                    "x-displayName": "Amount",
                    "x-readOnly": false
                },
                "SIGNATUREIMAGE1": {
                    "type": "string",
                    "x-displayName": "Upload image of first signature",
                    "x-readOnly": false
                },
                "SIGNATUREIMAGE2": {
                    "type": "string",
                    "x-displayName": "Upload image of second signature",
                    "x-readOnly": false
                },
                "SPACESTOAPPEND": {
                    "type": "string",
                    "x-displayName": "Account number positioning",
                    "x-readOnly": false
                },
                "USDTEXT": {
                    "type": "boolean",
                    "x-displayName": "US Funds",
                    "x-readOnly": false
                },
                "USECNYADDRESS": {
                    "type": "string",
                    "x-displayName": "Company Address",
                    "x-readOnly": false
                },
                "USESECONDSIGNATURECHECKS": {
                    "type": "boolean",
                    "x-displayName": "Use 2-signature checks",
                    "x-readOnly": false
                },
                "USESIG1BELOWAMT": {
                    "type": "string",
                    "x-displayName": "Only print signature 1 below this amount",
                    "x-readOnly": false
                },
                "USESIG2BELOWAMT": {
                    "type": "string",
                    "x-displayName": "Only print signature 2 below this amount",
                    "x-readOnly": false
                },
                "VOIDTEXT": {
                    "type": "string",
                    "x-displayName": "Additional text",
                    "x-readOnly": false
                }
            },
            "type": "object"
        },
        "contactlist": {
            "properties": {
                "contactitem": {
                    "items": {
                        "$ref": "#/definitions/contactitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "vendorUpdate": {
            "properties": {
                "achenabled": {
                    "type": "boolean"
                },
                "billingtype": {
                    "type": "string"
                },
                "checkenabled": {
                    "type": "boolean"
                },
                "contactinfo": {
                    "$ref": "#/definitions/vendorContactinfo"
                },
                "contactlist": {
                    "$ref": "#/definitions/contactlist"
                },
                "displaytermdiscount": {
                    "type": "boolean"
                },
                "donotcutcheck": {
                    "type": "boolean"
                },
                "form1099": {
                    "type": "boolean"
                },
                "mergepaymentreq": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "onetime": {
                    "type": "boolean"
                },
                "onhold": {
                    "type": "string"
                },
                "payto": {
                    "$ref": "#/definitions/vendorPayto"
                },
                "primary": {
                    "$ref": "#/definitions/vendorPrimary"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "returnto": {
                    "$ref": "#/definitions/vendorReturnto"
                },
                "status": {
                    "type": "string"
                },
                "taxid": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "totaldue": {
                    "format": "double",
                    "type": "number"
                },
                "whenmodified": {
                    "type": "string"
                },
                "wireenabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "APPYMTDETAILS": {
            "properties": {
                "appymtdetail": {
                    "$ref": "#/definitions/appymtdetail"
                }
            },
            "type": "object"
        },
        "classes": {
            "properties": {
                "classid": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "classid",
                "name"
            ],
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "updatepotransitems": {
            "properties": {
                "potransitem": {
                    "items": {
                        "$ref": "#/definitions/potransitem"
                    },
                    "type": "array"
                },
                "updatepotransitem": {
                    "items": {
                        "$ref": "#/definitions/updatepotransitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "expensePatchReq": {
            "properties": {
                "amount": {
                    "type": "string",
                    "x-samplevalue": "50"
                },
                "billable": {
                    "type": "string",
                    "x-samplevalue": "true"
                },
                "classid": {
                    "type": "string",
                    "x-samplevalue": "wqfa3dlqdq3qn8tcsor"
                },
                "contractid": {
                    "type": "string",
                    "x-samplevalue": "E444"
                },
                "currency": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "customerid": {
                    "type": "string",
                    "x-samplevalue": "88542"
                },
                "departmentid": {
                    "type": "string",
                    "x-samplevalue": "20"
                },
                "employeeid": {
                    "type": "string",
                    "x-samplevalue": "2"
                },
                "exchrate": {
                    "type": "string",
                    "x-samplevalue": "srtt"
                },
                "exchratedate": {
                    "$ref": "#/definitions/exchratedate"
                },
                "exchratetype": {
                    "type": "string",
                    "x-samplevalue": "Test"
                },
                "expensedate": {
                    "$ref": "#/definitions/expensedate"
                },
                "expensetype": {
                    "type": "string",
                    "x-samplevalue": "Telephone"
                },
                "exppmttype": {
                    "type": "string",
                    "x-samplevalue": "RRR5"
                },
                "form1099": {
                    "type": "string",
                    "x-samplevalue": "false"
                },
                "form1099box": {
                    "type": "string",
                    "x-samplevalue": "String"
                },
                "form1099type": {
                    "type": "string",
                    "x-samplevalue": "String"
                },
                "glaccountno": {
                    "type": "string",
                    "x-samplevalue": "6470"
                },
                "itemid": {
                    "type": "string",
                    "x-samplevalue": "desk"
                },
                "locationid": {
                    "type": "string",
                    "x-samplevalue": "100"
                },
                "memo": {
                    "type": "string",
                    "x-samplevalue": "Marriott"
                },
                "paidfor": {
                    "type": "string",
                    "x-samplevalue": "Hotel"
                },
                "projectid": {
                    "type": "string",
                    "x-samplevalue": "520"
                },
                "quantity": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 333.3
                },
                "rate": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 4.4
                },
                "trx_amount": {
                    "type": "string",
                    "x-samplevalue": "12"
                },
                "vendorid": {
                    "type": "string",
                    "x-samplevalue": "APDM0533"
                },
                "warehouseid": {
                    "type": "string",
                    "x-samplevalue": "1"
                }
            },
            "title": "expensePatchReq",
            "x-has-customfields": true,
            "type": "object"
        },
        "invoiceitems": {
            "properties": {
                "lineitem": {
                    "items": {
                        "$ref": "#/definitions/lineitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "bills": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "basecurr": {
                    "type": "string"
                },
                "batchkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "billid": {
                    "format": "int32",
                    "type": "integer"
                },
                "billitems": {
                    "$ref": "#/definitions/billitems"
                },
                "billno": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/dateFormat"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateFormat"
                },
                "description": {
                    "type": "string"
                },
                "exchrate": {
                    "format": "int32",
                    "type": "integer"
                },
                "exchratedate": {
                    "$ref": "#/definitions/dateFormat"
                },
                "exchratetype": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "onhold": {
                    "type": "boolean"
                },
                "payto": {
                    "$ref": "#/definitions/payto"
                },
                "ponumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "returnto": {
                    "$ref": "#/definitions/returnto"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "totalamount": {
                    "format": "double",
                    "type": "number"
                },
                "totaldue": {
                    "format": "double",
                    "type": "number"
                },
                "totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalamount": {
                    "format": "double",
                    "type": "number"
                },
                "trx_totaldue": {
                    "format": "double",
                    "type": "number"
                },
                "trx_totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "vendorid": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "vendorid",
                "datecreated",
                "termname",
                "currency",
                "exchrate",
                "billno",
                "billitems"
            ],
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "subtotals": {
            "properties": {
                "subtotal": {
                    "items": {
                        "$ref": "#/definitions/subtotal"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "billitems": {
            "properties": {
                "lineitem": {
                    "items": {
                        "$ref": "#/definitions/lineitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "departmentsListObject": {
            "properties": {
                "departmentid": {
                    "format": "int32",
                    "type": "integer"
                },
                "parentid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "supervisorid": {
                    "format": "int32",
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "departmentid"
            ],
            "type": "object"
        },
        "salesOrders": {
            "properties": {
                "basecurr": {
                    "type": "string"
                },
                "billto": {
                    "$ref": "#/definitions/billtoCN"
                },
                "currency": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "documentnumber": {
                    "type": "string"
                },
                "exchrate": {
                    "format": "int32",
                    "type": "integer"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "paymentstatus": {
                    "type": "string"
                },
                "shipto": {
                    "$ref": "#/definitions/shiptoCN"
                },
                "sotransactionid": {
                    "format": "int32",
                    "type": "integer"
                },
                "sotransitems": {
                    "$ref": "#/definitions/sotransitems"
                },
                "status": {
                    "type": "string"
                },
                "subtotals": {
                    "$ref": "#/definitions/subtotals"
                },
                "termname": {
                    "type": "string"
                },
                "transactionid": {
                    "type": "string"
                },
                "transactionstate": {
                    "type": "string"
                },
                "transactiontype": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "transactiontype",
                "datecreated",
                "customerid",
                "sotransitems"
            ],
            "x-primary-key": [
                "transactionid"
            ],
            "type": "object"
        },
        "billsPayments": {
            "properties": {
                "APPYMTDETAILS": {
                    "$ref": "#/definitions/APPYMTDETAILS"
                },
                "AUWHENCREATED": {
                    "format": "date-time",
                    "type": "string"
                },
                "BASECURR": {
                    "type": "string"
                },
                "CLEARED": {
                    "type": "string"
                },
                "CREATEDBY": {
                    "format": "int64",
                    "type": "integer"
                },
                "CURRENCY": {
                    "type": "string"
                },
                "ENTITY": {
                    "type": "string"
                },
                "FINANCIALACCOUNTCURRENCY": {
                    "type": "string"
                },
                "FINANCIALACCOUNTNAME": {
                    "type": "string"
                },
                "FINANCIALENTITY": {
                    "type": "string"
                },
                "FINANCIALENTITYTYPE": {
                    "type": "string"
                },
                "ITEMS": {
                    "$ref": "#/definitions/ITEMS"
                },
                "MODIFIEDBY": {
                    "format": "int64",
                    "type": "integer"
                },
                "OFFSETS": {
                    "$ref": "#/definitions/OFFSETS"
                },
                "PAYMENTMETHOD": {
                    "type": "string"
                },
                "PAYMENTMETHODKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "PAYMENTPRIORITY": {
                    "type": "string"
                },
                "PRBATCH": {
                    "type": "string"
                },
                "PRBATCHKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "RAWSTATE": {
                    "type": "string"
                },
                "RECORDNO": {
                    "format": "int64",
                    "type": "integer"
                },
                "RECORDTYPE": {
                    "type": "string"
                },
                "STATE": {
                    "enum": [
                        "C",
                        "D",
                        "A",
                        "V",
                        "S"
                    ],
                    "type": "string"
                },
                "STATUS": {
                    "type": "string"
                },
                "SYSTEMGENERATED": {
                    "type": "string"
                },
                "TOTALDUE": {
                    "format": "int64",
                    "type": "integer"
                },
                "TOTALENTERED": {
                    "format": "int64",
                    "type": "integer"
                },
                "TOTALPAID": {
                    "format": "int64",
                    "type": "integer"
                },
                "TOTALSELECTED": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALDUE": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALENTERED": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALPAID": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALSELECTED": {
                    "format": "int64",
                    "type": "integer"
                },
                "USERKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "VENDORID": {
                    "type": "string"
                },
                "VENDORNAME": {
                    "type": "string"
                },
                "WHENCREATED": {
                    "format": "date-time",
                    "type": "string"
                },
                "WHENMODIFIED": {
                    "format": "date-time",
                    "type": "string"
                },
                "WHENPAID": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "x-primary-key": [
                "RECORDNO"
            ],
            "x-vendor-objectname": "APPYMT",
            "type": "object"
        },
        "warehouses": {
            "properties": {
                "contactname": {
                    "type": "string"
                },
                "managerid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentid": {
                    "type": "string"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "status": {
                    "type": "string"
                },
                "usedingl": {
                    "type": "boolean"
                },
                "warehouseid": {
                    "type": "string"
                },
                "warehouseparentid": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "warehouseid"
            ],
            "type": "object"
        },
        "ledgerAccountsListObject": {
            "properties": {
                "accounttype": {
                    "type": "string"
                },
                "alternativeaccount": {
                    "type": "string"
                },
                "closingaccountno": {
                    "format": "int32",
                    "type": "integer"
                },
                "closingtype": {
                    "type": "string"
                },
                "glaccountno": {
                    "format": "int32",
                    "type": "integer"
                },
                "normalbalance": {
                    "type": "string"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "requireclass": {
                    "type": "boolean"
                },
                "requirecustomer": {
                    "type": "boolean"
                },
                "requiredept": {
                    "type": "boolean"
                },
                "requireemployee": {
                    "type": "boolean"
                },
                "requireitem": {
                    "type": "boolean"
                },
                "requireloc": {
                    "type": "boolean"
                },
                "requireproject": {
                    "type": "boolean"
                },
                "requirevendor": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "taxable": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "glaccountno"
            ],
            "type": "object"
        },
        "billsCustomfieldsCustomfield": {
            "properties": {
                "customfieldname": {
                    "type": "string"
                },
                "customfieldvalue": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "expensesRespAll": {
            "properties": {
                "expense": {
                    "items": {
                        "$ref": "#/definitions/expenseRespAll"
                    },
                    "type": "array"
                }
            },
            "title": "expensesRespAll",
            "type": "object",
            "x-has-customfields": true
        },
        "expenseReportsListObject": {
            "properties": {
                "basecurr": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "batchkey": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 128
                },
                "currency": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string",
                    "x-samplevalue": "Travel to client"
                },
                "employeeid": {
                    "type": "string",
                    "x-samplevalue": "1"
                },
                "expensereportno": {
                    "type": "string",
                    "x-samplevalue": "---New -- -- -- --"
                },
                "expenses": {
                    "$ref": "#/definitions/expensesRespAll"
                },
                "externalid": {
                    "type": "string",
                    "x-samplevalue": "Trav1334"
                },
                "key": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 2245
                },
                "memo": {
                    "type": "string",
                    "x-samplevalue": "FFFF"
                },
                "state": {
                    "type": "string",
                    "x-samplevalue": "Draft"
                },
                "supdocid": {
                    "type": "string",
                    "x-samplevalue": "101"
                },
                "totalamount": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 50
                },
                "totaldue": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 50
                },
                "totalpaid": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "trx_totalamount": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 50
                },
                "trx_totaldue": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 50
                },
                "trx_totalpaid": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                }
            },
            "title": "expenseReportsListObject",
            "x-has-customfields": true,
            "x-primary-key": [
                "expensereportno",
                "key"
            ],
            "x-vendor-objectname": "expensereport",
            "type": "object"
        },
        "contactUpdate": {
            "properties": {
                "cellphone": {
                    "type": "string"
                },
                "companyname": {
                    "type": "string"
                },
                "email1": {
                    "type": "string"
                },
                "email2": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "initial": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "mailaddress": {
                    "$ref": "#/definitions/mailaddress"
                },
                "pager": {
                    "type": "string"
                },
                "phone1": {
                    "type": "string"
                },
                "phone2": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "printas": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "url1": {
                    "type": "string"
                },
                "url2": {
                    "type": "string"
                }
            },
            "required": [
                "printas"
            ],
            "type": "object"
        },
        "ledgerAccounts": {
            "properties": {
                "accounttype": {
                    "type": "string"
                },
                "alternativeaccount": {
                    "type": "string"
                },
                "closingtype": {
                    "type": "string"
                },
                "glaccountid": {
                    "format": "int32",
                    "type": "integer"
                },
                "glaccountno": {
                    "format": "int32",
                    "type": "integer"
                },
                "normalbalance": {
                    "type": "string"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "requiredept": {
                    "type": "boolean"
                },
                "requireloc": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "taxable": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "glaccountno",
                "title",
                "normalbalance"
            ],
            "x-primary-key": [
                "glaccountno"
            ],
            "type": "object"
        },
        "deliveryoptions": {
            "properties": {
                "deliveryoption": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "foldersCreateResponse": {
            "properties": {
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "recordno"
            ],
            "x-vendor-objectname": "supdocfolder",
            "type": "object"
        },
        "birthdate": {
            "properties": {
                "day": {
                    "type": "string"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "whslineitem": {
            "properties": {
                "avgcost": {
                    "format": "int32",
                    "type": "integer"
                },
                "lastcost": {
                    "format": "int32",
                    "type": "integer"
                },
                "reordermethod": {
                    "type": "string"
                },
                "whsid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "createFile": {
            "properties": {
                "attachments": {
                    "items": {
                        "$ref": "#/definitions/attachment"
                    },
                    "type": "array"
                },
                "description": {
                    "type": "string"
                },
                "supdocid": {
                    "type": "string"
                },
                "supdocname": {
                    "type": "string"
                }
            },
            "required": [
                "supdocid"
            ],
            "x-primary-key": [
                "supdocid"
            ],
            "type": "object"
        },
        "invoices": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "basecurr": {
                    "type": "string"
                },
                "batchkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "billto": {
                    "$ref": "#/definitions/billto"
                },
                "currency": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/dateFormat"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateFormat"
                },
                "description": {
                    "type": "string"
                },
                "exchrate": {
                    "format": "int32",
                    "type": "integer"
                },
                "exchratedate": {
                    "$ref": "#/definitions/dateFormat"
                },
                "exchratetype": {
                    "type": "string"
                },
                "invoiceid": {
                    "format": "int32",
                    "type": "integer"
                },
                "invoiceitems": {
                    "$ref": "#/definitions/invoiceitems"
                },
                "invoiceno": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "ponumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "customerid",
                "datecreated",
                "datedue",
                "action",
                "currency",
                "exchrate",
                "invoiceitems"
            ],
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "terms": {
            "properties": {
                "artermid": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disccalcon": {
                    "type": "string"
                },
                "due": {
                    "$ref": "#/definitions/due"
                },
                "name": {
                    "type": "string"
                },
                "penalty": {
                    "$ref": "#/definitions/penalty"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "description"
            ],
            "x-primary-key": [
                "name"
            ],
            "type": "object"
        },
        "journalUpdate": {
            "properties": {
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vendorsListObject": {
            "properties": {
                "achenabled": {
                    "type": "boolean"
                },
                "billingtype": {
                    "type": "string"
                },
                "checkenabled": {
                    "type": "boolean"
                },
                "comments": {
                    "type": "string"
                },
                "contactinfo": {
                    "$ref": "#/definitions/contactinfo"
                },
                "contactlist": {
                    "$ref": "#/definitions/contactlist"
                },
                "creditlimit": {
                    "format": "int32",
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "displaytermdiscount": {
                    "type": "boolean"
                },
                "displocacctnocheck": {
                    "type": "boolean"
                },
                "donotcutcheck": {
                    "type": "boolean"
                },
                "form1099": {
                    "type": "boolean"
                },
                "mergepaymentreq": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "onetime": {
                    "type": "boolean"
                },
                "onhold": {
                    "type": "string"
                },
                "paymentnotify": {
                    "type": "boolean"
                },
                "payto": {
                    "$ref": "#/definitions/payto"
                },
                "primary": {
                    "$ref": "#/definitions/primary"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "returnto": {
                    "$ref": "#/definitions/returnto"
                },
                "status": {
                    "type": "string"
                },
                "taxid": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "vendoraccountno": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                },
                "wireenabled": {
                    "type": "boolean"
                }
            },
            "x-primary-key": [
                "vendorid"
            ],
            "type": "object"
        },
        "transactionsListObject": {
            "properties": {
                "batchno": {
                    "format": "int32",
                    "type": "integer"
                },
                "datecreated": {
                    "$ref": "#/definitions/transactionsListDatecreated"
                },
                "datemodified": {
                    "$ref": "#/definitions/datemodified"
                },
                "description": {
                    "type": "string"
                },
                "gltransactionentries": {
                    "$ref": "#/definitions/gltransactionentries"
                },
                "journalid": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "apadjustmentitems": {
            "properties": {
                "lineitem": {
                    "items": {
                        "$ref": "#/definitions/lineitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "transactionsListDatecreated": {
            "properties": {
                "day": {
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "newPurchaseOrder": {
            "properties": {
                "createdfrom": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "documentno": {
                    "type": "string"
                },
                "externalid": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "payto": {
                    "$ref": "#/definitions/payto"
                },
                "potransactionid": {
                    "type": "string"
                },
                "potransitems": {
                    "$ref": "#/definitions/potransitems"
                },
                "referenceno": {
                    "type": "string"
                },
                "returnto": {
                    "$ref": "#/definitions/returnto"
                },
                "shippingmethod": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subtotals": {
                    "$ref": "#/definitions/subtotals"
                },
                "supdocid": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "transactiontype": {
                    "type": "string"
                },
                "vendordocno": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                }
            },
            "required": [
                "transactiontype",
                "datecreated",
                "vendorid",
                "datedue",
                "returnto",
                "payto",
                "potransitems"
            ],
            "x-primary-key": [
                "potransactionid"
            ],
            "type": "object"
        },
        "expenseReportsResp": {
            "properties": {
                "expensereportid": {
                    "format": "int64",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            },
            "title": "expenseReportsResp",
            "x-primary-key": [
                "expensereportno"
            ],
            "x-vendor-objectname": "expensereport",
            "type": "object"
        },
        "updatePurchaseOrders": {
            "properties": {
                "basecurr": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "exchratedate": {
                    "$ref": "#/definitions/exchratedate"
                },
                "exchratetype": {
                    "type": "string"
                },
                "externalid": {
                    "type": "string"
                },
                "payto": {
                    "$ref": "#/definitions/payto"
                },
                "referenceno": {
                    "type": "string"
                },
                "returnto": {
                    "$ref": "#/definitions/returnto"
                },
                "shippingmethod": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "supdocid": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "updatepotransitems": {
                    "$ref": "#/definitions/updatepotransitems"
                },
                "vendordocno": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "transactions": {
            "properties": {
                "batchno": {
                    "format": "int32",
                    "type": "integer"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datemodified": {
                    "$ref": "#/definitions/dateFormat"
                },
                "description": {
                    "type": "string"
                },
                "gltransactionentries": {
                    "$ref": "#/definitions/gltransactionentries"
                },
                "gltransactionid": {
                    "format": "int32",
                    "type": "integer"
                },
                "journalid": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "referenceno": {
                    "type": "string"
                },
                "reversedate": {
                    "$ref": "#/definitions/dateFormat"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "journalid",
                "datecreated",
                "description",
                "gltransactionentries"
            ],
            "x-primary-key": [
                "gltransactionid"
            ],
            "type": "object"
        },
        "journals": {
            "properties": {
                "externalid": {
                    "type": "string"
                },
                "journalid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "whencreated": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "symbol",
                "title"
            ],
            "x-primary-key": [
                "symbol"
            ],
            "type": "object"
        },
        "foldersUpdateResponse": {
            "properties": {
                "status": {
                    "type": "string"
                }
            },
            "x-vendor-objectname": "supdocfolder",
            "type": "object"
        },
        "classesListObject": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parentid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "FINANCIALDATADEF": {
            "properties": {
                "APJOURNAL": {
                    "type": "string",
                    "x-displayName": "Default payables GL journal",
                    "x-readOnly": false
                },
                "ARJOURNAL": {
                    "type": "string",
                    "x-displayName": "Default receivables GL journal",
                    "x-readOnly": false
                },
                "DISABLEIET": {
                    "type": "string"
                },
                "RECONMODE": {
                    "type": "string",
                    "x-displayName": "Reconciliation mode",
                    "x-readOnly": false
                }
            },
            "type": "object"
        },
        "newClass": {
            "properties": {
                "classid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "classid",
                "name"
            ],
            "x-primary-key": [
                "classid"
            ],
            "type": "object"
        },
        "enddate": {
            "properties": {
                "day": {
                    "type": "string"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "lineitems": {
            "properties": {
                "lineitem": {
                    "items": {
                        "$ref": "#/definitions/lineitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "vouchersUpdate": {
            "properties": {
                "adjustmentno": {
                    "type": "string"
                },
                "billno": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "description": {
                    "type": "string"
                },
                "updateapadjustmentitems": {
                    "$ref": "#/definitions/updateapadjustmentitems"
                }
            },
            "type": "object"
        },
        "Object": {
            "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
            "properties": {
                "objectField": {
                    "type": "string"
                }
            }
        },
        "purchaseOrders": {
            "properties": {
                "createdfrom": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "documentno": {
                    "type": "string"
                },
                "externalid": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "payto": {
                    "$ref": "#/definitions/payto"
                },
                "potransactionid": {
                    "type": "string"
                },
                "potransitems": {
                    "$ref": "#/definitions/potransitems"
                },
                "referenceno": {
                    "type": "string"
                },
                "returnto": {
                    "$ref": "#/definitions/returnto"
                },
                "shippingmethod": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subtotals": {
                    "$ref": "#/definitions/subtotals"
                },
                "supdocid": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "transactionid": {
                    "type": "string"
                },
                "transactiontype": {
                    "type": "string"
                },
                "vendordocno": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                }
            },
            "required": [
                "transactiontype",
                "datecreated",
                "vendorid",
                "datedue",
                "returnto",
                "payto",
                "potransitems"
            ],
            "x-primary-key": [
                "transactionid"
            ],
            "type": "object"
        },
        "primary": {
            "properties": {
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "customerCreate": {
            "properties": {
                "customerid": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "customerid",
                "name"
            ],
            "x-primary-key": [
                "customerid"
            ],
            "type": "object"
        },
        "appymtdetail": {
            "properties": {
                "adjustmententrykey": {
                    "format": "int64",
                    "type": "integer"
                },
                "adjustmentkey": {
                    "format": "int64",
                    "type": "integer"
                },
                "advanceentrykey": {
                    "format": "int64",
                    "type": "integer"
                },
                "advancekey": {
                    "format": "int64",
                    "type": "integer"
                },
                "discountdate": {
                    "format": "date-time",
                    "type": "string"
                },
                "entrycurrency": {
                    "type": "string"
                },
                "entrykey": {
                    "format": "int64",
                    "type": "integer"
                },
                "inlineentrykey": {
                    "format": "int64",
                    "type": "integer"
                },
                "inlinekey": {
                    "format": "int64",
                    "type": "integer"
                },
                "posadjentrykey": {
                    "format": "int64",
                    "type": "integer"
                },
                "posadjkey": {
                    "format": "int64",
                    "type": "integer"
                },
                "recordkey": {
                    "format": "int64",
                    "type": "integer"
                },
                "trx_adjustmentamount": {
                    "format": "int64",
                    "type": "integer"
                },
                "trx_inlineamount": {
                    "format": "int64",
                    "type": "integer"
                },
                "trx_paymentamount": {
                    "format": "int64",
                    "type": "integer"
                },
                "trx_postedadvanceamount": {
                    "format": "int64",
                    "type": "integer"
                }
            },
            "required": [
                "entrykey",
                "recordkey"
            ],
            "type": "object"
        },
        "payments": {
            "properties": {
                "arpaymentid": {
                    "format": "int32",
                    "type": "integer"
                },
                "arpaymentitem": {
                    "$ref": "#/definitions/arpaymentitem"
                },
                "bankaccountid": {
                    "type": "string"
                },
                "batchkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "batchtitle": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "datereceived": {
                    "$ref": "#/definitions/datereceived"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "lineitems": {
                    "$ref": "#/definitions/lineitems"
                },
                "paymentamount": {
                    "format": "double",
                    "type": "number"
                },
                "paymentapplied": {
                    "format": "int32",
                    "type": "integer"
                },
                "paymentmethod": {
                    "type": "string"
                },
                "paymentunapplied": {
                    "format": "double",
                    "type": "number"
                },
                "refid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "undeposited": {
                    "type": "boolean"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "customerid",
                "paymentamount",
                "bankaccountid"
            ],
            "x-primary-key": [
                "arpaymentid"
            ],
            "type": "object"
        },
        "BulkQuery": {
            "description": "BulkLoad response of bulk download.",
            "properties": {
                "id": {
                    "description": "Id of the bulk job",
                    "type": "number"
                },
                "status": {
                    "description": "Status of the bulk job",
                    "type": "string"
                }
            }
        },
        "contactitem": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "potransitems": {
            "properties": {
                "potransitem": {
                    "items": {
                        "$ref": "#/definitions/potransitemCreate"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "billsPaymentsCreate": {
            "properties": {
                "RECORDNO": {
                    "format": "int64",
                    "type": "integer",
                    "x-readOnly": true
                },
                "action": {
                    "enum": [
                        "Draft",
                        "Submit"
                    ],
                    "type": "string"
                },
                "appymtdetails": {
                    "$ref": "#/definitions/appymtdetails"
                },
                "basecurr": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "docnumber": {
                    "type": "string"
                },
                "exch_rate_date": {
                    "format": "date-time",
                    "type": "string"
                },
                "exch_rate_type_id": {
                    "type": "string"
                },
                "financialentity": {
                    "type": "string"
                },
                "paymentdate": {
                    "format": "date-time",
                    "type": "string"
                },
                "paymentmethod": {
                    "type": "string"
                },
                "paymentrequestmethod": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                }
            },
            "required": [
                "financialentity",
                "paymentmethod",
                "vendorid",
                "paymentdate",
                "appymtdetail"
            ],
            "x-primary-key": [
                "RECORDNO"
            ],
            "x-vendor-objectname": "APPYMT",
            "type": "object"
        },
        "vendorPrimary": {
            "properties": {
                "contact": {
                    "$ref": "#/definitions/contact"
                },
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "expensedate": {
            "properties": {
                "day": {
                    "type": "string",
                    "x-samplevalue": "01"
                },
                "month": {
                    "type": "string",
                    "x-samplevalue": "09"
                },
                "year": {
                    "type": "string",
                    "x-samplevalue": "2015"
                }
            },
            "title": "expensedate",
            "type": "object",
            "x-has-customfields": false
        },
        "updateinvoiceitems": {
            "properties": {
                "lineitem": {
                    "items": {
                        "$ref": "#/definitions/lineitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "exchratedate": {
            "properties": {
                "day": {
                    "type": "string",
                    "x-samplevalue": "01"
                },
                "month": {
                    "type": "string",
                    "x-samplevalue": "09"
                },
                "year": {
                    "type": "string",
                    "x-samplevalue": "2016"
                }
            },
            "title": "exchratedate",
            "type": "object",
            "x-has-customfields": false
        },
        "transactionsEntriesListObject": {
            "properties": {
                "amount": {
                    "format": "int32",
                    "type": "integer"
                },
                "basecurrency": {
                    "type": "string"
                },
                "batchno": {
                    "format": "int32",
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "departmentid": {
                    "format": "int32",
                    "type": "integer"
                },
                "exch_rate_date": {
                    "type": "string"
                },
                "exch_rate_type_id": {
                    "format": "int32",
                    "type": "integer"
                },
                "exchange_rate": {
                    "format": "int32",
                    "type": "integer"
                },
                "glaccountno": {
                    "format": "int32",
                    "type": "integer"
                },
                "journalid": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "locationid": {
                    "format": "int32",
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "trtype": {
                    "type": "string"
                },
                "trx_amount": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "paymentsApply": {
            "properties": {
                "arpaymentkey": {
                    "type": "string"
                },
                "arpaymentid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "batchkey": {
                    "type": "string"
                },
                "paymentdate": {
                    "$ref": "#/definitions/paymentdate"
                },
                "overpaylocid": {
                    "type": "string"
                },
                "memo": {
                    "type": "string"
                },
                "overpaydeptid": {
                    "type": "string"
                },
                "arpaymentitems": {
                    "$ref": "#/definitions/arpaymentitems"
                }
            },
            "required": [
                "paymentdate",
                "arpaymentitems"
            ],
            "type": "object"
        },
        "warehousesListObject": {
            "properties": {
                "contactname": {
                    "type": "string"
                },
                "managerid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentid": {
                    "type": "string"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "status": {
                    "type": "string"
                },
                "usedingl": {
                    "type": "boolean"
                },
                "warehouseid": {
                    "type": "string"
                },
                "warehouseparentid": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "warehouseid"
            ],
            "type": "object"
        },
        "billsCustomfields": {
            "properties": {
                "customfield": {
                    "items": {
                        "$ref": "#/definitions/billsCustomfieldsCustomfield"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "shiptoCN": {
            "properties": {
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "createSalesOrders": {
            "properties": {
                "basecurr": {
                    "type": "string"
                },
                "billto": {
                    "$ref": "#/definitions/billtoCN"
                },
                "currency": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "documentnumber": {
                    "type": "string"
                },
                "exchrate": {
                    "format": "int32",
                    "type": "integer"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "paymentstatus": {
                    "type": "string"
                },
                "shipto": {
                    "$ref": "#/definitions/shiptoCN"
                },
                "sotransactionid": {
                    "format": "int32",
                    "type": "integer"
                },
                "sotransitems": {
                    "$ref": "#/definitions/sotransitems"
                },
                "status": {
                    "type": "string"
                },
                "subtotals": {
                    "$ref": "#/definitions/subtotals"
                },
                "termname": {
                    "type": "string"
                },
                "transactionid": {
                    "type": "string"
                },
                "transactionstate": {
                    "type": "string"
                },
                "transactiontype": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "transactiontype",
                "datecreated",
                "customerid",
                "sotransitems"
            ],
            "x-primary-key": [
                "sotransactionid"
            ],
            "type": "object"
        },
        "appymtdetails": {
            "properties": {
                "appymtdetail": {
                    "$ref": "#/definitions/appymtdetail"
                }
            },
            "type": "object"
        },
        "filesGet": {
            "properties": {
                "attachments": {
                    "$ref": "#/definitions/attachments"
                },
                "createdby": {
                    "type": "string"
                },
                "creationdate": {
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "supdocid": {
                    "format": "int32",
                    "type": "integer"
                },
                "supdocname": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "supdocid"
            ],
            "type": "object"
        },
        "objectsMetadataFields": {
            "properties": {
                "mask": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "vendorDisplayName": {
                    "type": "string"
                },
                "vendorPath": {
                    "type": "string"
                },
                "vendorReadOnly": {
                    "type": "boolean"
                },
                "vendorRequired": {
                    "type": "boolean"
                }
            }
        },
        "vouchers": {
            "properties": {
                "adjustmentno": {
                    "type": "string"
                },
                "apadjustmentid": {
                    "format": "int32",
                    "type": "integer"
                },
                "apadjustmentitems": {
                    "$ref": "#/definitions/apadjustmentitems"
                },
                "basecurr": {
                    "type": "string"
                },
                "batchkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "billno": {
                    "format": "int32",
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datepaid": {
                    "$ref": "#/definitions/datepaid"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "vendorid": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "vendorid",
                "datecreated",
                "apadjustmentitems"
            ],
            "x-primary-key": [
                "apadjustmentid"
            ],
            "type": "object"
        },
        "entities": {
            "properties": {
                "locationid": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "payto": {
            "properties": {
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "expenseResponse": {
            "properties": {
                "amount": {
                    "type": "string",
                    "x-samplevalue": "50"
                },
                "billable": {
                    "type": "string",
                    "x-samplevalue": "true"
                },
                "classid": {
                    "type": "string",
                    "x-samplevalue": "wqfa3dlqdq3qn8tcsor"
                },
                "contractid": {
                    "type": "string",
                    "x-samplevalue": "E444"
                },
                "currency": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "customerid": {
                    "type": "string",
                    "x-samplevalue": "88542"
                },
                "departmentid": {
                    "type": "string",
                    "x-samplevalue": "20"
                },
                "employeeid": {
                    "type": "string",
                    "x-samplevalue": "2"
                },
                "exchrate": {
                    "type": "string",
                    "x-samplevalue": "srtt"
                },
                "exchratedate": {
                    "$ref": "#/definitions/exchratedate"
                },
                "exchratetype": {
                    "type": "string",
                    "x-samplevalue": "Test"
                },
                "expensedate": {
                    "$ref": "#/definitions/expensedate"
                },
                "expenseexchinfo": {
                    "$ref": "#/definitions/expenseexchinfo"
                },
                "expensetype": {
                    "type": "string",
                    "x-samplevalue": "Telephone"
                },
                "exppmttype": {
                    "type": "string",
                    "x-samplevalue": "RRR5"
                },
                "form1099": {
                    "type": "string",
                    "x-samplevalue": "false"
                },
                "form1099box": {
                    "type": "string",
                    "x-samplevalue": "String"
                },
                "form1099type": {
                    "type": "string",
                    "x-samplevalue": "String"
                },
                "glaccountno": {
                    "type": "string",
                    "x-samplevalue": "6470"
                },
                "itemid": {
                    "type": "string",
                    "x-samplevalue": "desk"
                },
                "line_num": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 1
                },
                "locationid": {
                    "type": "string",
                    "x-samplevalue": "100"
                },
                "memo": {
                    "type": "string",
                    "x-samplevalue": "Marriott"
                },
                "nonreimbursable": {
                    "type": "string",
                    "x-samplevalue": "F"
                },
                "paidfor": {
                    "type": "string",
                    "x-samplevalue": "Hotel"
                },
                "projectid": {
                    "type": "string",
                    "x-samplevalue": "520"
                },
                "quantity": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 333.3
                },
                "rate": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 4.4
                },
                "trx_amount": {
                    "type": "string",
                    "x-samplevalue": "12"
                },
                "vendorid": {
                    "type": "string",
                    "x-samplevalue": "APDM0533"
                },
                "warehouseid": {
                    "type": "string",
                    "x-samplevalue": "1"
                }
            },
            "title": "expenseResponse",
            "x-has-customfields": true,
            "type": "object"
        },
        "updatepotransitem": {
            "properties": {
                "billable": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "departmentid": {
                    "type": "string"
                },
                "form1099": {
                    "type": "string"
                },
                "itemid": {
                    "type": "string"
                },
                "line_num": {
                    "type": "string"
                },
                "locationid": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "quantity": {
                    "type": "string"
                },
                "taxable": {
                    "type": "string"
                },
                "unit": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                },
                "warehouseid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "revrecenddate": {
            "properties": {
                "day": {
                    "type": "string"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "datedue": {
            "properties": {
                "day": {
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "format": "int32",
                    "type": "integer"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "mailaddress": {
            "properties": {
                "address1": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "sotransitemCreate": {
            "properties": {
                "currency": {
                    "type": "string"
                },
                "dochdrno": {
                    "format": "int32",
                    "type": "integer"
                },
                "exchrate": {
                    "format": "int32",
                    "type": "integer"
                },
                "itemdesc": {
                    "type": "string"
                },
                "itemid": {
                    "format": "int32",
                    "type": "integer"
                },
                "line_no": {
                    "format": "int32",
                    "type": "integer"
                },
                "price": {
                    "format": "int32",
                    "type": "integer"
                },
                "quantity": {
                    "format": "int32",
                    "type": "integer"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "retailprice": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_price": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_value": {
                    "format": "int32",
                    "type": "integer"
                },
                "unit": {
                    "type": "string"
                }
            },
            "required": [
                "itemid",
                "quantity"
            ],
            "type": "object"
        },
        "sotransitem": {
            "properties": {
                "currency": {
                    "type": "string"
                },
                "dochdrno": {
                    "format": "int32",
                    "type": "integer"
                },
                "docid": {
                    "type": "string"
                },
                "exchrate": {
                    "format": "int32",
                    "type": "integer"
                },
                "itemdesc": {
                    "type": "string"
                },
                "itemid": {
                    "format": "int32",
                    "type": "integer"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "line_no": {
                    "format": "int32",
                    "type": "integer"
                },
                "price": {
                    "format": "int32",
                    "type": "integer"
                },
                "quantity": {
                    "format": "int32",
                    "type": "integer"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "renewalmacro": {
                    "type": "string"
                },
                "retailprice": {
                    "format": "int32",
                    "type": "integer"
                },
                "revrecenddate": {
                    "$ref": "#/definitions/revrecenddate"
                },
                "revrecstartdate": {
                    "$ref": "#/definitions/revrecstartdate"
                },
                "totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_price": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_value": {
                    "format": "int32",
                    "type": "integer"
                },
                "unit": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ITEMS": {
            "properties": {
                "appymtentry": {
                    "$ref": "#/definitions/appymtentry"
                }
            },
            "type": "object"
        },
        "customfields": {
            "properties": {
                "customfield": {
                    "items": {
                        "$ref": "#/definitions/customfield"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "updatesotransitem": {
            "properties": {
                "bundlenumber": {
                    "type": "string"
                },
                "classid": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "departmentid": {
                    "type": "string"
                },
                "discount_memo": {
                    "type": "string"
                },
                "discountpercent": {
                    "type": "string"
                },
                "discsurchargememo": {
                    "type": "string"
                },
                "employeeid": {
                    "type": "string"
                },
                "itemdesc": {
                    "type": "string"
                },
                "itemdetails": {
                    "$ref": "#/definitions/itemdetails"
                },
                "itemid": {
                    "type": "string"
                },
                "line_num": {
                    "type": "string"
                },
                "locationid": {
                    "type": "string"
                },
                "memo": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "projectid": {
                    "type": "string"
                },
                "quantity": {
                    "type": "string"
                },
                "renewalmacro": {
                    "type": "string"
                },
                "revrecenddate": {
                    "$ref": "#/definitions/revrecenddate"
                },
                "revrecstartdate": {
                    "$ref": "#/definitions/revrecstartdate"
                },
                "revrectemplate": {
                    "type": "string"
                },
                "taxable": {
                    "type": "string"
                },
                "unit": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                },
                "warehouseid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "projectUpdate": {
            "properties": {
                "begindate": {
                    "$ref": "#/definitions/begindate"
                },
                "billingpricing": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enddate": {
                    "$ref": "#/definitions/enddate"
                },
                "expensepricing": {
                    "type": "string"
                },
                "expenserate": {
                    "format": "int32",
                    "type": "integer"
                },
                "invoicewithparent": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "poappricing": {
                    "type": "string"
                },
                "poaprate": {
                    "format": "int32",
                    "type": "integer"
                },
                "projectcategory": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userrestrictions": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "projectcategory"
            ],
            "type": "object"
        },
        "expenseexchinfo": {
            "properties": {
                "amount": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 12
                },
                "currency": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "exch_rate_date": {
                    "type": "string",
                    "x-samplevalue": "09/01/2015"
                },
                "exch_rate_type_id": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 1
                },
                "exchange_rate": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 1
                }
            },
            "title": "expenseexchinfo",
            "type": "object",
            "x-has-customfields": false
        },
        "datereceived": {
            "properties": {
                "day": {
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "format": "int32",
                    "type": "integer"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "invoiceCreate": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "basecurr": {
                    "type": "string"
                },
                "batchkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "billto": {
                    "$ref": "#/definitions/billto"
                },
                "currency": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/dateFormat"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateFormat"
                },
                "description": {
                    "type": "string"
                },
                "exchrate": {
                    "format": "int32",
                    "type": "integer"
                },
                "exchratedate": {
                    "$ref": "#/definitions/dateFormat"
                },
                "exchratetype": {
                    "type": "string"
                },
                "invoiceid": {
                    "format": "int32",
                    "type": "integer"
                },
                "invoiceitems": {
                    "$ref": "#/definitions/invoiceitems"
                },
                "invoiceno": {
                    "type": "string"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "ponumber": {
                    "format": "int32",
                    "type": "integer"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalamount": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "trx_totalselected": {
                    "format": "int32",
                    "type": "integer"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "customerid",
                "datecreated",
                "datedue",
                "currency",
                "exchrate",
                "invoiceitems"
            ],
            "x-primary-key": [
                "invoiceid"
            ],
            "type": "object"
        },
        "customerUpdate": {
            "properties": {
                "comments": {
                    "type": "string"
                },
                "contactinfo": {
                    "$ref": "#/definitions/contactinfo"
                },
                "customerid": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "visibility": {
                    "$ref": "#/definitions/visibility"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "createFolder": {
            "properties": {
                "folderDescription": {
                    "type": "string"
                },
                "folderName": {
                    "type": "string"
                },
                "parentFolderName": {
                    "type": "string"
                }
            },
            "required": [
                "folderName"
            ],
            "x-primary-key": [
                "folderName"
            ],
            "x-vendor_objectname": "supdocfolder",
            "type": "object"
        },
        "datepaid": {
            "properties": {
                "day": {
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "shipto": {
            "properties": {
                "contact": {
                    "$ref": "#/definitions/contact"
                },
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "employeeUpdate": {
            "properties": {
                "birthdate": {
                    "$ref": "#/definitions/birthdate"
                },
                "contactlist": {
                    "$ref": "#/definitions/contactlist"
                },
                "currency": {
                    "type": "string"
                },
                "departmentid": {
                    "type": "string"
                },
                "employeetype": {
                    "type": "string"
                },
                "enddate": {
                    "$ref": "#/definitions/enddate"
                },
                "gender": {
                    "type": "string"
                },
                "locationid": {
                    "type": "string"
                },
                "personalinfo": {
                    "$ref": "#/definitions/personalinfo"
                },
                "startdate": {
                    "$ref": "#/definitions/startdate"
                },
                "status": {
                    "type": "string"
                },
                "supervisorid": {
                    "type": "string"
                },
                "terminationtype": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            },
            "required": [
                "birthdate",
                "startdate",
                "enddate",
                "personalinfo"
            ],
            "type": "object"
        },
        "termUpdate": {
            "properties": {
                "artermid": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disccalcon": {
                    "type": "string"
                },
                "due": {
                    "$ref": "#/definitions/due"
                },
                "name": {
                    "type": "string"
                },
                "penalty": {
                    "$ref": "#/definitions/penalty"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "expenseReportCreate": {
            "properties": {
                "basecurr": {
                    "type": "string",
                    "x-samplevalue": "USD"
                },
                "batchkey": {
                    "format": "int64",
                    "type": "integer"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string",
                    "x-samplevalue": "Travel to client"
                },
                "employeeid": {
                    "type": "string",
                    "x-samplevalue": "2"
                },
                "expensereportno": {
                    "type": "string",
                    "x-samplevalue": "New Report"
                },
                "expenses": {
                    "$ref": "#/definitions/expenses"
                },
                "externalid": {
                    "type": "string",
                    "x-samplevalue": "Trav1334"
                },
                "memo": {
                    "type": "string",
                    "x-samplevalue": "Marriott"
                },
                "state": {
                    "type": "string",
                    "x-samplevalue": "Submitted"
                },
                "supdocid": {
                    "type": "string",
                    "x-samplevalue": "101"
                }
            },
            "required": [
                "employeeid",
                "datecreated",
                "expenses"
            ],
            "title": "expenseReportCreate",
            "x-has-customfields": true,
            "x-primary-key": [
                "expensereportno"
            ],
            "x-vendor-objectname": "expensereport",
            "type": "object"
        },
        "complineitems": {
            "properties": {
                "complineitem": {
                    "items": {
                        "$ref": "#/definitions/complineitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "billsPaymentsListObject": {
            "properties": {
                "AUWHENCREATED": {
                    "format": "date-time",
                    "type": "string"
                },
                "BASECURR": {
                    "type": "string"
                },
                "BILLTOPAYTOCONTACTNAME": {
                    "type": "string"
                },
                "BILLTOPAYTOKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "CLEARED": {
                    "type": "string"
                },
                "CREATEDBY": {
                    "format": "int64",
                    "type": "integer"
                },
                "CURRENCY": {
                    "type": "string"
                },
                "DESCRIPTION": {
                    "type": "string"
                },
                "DOCNUMBER": {
                    "format": "int64",
                    "type": "integer"
                },
                "ENTITY": {
                    "type": "string"
                },
                "FINANCIALACCOUNTCURRENCY": {
                    "type": "string"
                },
                "FINANCIALACCOUNTNAME": {
                    "type": "string"
                },
                "FINANCIALENTITY": {
                    "type": "string"
                },
                "FINANCIALENTITYTYPE": {
                    "type": "string"
                },
                "MODIFIEDBY": {
                    "format": "int64",
                    "type": "integer"
                },
                "PAYMENTMETHOD": {
                    "type": "string"
                },
                "PAYMENTMETHODKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "PAYMENTPRIORITY": {
                    "type": "string"
                },
                "PRBATCH": {
                    "type": "string"
                },
                "PRBATCHKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "RAWSTATE": {
                    "type": "string"
                },
                "RECORDNO": {
                    "format": "int64",
                    "type": "integer"
                },
                "RECORDTYPE": {
                    "type": "string"
                },
                "STATE": {
                    "enum": [
                        "C",
                        "D",
                        "A",
                        "V",
                        "S"
                    ],
                    "type": "string"
                },
                "STATUS": {
                    "type": "string"
                },
                "SYSTEMGENERATED": {
                    "type": "string"
                },
                "TOTALDUE": {
                    "format": "int64",
                    "type": "integer"
                },
                "TOTALENTERED": {
                    "format": "int64",
                    "type": "integer"
                },
                "TOTALPAID": {
                    "format": "int64",
                    "type": "integer"
                },
                "TOTALSELECTED": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALDUE": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALENTERED": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALPAID": {
                    "format": "int64",
                    "type": "integer"
                },
                "TRX_TOTALSELECTED": {
                    "format": "int64",
                    "type": "integer"
                },
                "USERKEY": {
                    "format": "int64",
                    "type": "integer"
                },
                "VENDORID": {
                    "type": "string"
                },
                "VENDORNAME": {
                    "type": "string"
                },
                "WHENCREATED": {
                    "format": "date-time",
                    "type": "string"
                },
                "WHENMODIFIED": {
                    "format": "date-time",
                    "type": "string"
                },
                "WHENPAID": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "arpaymentitem": {
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "invoicekey": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "updateFile": {
            "properties": {
                "attachments": {
                    "items": {
                        "$ref": "#/definitions/attachment"
                    },
                    "type": "array"
                },
                "description": {
                    "type": "string"
                },
                "supdocid": {
                    "type": "string",
                    "x-readOnly": true
                },
                "supdocname": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "supdocid"
            ],
            "type": "object"
        },
        "checkingAccounts": {
            "properties": {
                "ABO_EMAIL_ID": {
                    "type": "string",
                    "x-displayName": "ABO email ID",
                    "x-readOnly": false
                },
                "ABO_FIRST_NAME": {
                    "type": "string",
                    "x-displayName": "ABO first name",
                    "x-readOnly": false
                },
                "ABO_LAST_NAME": {
                    "type": "string",
                    "x-displayName": "ABO last name",
                    "x-readOnly": false
                },
                "ABO_MIDDLE_NAME": {
                    "type": "string",
                    "x-displayName": "ABO middle name",
                    "x-readOnly": false
                },
                "ABO_PHONE_NUMBER": {
                    "type": "string",
                    "x-displayName": "ABO phone number",
                    "x-readOnly": false
                },
                "ACHBANKID": {
                    "type": "string",
                    "x-displayName": "ACH bank ID",
                    "x-readOnly": false
                },
                "ACHCOMPANYID": {
                    "type": "string",
                    "x-displayName": "ACH company ID",
                    "x-readOnly": false
                },
                "ACHENABLED": {
                    "type": "boolean",
                    "x-displayName": "Enable ACH",
                    "x-readOnly": false
                },
                "AMEXCHECKNUM": {
                    "type": "string",
                    "x-displayName": "AMEX Check number",
                    "x-readOnly": true
                },
                "AMEX_PAYVE_ACCOUNTID": {
                    "type": "string",
                    "x-displayName": "Subscription account ID",
                    "x-readOnly": true
                },
                "AUTOMATE_ACH_PYMT_CONF": {
                    "type": "boolean",
                    "x-displayName": "Automated ACH payment confirmation",
                    "x-readOnly": false
                },
                "AUTOMATE_ACH_PYMT_SEND": {
                    "type": "boolean",
                    "x-displayName": "Automated sending ACH payment request",
                    "x-readOnly": false
                },
                "AUTOMATE_CHECK_PRINT": {
                    "type": "boolean",
                    "x-displayName": "Automated check printing",
                    "x-readOnly": false
                },
                "AUTOMATE_PYMT_CONF": {
                    "type": "boolean",
                    "x-displayName": "Automated payment confirmation",
                    "x-readOnly": false
                },
                "BANKACCOUNTID": {
                    "type": "string",
                    "x-displayName": "Account ID",
                    "x-readOnly": false
                },
                "BANKACCOUNTNO": {
                    "type": "string",
                    "x-displayName": "Account number",
                    "x-readOnly": false
                },
                "BANKACCOUNTTYPE": {
                    "type": "string",
                    "x-displayName": "Account type",
                    "x-readOnly": false
                },
                "BANKNAME": {
                    "type": "string",
                    "x-displayName": "Bank name",
                    "x-readOnly": false
                },
                "BATCHID": {
                    "type": "string",
                    "x-displayName": "Batch number",
                    "x-readOnly": false
                },
                "BRANCHID": {
                    "type": "string",
                    "x-displayName": "Branch ID",
                    "x-readOnly": false
                },
                "CHECKINFOCONTACT": {
                    "$ref": "#/definitions/CHECKINFOCONTACTDEF"
                },
                "CHECKLAYOUT": {
                    "$ref": "#/definitions/CHECKLAYOUTDEF"
                },
                "COMPANYIDENTIFICATION": {
                    "type": "string",
                    "x-displayName": "Company identification",
                    "x-readOnly": false
                },
                "COMPANYNAME": {
                    "type": "string",
                    "x-displayName": "Company name",
                    "x-readOnly": false
                },
                "CREATEDBY": {
                    "format": "int64",
                    "type": "integer",
                    "x-displayName": "Created by",
                    "x-readOnly": true
                },
                "CURRENCY": {
                    "type": "string",
                    "x-displayName": "Currency",
                    "x-readOnly": false
                },
                "CUTOFFDATE": {
                    "format": "date",
                    "type": "string",
                    "x-displayName": "Cut-off date",
                    "x-readOnly": true
                },
                "DEPARTMENTID": {
                    "type": "string",
                    "x-displayName": "Department ID",
                    "x-readOnly": false
                },
                "DESCRIPTION": {
                    "type": "string",
                    "x-displayName": "Company entry description",
                    "x-readOnly": false
                },
                "DISCRETIONARYDATA": {
                    "type": "string",
                    "x-displayName": "Company discretionary data",
                    "x-readOnly": false
                },
                "DOCNUMBERSEQ": {
                    "type": "string",
                    "x-displayName": "Payment number sequence",
                    "x-readOnly": false
                },
                "FINANCIALDATA": {
                    "$ref": "#/definitions/FINANCIALDATADEF"
                },
                "FINANCIALINSTITUTION": {
                    "type": "string",
                    "x-displayName": "Originating financial institution",
                    "x-readOnly": false
                },
                "FORWFPM": {
                    "type": "boolean",
                    "x-displayName": "Available for payment manager",
                    "x-readOnly": false
                },
                "FRACTIONALROUTINGNO": {
                    "type": "string",
                    "x-displayName": "Fractional routing number*",
                    "x-readOnly": false
                },
                "GLACCOUNTNO": {
                    "type": "string",
                    "x-displayName": "GL account",
                    "x-readOnly": false
                },
                "INTERESTEARNEDACCOUNTLABEL": {
                    "type": "string",
                    "x-displayName": "Interest earned account label",
                    "x-readOnly": false
                },
                "INTERESTEARNEDGLACCOUNT": {
                    "type": "string",
                    "x-displayName": "Interest earned GL account",
                    "x-readOnly": false
                },
                "LASTRECONCILEDBALANCE": {
                    "type": "string",
                    "x-displayName": "Last reconciled balance",
                    "x-readOnly": true
                },
                "LASTRECONCILEDDATE": {
                    "format": "date",
                    "type": "string",
                    "x-displayName": "Last reconciled date",
                    "x-readOnly": true
                },
                "LOCATIONID": {
                    "type": "string",
                    "x-displayName": "Location ID",
                    "x-readOnly": false
                },
                "MAILADDRESS": {
                    "$ref": "#/definitions/MAILADDRESSDEF"
                },
                "MEGAENTITYID": {
                    "type": "string",
                    "x-displayName": "Created at - Entity ID",
                    "x-readOnly": true
                },
                "MEGAENTITYKEY": {
                    "format": "int64",
                    "type": "integer",
                    "x-displayName": "Created at - Entity key",
                    "x-readOnly": true
                },
                "MEGAENTITYNAME": {
                    "type": "string",
                    "x-displayName": "Created at - Entity name",
                    "x-readOnly": true
                },
                "MODIFIEDBY": {
                    "format": "int64",
                    "type": "integer",
                    "x-displayName": "Modified by",
                    "x-readOnly": true
                },
                "NAMEONTHEACCOUNT": {
                    "type": "string",
                    "x-displayName": "Name on the account",
                    "x-readOnly": true
                },
                "NEXTCHECK": {
                    "type": "string",
                    "x-displayName": "Next check #",
                    "x-readOnly": false
                },
                "ORIGINATORSTATUSCODE": {
                    "type": "string",
                    "x-displayName": "Originator status code",
                    "x-readOnly": true
                },
                "OUTSOURCEACH": {
                    "type": "string",
                    "x-displayName": "Enable outsource ach",
                    "x-readOnly": true
                },
                "OUTSOURCECHECK": {
                    "type": "string",
                    "x-displayName": "Enable outsource check",
                    "x-readOnly": true
                },
                "PHONE": {
                    "type": "string",
                    "x-displayName": "Phone number",
                    "x-readOnly": false
                },
                "PMCHECKTEMPLATEID": {
                    "type": "string",
                    "x-displayName": "Payment manager check template ID",
                    "x-readOnly": false
                },
                "PRINTON": {
                    "type": "string",
                    "x-displayName": "Print on",
                    "x-readOnly": false
                },
                "RECORDNO": {
                    "format": "int64",
                    "type": "integer",
                    "x-displayName": "Record number",
                    "x-readOnly": true
                },
                "RECORDTYPECODE": {
                    "type": "string",
                    "x-displayName": "Record type code",
                    "x-readOnly": true
                },
                "RECORD_URL": {
                    "type": "string",
                    "x-displayName": "Record URL",
                    "x-readOnly": true
                },
                "ROUTINGNO": {
                    "type": "string",
                    "x-displayName": "Routing number",
                    "x-readOnly": false
                },
                "SERVICECHARGEACCOUNTLABEL": {
                    "type": "string",
                    "x-displayName": "Service charge account label",
                    "x-readOnly": false
                },
                "SERVICECHARGEGLACCOUNT": {
                    "type": "string",
                    "x-displayName": "Service charge GL account",
                    "x-readOnly": false
                },
                "SERVICECLASSCODE": {
                    "type": "string",
                    "x-displayName": "Service class code",
                    "x-readOnly": false
                },
                "SHARECHECKNO": {
                    "type": "boolean",
                    "x-displayName": "Same as printed check#",
                    "x-readOnly": false
                },
                "STATUS": {
                    "type": "string",
                    "x-displayName": "Status",
                    "x-readOnly": false
                },
                "TRACENUMBERSEQ": {
                    "type": "string",
                    "x-displayName": "Trace number sequence",
                    "x-readOnly": false
                },
                "USERECOMMENDEDSETUP": {
                    "type": "boolean",
                    "x-displayName": "Use recommended setup",
                    "x-readOnly": false
                },
                "USETRACENUMBER": {
                    "type": "string",
                    "x-displayName": "Use trace number",
                    "x-readOnly": false
                },
                "WHENCREATED": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "When created",
                    "x-readOnly": true
                },
                "WHENMODIFIED": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "When modified",
                    "x-readOnly": true
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "RECORDNO"
            ],
            "x-searchable": true,
            "x-vendor-objectname": "CHECKINGACCOUNT",
            "type": "object"
        },
        "billtoCN": {
            "properties": {
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "files": {
            "properties": {
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "objectsMetadata": {
            "properties": {
                "fields": {
                    "items": {
                        "$ref": "#/definitions/objectsMetadataFields"
                    },
                    "type": "array"
                }
            }
        },
        "expenses": {
            "properties": {
                "expense": {
                    "items": {
                        "$ref": "#/definitions/expensePost"
                    },
                    "type": "array"
                }
            },
            "required": [
                "expense"
            ],
            "title": "expenses",
            "type": "object",
            "x-has-customfields": true
        },
        "invoicesUpdate": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "dateposted": {
                    "$ref": "#/definitions/dateposted"
                },
                "description": {
                    "type": "string"
                },
                "exchratedate": {
                    "$ref": "#/definitions/exchratedate"
                },
                "exchratetype": {
                    "type": "string"
                },
                "invoiceno": {
                    "type": "string"
                },
                "ponumber": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "termname": {
                    "type": "string"
                },
                "updateinvoiceitems": {
                    "$ref": "#/definitions/updateinvoiceitems"
                }
            },
            "type": "object"
        },
        "begindate": {
            "properties": {
                "day": {
                    "type": "string"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "updatesotransitems": {
            "properties": {
                "updatesotransitem": {
                    "items": {
                        "$ref": "#/definitions/updatesotransitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "penalty": {
            "properties": {
                "penaltycycle": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "arpaymentitemdetail": {
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "arpaymentitemkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "invoicelineitemkey": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "expenseReportsPatchResp": {
            "properties": {
                "status": {
                    "type": "string"
                }
            },
            "title": "expenseReportsPatchResp",
            "x-has-customfields": false,
            "x-vendor-objectname": "expensereport",
            "type": "object"
        },
        "datemodified": {
            "properties": {
                "day": {
                    "type": "string"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "attachment": {
            "properties": {
                "attachmentdata": {
                    "type": "string"
                },
                "attachmentname": {
                    "type": "string"
                },
                "attachmenttype": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "revrecstartdate": {
            "properties": {
                "day": {
                    "type": "string"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "locationUpdate": {
            "properties": {
                "enddate": {
                    "$ref": "#/definitions/enddate"
                },
                "name": {
                    "type": "string"
                },
                "primary": {
                    "$ref": "#/definitions/primary"
                },
                "shipto": {
                    "$ref": "#/definitions/shipto"
                },
                "startdate": {
                    "$ref": "#/definitions/startdate"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "primary",
                "shipto"
            ],
            "type": "object"
        },
        "itemUpdate": {
            "properties": {
                "computeforshortterm": {
                    "type": "boolean"
                },
                "costmethod": {
                    "type": "string"
                },
                "dropship": {
                    "type": "boolean"
                },
                "enable_bins": {
                    "type": "boolean"
                },
                "glgroupname": {
                    "type": "string"
                },
                "hasstartenddates": {
                    "type": "boolean"
                },
                "itemid": {
                    "format": "int32",
                    "type": "integer"
                },
                "itemname": {
                    "type": "string"
                },
                "itemtype": {
                    "type": "string"
                },
                "mrr": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "productlineid": {
                    "type": "string"
                },
                "purchasingunit": {
                    "type": "string"
                },
                "purchasingunitfactor": {
                    "format": "int32",
                    "type": "integer"
                },
                "recordno": {
                    "format": "int32",
                    "type": "integer"
                },
                "salesunit": {
                    "type": "string"
                },
                "salesunitfactor": {
                    "format": "int32",
                    "type": "integer"
                },
                "standardunit": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taxable": {
                    "type": "boolean"
                },
                "termperiod": {
                    "type": "string"
                },
                "totalperiods": {
                    "format": "int32",
                    "type": "integer"
                },
                "uom": {
                    "type": "string"
                },
                "vsoecategory": {
                    "type": "string"
                },
                "vsoedlvrstatus": {
                    "type": "string"
                },
                "vsoerevdefstatus": {
                    "type": "string"
                },
                "whenlastsold": {
                    "$ref": "#/definitions/whenlastsold"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "itemid"
            ],
            "type": "object"
        },
        "primaryCN": {
            "properties": {
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "paymentsListObject": {
            "properties": {
                "arpaymentitemdetails": {
                    "$ref": "#/definitions/arpaymentitemdetails"
                },
                "arpaymentitems": {
                    "$ref": "#/definitions/arpaymentitems"
                },
                "batchkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "batchtitle": {
                    "type": "string"
                },
                "customerid": {
                    "type": "string"
                },
                "datereceived": {
                    "$ref": "#/definitions/datereceived"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "lineitems": {
                    "$ref": "#/definitions/lineitems"
                },
                "paymentamount": {
                    "format": "double",
                    "type": "number"
                },
                "paymentapplied": {
                    "format": "int32",
                    "type": "integer"
                },
                "paymentmethod": {
                    "type": "string"
                },
                "paymentunapplied": {
                    "format": "double",
                    "type": "number"
                },
                "refid": {
                    "type": "string"
                },
                "undeposited": {
                    "type": "boolean"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "itemexpiration": {
            "properties": {
                "day": {
                    "type": "string"
                },
                "month": {
                    "type": "string"
                },
                "year": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "complineitem": {
            "properties": {
                "componentkey": {
                    "format": "int32",
                    "type": "integer"
                },
                "kcdlvrstatus": {
                    "type": "string"
                },
                "kcrevdefstatus": {
                    "type": "string"
                },
                "quantity": {
                    "format": "int32",
                    "type": "integer"
                },
                "std_uom": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "lineitem": {
            "properties": {
                "accountlabel": {
                    "type": "string"
                },
                "allocationid": {
                    "format": "int32",
                    "type": "integer"
                },
                "amount": {
                    "format": "int32",
                    "type": "integer"
                },
                "billable": {
                    "type": "boolean"
                },
                "classid": {
                    "format": "int32",
                    "type": "integer"
                },
                "contractid": {
                    "format": "int32",
                    "type": "integer"
                },
                "customerid": {
                    "format": "int32",
                    "type": "integer"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "defrevaccount": {
                    "type": "string"
                },
                "departmentid": {
                    "format": "int32",
                    "type": "integer"
                },
                "employeeid": {
                    "format": "int32",
                    "type": "integer"
                },
                "glaccountno": {
                    "format": "int32",
                    "type": "integer"
                },
                "item1099": {
                    "type": "string"
                },
                "itemid": {
                    "format": "int32",
                    "type": "integer"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "locationid": {
                    "format": "int32",
                    "type": "integer"
                },
                "memo": {
                    "type": "string"
                },
                "offsetglaccountno": {
                    "format": "int32",
                    "type": "integer"
                },
                "projectid": {
                    "format": "int32",
                    "type": "integer"
                },
                "revrecenddate": {
                    "$ref": "#/definitions/revrecenddate"
                },
                "revrecstartdate": {
                    "$ref": "#/definitions/revrecstartdate"
                },
                "revrectemplate": {
                    "type": "string"
                },
                "totaldue": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalpaid": {
                    "format": "int32",
                    "type": "integer"
                },
                "vendorid": {
                    "format": "int32",
                    "type": "integer"
                },
                "warehouseid": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "required": [
                "glaccountno",
                "amount"
            ],
            "type": "object"
        },
        "vendlineitem": {
            "properties": {
                "leadtime": {
                    "format": "int32",
                    "type": "integer"
                },
                "stockno": {
                    "format": "int32",
                    "type": "integer"
                },
                "vendorid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MAILADDRESSDEF": {
            "properties": {
                "ADDRESS1": {
                    "type": "string",
                    "x-displayName": "Address 1",
                    "x-readOnly": false
                },
                "ADDRESS2": {
                    "type": "string",
                    "x-displayName": "Address 2",
                    "x-readOnly": false
                },
                "CITY": {
                    "type": "string",
                    "x-displayName": "City/town",
                    "x-readOnly": false
                },
                "COUNTRY": {
                    "type": "string",
                    "x-displayName": "Country",
                    "x-readOnly": false
                },
                "COUNTRYCODE": {
                    "type": "string",
                    "x-displayName": "Company country code",
                    "x-readOnly": false
                },
                "STATE": {
                    "type": "string",
                    "x-displayName": "State/province",
                    "x-readOnly": false
                },
                "ZIP": {
                    "type": "string",
                    "x-displayName": "Zip code",
                    "x-readOnly": false
                }
            },
            "type": "object"
        },
        "contactsListObject": {
            "properties": {
                "cellphone": {
                    "type": "string"
                },
                "companyname": {
                    "type": "string"
                },
                "contactname": {
                    "type": "string"
                },
                "email1": {
                    "type": "string"
                },
                "email2": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "initial": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "mailaddress": {
                    "$ref": "#/definitions/mailaddress"
                },
                "pager": {
                    "type": "string"
                },
                "phone1": {
                    "type": "string"
                },
                "phone2": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "printas": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "url1": {
                    "type": "string"
                },
                "url2": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "contactname"
            ],
            "type": "object"
        },
        "updateFolder": {
            "properties": {
                "folderDescription": {
                    "type": "string"
                },
                "parentFolderName": {
                    "type": "string"
                }
            },
            "required": [
                "folderDescription",
                "parentFolderName"
            ],
            "x-vendor_objectname": "supdocfolder",
            "type": "object"
        },
        "purchaseOrdersListObject": {
            "properties": {
                "basecurr": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "datecreated": {
                    "$ref": "#/definitions/datecreated"
                },
                "datedue": {
                    "$ref": "#/definitions/datedue"
                },
                "exchrate": {
                    "format": "int32",
                    "type": "integer"
                },
                "exchratedate": {
                    "$ref": "#/definitions/exchratedate"
                },
                "key": {
                    "format": "int32",
                    "type": "integer"
                },
                "paymentstatus": {
                    "type": "string"
                },
                "payto": {
                    "$ref": "#/definitions/payto"
                },
                "potransitems": {
                    "$ref": "#/definitions/potransitems"
                },
                "returnto": {
                    "$ref": "#/definitions/returnto"
                },
                "termname": {
                    "type": "string"
                },
                "transactionid": {
                    "type": "string"
                },
                "transactionstate": {
                    "type": "string"
                },
                "transactiontype": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "transactionid"
            ],
            "type": "object"
        },
        "expensesArrResp": {
            "properties": {
                "expense": {
                    "items": {
                        "$ref": "#/definitions/expenseResponse"
                    },
                    "type": "array"
                }
            },
            "title": "expensesArrResp",
            "type": "object",
            "x-has-customfields": false
        },
        "due": {
            "properties": {
                "daysforward": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "billto": {
            "properties": {
                "contact": {
                    "$ref": "#/definitions/contact"
                },
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vendorContactinfo": {
            "properties": {
                "contact": {
                    "$ref": "#/definitions/contact"
                },
                "contactname": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "updatesubtotal": {
            "properties": {
                "absval": {
                    "type": "string"
                },
                "departmentid": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "locationid": {
                    "type": "string"
                },
                "percentval": {
                    "type": "string"
                },
                "total": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "potransitemCreate": {
            "properties": {
                "billable": {
                    "type": "string"
                },
                "customfields": {
                    "$ref": "#/definitions/customfields"
                },
                "departmentid": {
                    "type": "string"
                },
                "form1099": {
                    "type": "string"
                },
                "itemid": {
                    "type": "string"
                },
                "locationid": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "quantity": {
                    "type": "string"
                },
                "taxable": {
                    "type": "string"
                },
                "unit": {
                    "type": "string"
                },
                "vendorid": {
                    "type": "string"
                },
                "warehouseid": {
                    "type": "string"
                }
            },
            "required": [
                "itemid",
                "quantity"
            ],
            "type": "object"
        },
        "locations": {
            "properties": {
                "enddate": {
                    "$ref": "#/definitions/dateFormat"
                },
                "externalid": {
                    "type": "string"
                },
                "locationid": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parentid": {
                    "type": "string"
                },
                "primary": {
                    "$ref": "#/definitions/primaryCN"
                },
                "shipto": {
                    "$ref": "#/definitions/shiptoCN"
                },
                "startdate": {
                    "$ref": "#/definitions/dateFormat"
                },
                "status": {
                    "type": "string"
                },
                "supervisorid": {
                    "type": "string"
                },
                "whenmodified": {
                    "type": "string"
                }
            },
            "required": [
                "locationid",
                "name"
            ],
            "x-primary-key": [
                "locationid"
            ],
            "type": "object"
        },
        "updateapadjustmentitems": {
            "properties": {
                "lineitem": {
                    "items": {
                        "$ref": "#/definitions/lineitem"
                    },
                    "type": "array"
                },
                "updatelineitem": {
                    "items": {
                        "$ref": "#/definitions/updatelineitem"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "foldersFiles": {
            "properties": {
                "status": {
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "swagger": "2.0",
    "info": {
        "contact": {
            "email": "support@cloud-elements.com"
        },
        "title": "intacct",
        "version": "api-v2"
    },
    "tags": [
        {
            "name": "projects"
        },
        {
            "name": "folders"
        },
        {
            "name": "reporting-periods"
        },
        {
            "name": "ping"
        },
        {
            "name": "classes"
        },
        {
            "name": "ledger-accounts"
        },
        {
            "name": "payments"
        },
        {
            "name": "objects"
        },
        {
            "name": "transactions-entries"
        },
        {
            "name": "expense-reports"
        },
        {
            "name": "bills-payments"
        },
        {
            "name": "invoices"
        },
        {
            "name": "terms"
        },
        {
            "name": "bills"
        },
        {
            "name": "departments"
        },
        {
            "name": "customers"
        },
        {
            "name": "vendors"
        },
        {
            "name": "purchase-orders"
        },
        {
            "name": "checking-accounts"
        },
        {
            "name": "warehouses"
        },
        {
            "name": "sales-orders"
        },
        {
            "name": "transactions"
        },
        {
            "name": "vouchers"
        },
        {
            "name": "journals"
        },
        {
            "name": "entities"
        },
        {
            "name": "objectName"
        },
        {
            "name": "locations"
        },
        {
            "name": "employees"
        },
        {
            "name": "bulk"
        },
        {
            "name": "items"
        },
        {
            "name": "contacts"
        }
    ]
}
