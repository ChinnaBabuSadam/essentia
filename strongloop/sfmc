Making a call to https://staging.cloud-elements.com for the salesforcemarketingcloud element
Calling GET https://staging.cloud-elements.com/elements/api-v2/elements/salesforcemarketingcloud
Calling GET https://staging.cloud-elements.com/elements/api-v2/elements/2102/docs
{
    "basePath": "/elements/api-v2/hubs/marketing",
    "paths": {
        "/activities": {
            "post": {
                "summary": "Create an activity (interaction or journey). The 'name' and 'workflowApiVersion' fields are required. More information about creating a \"journey\" can be found at: https://developer.salesforce.com/docs/atlas.en-us.noversion.mc-apis.meta/mc-apis/getting-started-spec.htm",
                "operationId": "createActivity",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/activitiesPOSTResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/activitiesPOST"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The JSON body to create an activity (interaction)",
                        "required": true
                    }
                ],
                "tags": [
                    "activities"
                ]
            },
            "get": {
                "summary": "Search for activities (interactions or journeys)",
                "operationId": "getActivities",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/activitiesListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of results to return on a page. The default and maximum is 50.",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Specify how to order the interactions. Valid ordering columns are: ModifiedDate (default), Name, Performance. Valid values are: DESC, ASC. The default is 'ModifiedDate DESC'.",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression.",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The number of pages to retrieve. The default is 1.",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "nextPage",
                        "description": "The next page cursor, taken from the response header: <i>elements-next-page-token</i>",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "activities"
                ]
            },
            "put": {
                "summary": "Update an activity (interaction)\\n\\n",
                "operationId": "replaceActivities",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/activitiesPUTResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/activitiesPUT"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "JSON Body to update the interaction . In JSON body key is mandatory and modified date must match the current Database value from Marketing Cloud",
                        "required": true
                    }
                ],
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{id}": {
            "get": {
                "summary": "Retrieve an activity (interaction or journey)",
                "operationId": "getActivityById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/activitiesGET"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The ID of the object to retrieve from the Marketing Automation system.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "versionNumber",
                        "description": "Version number of the interaction to retrieve. Default is 1.",
                        "type": "number",
                        "required": false
                    }
                ],
                "tags": [
                    "activities"
                ]
            },
            "delete": {
                "summary": "Delete an activity (interaction or journey)",
                "operationId": "deleteActivityById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The ID of the interaction to delete expressed in the form of a GUID (UUID)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "versionNumber",
                        "description": "Version number of the interaction to delete. If no version is specified, ALL versions associated with the provided ID will be deleted.",
                        "type": "integer",
                        "required": false
                    }
                ],
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{objectName}/events": {
            "get": {
                "summary": "Search for events for activities",
                "operationId": "getActivitiesObjectNameEvents",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/activitiesEventsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "objectName",
                        "description": "The SOAP objectname. Supported objectnames are: ClickEvent, BounceEvent, OpenEvent, UnsubEvent",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 2000",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. The following operators are supported: '=', '!=', '>', '>=', '<', '<='. To search for objects created after 2017-05-13T16:29:05Z, enter  <i> CreatedDate > '1463156945' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "nextPage",
                        "description": "The next page cursor, taken from the response header: <i>elements-next-page-token</i>",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{objectName}/events/{id}": {
            "get": {
                "summary": "Retrieve an event for an activity ",
                "operationId": "getActivitiesObjectNameEventById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/activitiesEvents"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "objectName",
                        "description": "The SOAP objectname, supported objectnames are: ClickEvent, BounceEvent, OpenEvent, UnsubEvent",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The event ID, (ObjectID)",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "activities"
                ]
            }
        },
        "/attribute-sets": {
            "get": {
                "summary": "List all attribute sets",
                "operationId": "getAttributeSets",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/attributeSetsList"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of results to return on a page. The default and maximum is 50.",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The pages to retrieve. The default is 1.",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "nextPage",
                        "description": "The next page cursor, taken from the response header: <i>elements-next-page-token</i>",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "attribute-sets"
                ]
            }
        },
        "/bulk/query": {
            "post": {
                "operationId": "createBulkQuery",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Url to send the notification to when the Job is completed",
                        "in": "header",
                        "name": "Elements-Async-Callback-Url",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
                        "in": "query",
                        "name": "q",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
                        "in": "query",
                        "name": "lastRunDate",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
                        "in": "query",
                        "name": "from",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
                        "in": "query",
                        "name": "to",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "If this id is supplied the previous job will be continued from where it left off and continue to get all records to the time the new job was started. If this value is passed in - the query parameter is ignored",
                        "in": "query",
                        "name": "continueFromJobId",
                        "required": false,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/BulkQuery"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Create an asynchronous bulk query job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/cancel": {
            "put": {
                "operationId": "replaceBulkCancel",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job to cancel.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/BulkStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Cancel an asynchronous bulk query job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/errors": {
            "get": {
                "operationId": "getBulkErrors",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job to retrieve its errors.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The start page for pagination, which defaults to 1 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The Next page to get from set of bulk results",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Retrieve the errors of a bulk job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/status": {
            "get": {
                "operationId": "getBulkStatus",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job to retrieve its status.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/BulkStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve the status of a bulk job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/{objectName}": {
            "get": {
                "operationId": "getBulkByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/csv",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Retrieve the results of an asynchronous bulk query.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{objectName}": {
            "post": {
                "operationId": "createBulkByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Url to send the notification to when the Job is completed",
                        "in": "header",
                        "name": "Elements-Async-Callback-Url",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object for which data needs to be uploaded.",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Optional JSON MetaData that contains path or format, ex: {\"path\" : <path for the sub resource>, \"format\": <json/csv>}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}.",
                        "in": "formData",
                        "name": "metaData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
                        "in": "formData",
                        "name": "file",
                        "type": "file"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Upload a file of objects to be bulk uploaded to the provider.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/campaigns": {
            "post": {
                "summary": "Create a campaign",
                "operationId": "createCampaign",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/campaigns"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/campaignsPOST"
                        },
                        "in": "body",
                        "name": "campaign",
                        "description": "Json body  for creating new campaign.eg JSON {\"name\": \"Annual Sale 2012\",\"description\": \"Yearly sale\",\"campaignCode\": \"annual2012\", \"color\": \"0000ff\",\"favorite\": false }",
                        "required": true
                    }
                ],
                "tags": [
                    "campaigns"
                ]
            },
            "get": {
                "summary": "Get a list of campaigns",
                "operationId": "getCampaigns",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/campaignsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The number of resources to return in a given page",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "The page number of resources to retrieve",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Defines the order of the data (Default value of ModifiedDate DESC). ",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "nextPage",
                        "description": "The next page cursor, taken from the response header: <i>elements-next-page-token</i>",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "campaigns"
                ]
            }
        },
        "/campaigns/{id}": {
            "get": {
                "summary": "Retrieve a campaign ",
                "operationId": "getCampaignById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/campaigns"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The ID of the campaign to retrieve from the Marketing Automation system.",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "campaigns"
                ]
            },
            "delete": {
                "summary": "Delete a campaign",
                "operationId": "deleteCampaignById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The ID of the campaign to delete in the Marketing Automation system.",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "campaigns"
                ]
            }
        },
        "/contacts": {
            "post": {
                "summary": "Creates a contact. A contact object is defined only by a 'key' (usually an email address or phone number) and an ID. Additional information is stored within an 'AttributeSet' or 'AttributeGroup'. Refer to the model for the format, and the '/contacts/attribute-groups' resource for available types.",
                "operationId": "createContact",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/contacts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/contactsPOST"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "Json body to create the new contacts. eg{     \"contactKey\": \"acruz@example.com\",     \"attributeSets\": [{ \"name\": \"MobileConnect Demographics\" ,\"items\": [{\"values\": [{ \"name\": \"Mobile Number\", \"value\": \"317-531-5555\"},{ \"name\": \"Locale\",\"value\": \"US\" },{ \"name\": \"Status\", \"value\": 1}] }] }]}",
                        "required": true
                    }
                ],
                "tags": [
                    "contacts"
                ]
            }
        },
        "/contacts/attribute-groups": {
            "get": {
                "summary": "Retrieve 'attributeGroups' which describe custom data sets for 'contacts'. Can be used to compile additional data when retrieving 'contacts'.",
                "operationId": "getContactsAttributeGroups",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contactsAttributeGroupsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "contacts"
                ]
            }
        },
        "/contacts/{id}": {
            "patch": {
                "summary": "Update a contact. To update the information related to a contact, the request must include an 'attributeSets' field and its appropriate information as well as the data to update. 'AttributeGroup' or 'AttributeSet' information is available via the '/contacts/attribute-groups' resource.",
                "operationId": "updateContactById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/contacts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The whatever ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/contactsPATCH"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The contact json body.",
                        "required": true
                    }
                ],
                "tags": [
                    "contacts"
                ]
            }
        },
        "/data-extensions": {
            "post": {
                "summary": "Create a data extension",
                "operationId": "createDataExtension",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/dataExtensionsResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/postDataExtension"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The data extension body",
                        "required": true
                    }
                ],
                "tags": [
                    "data-extensions"
                ]
            },
            "get": {
                "summary": "Search for data-extensions",
                "operationId": "getDataExtensions",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dataExtensionsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "nextPage",
                        "description": "The next page cursor, taken from the response header: <i>elements-next-page-token</i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. The following operators are supported: '=', '!=', '>', '>=', '<', '<='. To search for objects created after 2017-05-13T16:29:05Z, enter  <i> CreatedDate > '1463156945' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 2000",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "data-extensions"
                ]
            }
        },
        "/data-extensions/{id}": {
            "patch": {
                "summary": "Update a data extension",
                "operationId": "updateDataExtensionById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/dataExtensionsResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The data extension ID, (ObjectID)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/patchDataExtension"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The data extension body",
                        "required": true
                    }
                ],
                "tags": [
                    "data-extensions"
                ]
            },
            "get": {
                "summary": "Retrieve a data-extension",
                "operationId": "getDataExtensionById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/dataExtensions"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The data extension ID (ObjectID)",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "data-extensions"
                ]
            },
            "delete": {
                "summary": "Delete a data extension",
                "operationId": "deleteDataExtensionById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The data extension ID, (ObjectID)",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "data-extensions"
                ]
            }
        },
        "/data-extensions/{id}/rows": {
            "patch": {
                "summary": "Update a row's column by incrementing it for some integer value. This is only available for fields that are set up as a number in Salesforce Marketing Cloud",
                "operationId": "updateDataExtensionsRows",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/dataExtensionsRows"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The data extension ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/columnStepBody"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The row update body",
                        "required": true
                    }
                ],
                "tags": [
                    "data-extensions"
                ]
            },
            "post": {
                "summary": "Create a row for a data extension",
                "operationId": "createDataExtensionRow",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/dataExtensionsRows"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The data extension ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/PostRowBody"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The rows you want to add ",
                        "required": true
                    }
                ],
                "tags": [
                    "data-extensions"
                ]
            },
            "put": {
                "summary": "Updates a data extension row   ",
                "operationId": "replaceDataExtensionsRows",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/dataExtensionsRows"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The data extension ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/DataEventUpdateBody"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The row update body",
                        "required": true
                    }
                ],
                "tags": [
                    "data-extensions"
                ]
            }
        },
        "/lists": {
            "post": {
                "summary": "Create a list",
                "operationId": "createList",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ListPostResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ListPost"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The list body",
                        "required": true
                    }
                ],
                "tags": [
                    "lists"
                ]
            },
            "get": {
                "summary": "Search for lists",
                "operationId": "getLists",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/listsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "nextPage",
                        "description": "The next page cursor, taken from the response header: <i>elements-next-page-token</i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. The following operators are supported: '=', '!=', '>', '>=', '<', '<='. To search for objects created after 2017-05-13T16:29:05Z, enter  <i> CreatedDate > '1463156945' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 2000",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "lists"
                ]
            }
        },
        "/lists/{listId}": {
            "patch": {
                "summary": "Update a list",
                "operationId": "updateListByListId",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ListPatchResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listId",
                        "description": "The list ID, (ID)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ListPatch"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The list body",
                        "required": true
                    }
                ],
                "tags": [
                    "lists"
                ]
            },
            "get": {
                "summary": "Retrieve a list",
                "operationId": "getListByListId",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/lists"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listId",
                        "description": "The list ID (ID)",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "lists"
                ]
            },
            "delete": {
                "summary": "Delete a list",
                "operationId": "deleteListByListId",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listId",
                        "description": "The list ID, (ID)",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "lists"
                ]
            }
        },
        "/lists/{listId}/contacts": {
            "post": {
                "summary": "Create a contact for a list",
                "operationId": "createListContact",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SubscriberResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listId",
                        "description": "The list ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/SubscriberReq"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The contact body",
                        "required": true
                    }
                ],
                "tags": [
                    "lists"
                ]
            },
            "get": {
                "summary": "Search for contacts for a list ",
                "operationId": "getListsContacts",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/listsContactsListObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listId",
                        "description": "The list ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "nextPage",
                        "description": "The next page cursor, taken from the response header: <i>elements-next-page-token</i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "The CEQL search expression. The following operators are supported: '=', '!=', '>', '>=', '<', '<='. To search for objects created after 2017-05-13T16:29:05Z, enter <i> CreatedDate > '1463156945' </i>",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 2000",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "lists"
                ]
            }
        },
        "/lists/{listId}/contacts/{id}": {
            "patch": {
                "summary": "Update a contact for a list",
                "operationId": "updateListsContactById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/patchListContactResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listId",
                        "description": "The list ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The contact ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/patchListContact"
                        },
                        "in": "body",
                        "name": "body",
                        "description": "The contact body",
                        "required": true
                    }
                ],
                "tags": [
                    "lists"
                ]
            },
            "get": {
                "summary": "Retrieve a contact for a list",
                "operationId": "getListsContactById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/listsContacts"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listId",
                        "description": "The list ID (ListID)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The contact ID (ID)",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "lists"
                ]
            },
            "delete": {
                "summary": "Delete a contact from a list",
                "operationId": "deleteListsContactById",
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    }
                },
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "listId",
                        "description": "The list ID (ID)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The contact ID",
                        "type": "string",
                        "required": true
                    }
                ],
                "tags": [
                    "lists"
                ]
            }
        },
        "/objects": {
            "get": {
                "operationId": "getObjects",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Get a list of all the available objects.",
                "tags": [
                    "objects"
                ]
            }
        },
        "/objects/{objectName}/metadata": {
            "get": {
                "operationId": "getObjectsObjectNameMetadata",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/objectsMetadata"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Get a list of all the field for an object.",
                "tags": [
                    "objects"
                ]
            }
        },
        "/ping": {
            "get": {
                "operationId": "getPing",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Pong"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
                "tags": [
                    "ping"
                ]
            }
        },
        "/{objectName}": {
            "get": {
                "operationId": "getByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page number. Defaults to 1 if not provided.",
                        "format": "int64",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Object"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "post": {
                "operationId": "createByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an {objectName}",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{objectId}": {
            "delete": {
                "operationId": "deleteObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "get": {
                "operationId": "getObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json",
                    "application/pdf"
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "patch": {
                "operationId": "updateObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "put": {
                "operationId": "replaceObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {objectName}",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{objectId}/{childObjectName}": {
            "get": {
                "operationId": "getObjectNameByChildObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page number. Defaults to 1 if not provided.",
                        "format": "int64",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Object"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "post": {
                "operationId": "createObjectNameByChildObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
            "delete": {
                "operationId": "deleteObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "get": {
                "operationId": "getObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "patch": {
                "operationId": "updateObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "put": {
                "operationId": "replaceObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            }
        }
    },
    "host": "staging.cloud-elements.com",
    "schemes": [
        "https"
    ],
    "definitions": {
        "Owner": {
            "properties": {
                "Client": {
                    "description": "Specifies the account ownership and context of an object.",
                    "$ref": "#/definitions/ClientID"
                },
                "FromAddress": {
                    "description": "Indicates From address associated with a object. Deprecated for email send definitions and triggered send definitions.",
                    "type": "string"
                },
                "FromName": {
                    "description": "Specifies the default email message From Name. Deprecated for email send definitions and triggered send definitions.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "relationships": {
            "properties": {
                "canModify": {
                    "type": "boolean"
                },
                "canRemove": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "isSystemDefined": {
                    "type": "boolean"
                },
                "leftItem": {
                    "$ref": "#/definitions/leftItem"
                },
                "leftRelationshipIDs": {
                    "items": {
                        "$ref": "#/definitions/leftRelationshipIDs"
                    },
                    "type": "array"
                },
                "leftRelationshipReferenceType": {
                    "type": "string"
                },
                "objectState": {
                    "type": "string"
                },
                "relationshipAttributes": {
                    "items": {
                        "$ref": "#/definitions/relationshipAttributes"
                    },
                    "type": "array"
                },
                "rightItem": {
                    "$ref": "#/definitions/rightItem"
                }
            },
            "type": "object"
        },
        "campaigns": {
            "description": "Retrieves a collection of campaigns.",
            "properties": {
                "campaignCode": {
                    "description": "Unique identifier for the campaign with a maximum length of 36 characters",
                    "type": "string",
                    "x-samplevalue": "testingTheElement"
                },
                "color": {
                    "description": "Hex color value",
                    "type": "string",
                    "x-samplevalue": "ffc7c7"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-25T03:31:36"
                },
                "description": {
                    "description": "Description of the campaign with a maximum length of 512 characters",
                    "type": "string",
                    "x-samplevalue": "Test Element"
                },
                "favorite": {
                    "description": "Determines if the campaign will be flagged as a favorite",
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "id": {
                    "description": "Campaign ID",
                    "type": "string",
                    "x-samplevalue": "3308"
                },
                "modifiedDate": {
                    "description": "",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-25T03:31:36"
                },
                "name": {
                    "description": "Name of the campaign with a maximum length of 128 characters",
                    "type": "string",
                    "x-samplevalue": "testingTheElement"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "id"
            ],
            "x-vendor-objectname": "campaigns",
            "type": "object"
        },
        "campaignsPOST": {
            "description": "Creates a campaign",
            "properties": {
                "campaignCode": {
                    "description": "Unique identifier for the campaign with a maximum length of 36 characters",
                    "type": "string",
                    "x-samplevalue": "testingTheElement"
                },
                "color": {
                    "description": "Hex color value",
                    "type": "string",
                    "x-samplevalue": "ffc7c7"
                },
                "createdDate": {
                    "type": "string",
                    "x-readOnly": true,
                    "x-samplevalue": "2016-10-25T03:31:36"
                },
                "description": {
                    "description": "Description of the campaign with a maximum length of 512 characters",
                    "type": "string",
                    "x-samplevalue": "Test Element"
                },
                "favorite": {
                    "description": "Determines if the campaign will be flagged as a favorite",
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "id": {
                    "description": "Campaign ID",
                    "type": "string",
                    "x-readOnly": true,
                    "x-samplevalue": "3308"
                },
                "modifiedDate": {
                    "type": "string",
                    "x-readOnly": true,
                    "x-samplevalue": "2016-10-25T03:31:36"
                },
                "name": {
                    "description": "Name of the campaign with a maximum length of 128 characters",
                    "type": "string",
                    "x-samplevalue": "testingTheElement"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "id"
            ],
            "x-vendor-objectname": "campaigns",
            "type": "object"
        },
        "outcomes": {
            "description": "This is an array of 'outcome' objects (the following represents a single, generic outcome object).",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "stats": {
            "properties": {
                "cumulativePopulation": {
                    "format": "int64",
                    "type": "integer"
                },
                "currentPopulation": {
                    "format": "int64",
                    "type": "integer"
                },
                "goalPerformance": {
                    "format": "float",
                    "type": "number"
                },
                "metExitCriteria": {
                    "format": "int64",
                    "type": "integer"
                },
                "metGoal": {
                    "format": "int64",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dataExtensionsListObject": {
            "properties": {
                "CategoryID": {
                    "description": "Specifies the identifier of the folder.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "Client": {
                    "description": "Specifies the account ownership and context of an object.",
                    "$ref": "#/definitions/Client"
                },
                "CreatedDate": {
                    "description": "Read-only date and time of the object's creation.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "CustomerKey": {
                    "description": "User-supplied unique identifier for an object within an object type (corresponds to the external key assigned to an object in the user interface).",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ]
                },
                "DataRetentionPeriodUnitOfMeasure": {
                    "description": "Specifies the units of time for which data will be retained. Deprecated. Use DataRetentionPeriodLength and DataRetentionPeriod instead.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "DeleteAtEndOfRetentionPeriod": {
                    "description": "Indicates whether data should be deleted at the end of the retention period.",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "Description": {
                    "description": "Describes and provides information regarding the object.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "IsPlatformObject": {
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "IsSendable": {
                    "description": "Indicates whether you can use a data extension as part of an audience for a message send.",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "IsTestable": {
                    "description": "Indicates whether a sendable data extension can be used within tests sends for a message.",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "ModifiedDate": {
                    "description": "Indicates the last time object information was modified.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "Name": {
                    "description": "Name of the object or property.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "ObjectID": {
                    "description": "System-controlled, read-only text string identifier for object.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "ResetRetentionPeriodOnImport": {
                    "description": "Indicates whether a data retention period should be reset after a successful import of new data. A value of true indicates that the data retention period resets to the beginning upon completion of a successful data import. A value of false indicates the data retention period continues from the original starting point.",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "RowBasedRetention": {
                    "description": "Indicates whether the data retention policy removes data by row or by entire data extension. A value of true indicates all records within a data extension are removed at the same time. A value of false indicates that the application can remove individual rows within a data extension.",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "SendableDataExtensionField": {
                    "description": "Indicates the field within a sendable data extension to use as an address as part of a send. Possible values include SubscriberID, CustomerKey, or EmailAddress. The application uses this field to establish a data relationship between a value specified by theSendableSubscriberFieldproperty and a value within a sendable data extension.",
                    "$ref": "#/definitions/SendableDataExtensionField"
                },
                "SendableSubscriberField": {
                    "description": "Indicates field to use as sending address. The application uses this field to establish a data relationship between a subscriber field and a value specified by the SendableDataExtentionField property.",
                    "$ref": "#/definitions/SendableSubscriberField"
                },
                "Status": {
                    "description": "Defines status of object. Status of an address.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "Template": {
                    "description": "Indicates template used to create a data extension.",
                    "$ref": "#/definitions/Template"
                }
            },
            "x-primary-key": [
                "ObjectID"
            ],
            "x-searchable": true,
            "x-vendor-objectname": "DataExtension",
            "type": "object"
        },
        "goals": {
            "description": "The goal for this particular journey. Expressed as an object of type ContactDecision from the Journey Spec.",
            "properties": {
                "description": {
                    "description": "The description for this goal, will be displayed in the Journey Builder user interface.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "description": "The customer key for this goal.",
                    "type": "string"
                },
                "name": {
                    "description": "The display name for this goal",
                    "type": "string"
                },
                "type": {
                    "description": "The type of goal this is (only option currently is ContactEvent)",
                    "type": "string"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "key"
            ],
            "type": "object"
        },
        "triggers": {
            "description": "The trigger for this particular journey. Expressed as an object of type ContactEvent from the Journey Spec",
            "properties": {
                "description": {
                    "type": "string"
                },
                "eventDefinitionKey": {
                    "description": "This is the key used to filter appropriate events into filter for evaluation on entry into the journey. Do not include a period in the event definition key.",
                    "type": "string"
                },
                "key": {
                    "description": "The MID-unique key used to identify this entry Event",
                    "type": "string"
                },
                "name": {
                    "description": "The display name for this Entry Event which will be shown in the Journey Builder UI",
                    "type": "string"
                },
                "type": {
                    "description": "The type of Entry Event this is (only value currently supported is event)",
                    "type": "string"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "key"
            ],
            "x-vendor-objectname": "events",
            "type": "object"
        },
        "SendableDataExtensionField": {
            "properties": {
                "Name": {
                    "enum": [
                        "SubscriberID",
                        "EmailAddress",
                        "CustomerKey"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EmailAddress": {
            "properties": {
                "Type": {
                    "enum": [
                        "Text",
                        "HTML"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "tags": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "tag"
                    ]
                },
                "objectCount": {
                    "format": "int64",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "contactsAttributeGroupsListObject": {
            "description": "Retrieves all attribute groups associated with a specified contact data schema.",
            "properties": {
                "applicationID": {
                    "type": "string",
                    "x-readOnly ": "true",
                    "x-samplevalue": "ce703ed3-e01f-4f5f-900d-76a95b363e29"
                },
                "applicationKey": {
                    "type": "string",
                    "x-readOnly ": "true",
                    "x-samplevalue": "com.exacttarget.contacts"
                },
                "attributeGroupIconKey": {
                    "type": "string",
                    "x-samplevalue": "People"
                },
                "attributeGroupType": {
                    "type": "string",
                    "x-samplevalue": "Standard"
                },
                "canAddRelationships": {
                    "type": "boolean",
                    "x-readOnly ": "true",
                    "x-samplevalue": true
                },
                "canModify": {
                    "type": "boolean",
                    "x-readOnly ": "true",
                    "x-samplevalue": true
                },
                "canRemove": {
                    "type": "boolean",
                    "x-readOnly ": "true",
                    "x-samplevalue": true
                },
                "description": {
                    "type": "string",
                    "x-samplevalue": "This is John's Event."
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "x-samplevalue": "John Event."
                },
                "id": {
                    "description": "The ID of the attribute group expressed in the form of a GUID (UUID). Required if not using key or name.",
                    "type": "string",
                    "x-samplevalue": "061bd330-2f79-e611-a06b-38eaa7142c91",
                    "x-sub-format": "UUID"
                },
                "isPopulationType": {
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "isSystemDefined": {
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "key": {
                    "description": "Key of the attribute group. Prefix the parameter with key:. For example, /attributeGroups/key:{key}. Required if not using ID or name.",
                    "type": "string",
                    "x-samplevalue": "johnevent"
                },
                "links": {
                    "$ref": "#/definitions/links"
                },
                "name": {
                    "description": "Name of the attribute group. Prefix the parameter with name:. For example, /attributeGroups/name:{name}. Required if not using ID or key.",
                    "type": "string",
                    "x-samplevalue": "dummy"
                },
                "objectState": {
                    "type": "string",
                    "x-samplevalue": "Created"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "id"
            ],
            "x-vendor-objectname": "attributeGroups",
            "type": "object"
        },
        "defaults": {
            "description": "This object contains an ordered list of email expressions used to determine which email address to use as the default, starting with the first expression.",
            "properties": {
                "email": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "attributeSetsList": {
            "properties": {
                "applicationID": {
                    "type": "string"
                },
                "applicationKey": {
                    "type": "string"
                },
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/attributes"
                    },
                    "type": "array"
                },
                "canAddValues": {
                    "type": "boolean"
                },
                "canModify": {
                    "type": "boolean"
                },
                "canRemove": {
                    "type": "boolean"
                },
                "fullyQualifiedName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isEvent": {
                    "type": "boolean"
                },
                "isReadOnly": {
                    "type": "boolean"
                },
                "isRoot": {
                    "type": "boolean"
                },
                "isSendable": {
                    "type": "boolean"
                },
                "isSystemDefined": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "$ref": "#/definitions/name"
                },
                "objectState": {
                    "type": "string"
                },
                "relationships": {
                    "items": {
                        "$ref": "#/definitions/relationships"
                    },
                    "type": "array"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "id"
            ],
            "x-vendor-objectname": "attributeSets",
            "type": "object"
        },
        "leftConnectingID": {
            "properties": {
                "identifierType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dataExtensions": {
            "properties": {
                "CategoryID": {
                    "description": "Specifies the identifier of the folder.",
                    "format": "int32",
                    "type": "integer"
                },
                "Client": {
                    "description": "Specifies the account ownership and context of an object.",
                    "$ref": "#/definitions/dtClient"
                },
                "CreatedDate": {
                    "description": "Read-only date and time of the object's creation.",
                    "type": "string"
                },
                "CustomerKey": {
                    "description": "User-supplied unique identifier for an object within an object type (corresponds to the external key assigned to an object in the user interface).",
                    "type": "string"
                },
                "DataRetentionPeriodUnitOfMeasure": {
                    "description": "Specifies the units of time for which data will be retained. Deprecated. Use DataRetentionPeriodLength and DataRetentionPeriod instead.",
                    "format": "int32",
                    "type": "integer"
                },
                "DeleteAtEndOfRetentionPeriod": {
                    "description": "Indicates whether data should be deleted at the end of the retention period.",
                    "type": "boolean"
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "IsSendable": {
                    "description": "Indicates whether you can use a data extension as part of an audience for a message send.",
                    "type": "boolean"
                },
                "IsTestable": {
                    "description": "Indicates whether a sendable data extension can be used within tests sends for a message.",
                    "type": "boolean"
                },
                "ModifiedDate": {
                    "description": "Indicates the last time object information was modified.",
                    "type": "string"
                },
                "Name": {
                    "description": "Name of the object or property.",
                    "type": "string"
                },
                "ObjectID": {
                    "description": "System-controlled, read-only text string identifier for object.",
                    "type": "string"
                },
                "ResetRetentionPeriodOnImport": {
                    "description": "Indicates whether a data retention period should be reset after a successful import of new data. A value of true indicates that the data retention period resets to the beginning upon completion of a successful data import. A value of false indicates the data retention period continues from the original starting point.",
                    "type": "boolean"
                },
                "RowBasedRetention": {
                    "description": "Indicates whether the data retention policy removes data by row or by entire data extension. A value of true indicates all records within a data extension are removed at the same time. A value of false indicates that the application can remove individual rows within a data extension.",
                    "type": "boolean"
                },
                "Status": {
                    "description": "Defines status of object. Status of an address.",
                    "type": "string"
                }
            },
            "x-primary-key": [
                "ObjectID"
            ],
            "x-vendor-objectname": "DataExtension",
            "type": "object"
        },
        "activitiesPOSTResponse": {
            "description": " (sometimes called interaction) The core object, without this object you are unable to create any other properties of a journey using the spec.",
            "properties": {
                "activities": {
                    "items": {
                        "$ref": "#/definitions/Activities"
                    },
                    "type": "array"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "defaults": {
                    "$ref": "#/definitions/defaults"
                },
                "definitionId": {
                    "type": "string",
                    "x-readOnly": true
                },
                "description": {
                    "description": " A description of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "entryMode": {
                    "enum": [
                        "NotSet",
                        "SingleEntryAcrossAllVersions",
                        "MultipleEntries"
                    ],
                    "type": "string"
                },
                "executionMode": {
                    "enum": [
                        "Production",
                        "Test"
                    ],
                    "type": "string",
                    "x-readOnly": true
                },
                "exits": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "goals": {
                    "items": {
                        "$ref": "#/definitions/goals"
                    },
                    "type": "array"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "description": "The customer key as a GUID (UUID) to be used while referencing this journey",
                    "type": "string",
                    "x-sub-format": "UUID"
                },
                "lastPublishedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "modifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "name": {
                    "description": "The name of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "status": {
                    "enum": [
                        "Draft",
                        "Published",
                        "ScheduledToPublish",
                        "Stopped",
                        "Unpublished",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "triggers": {
                    "items": {
                        "$ref": "#/definitions/triggers"
                    },
                    "type": "array",
                    "x-reference-objectname": "events"
                },
                "version": {
                    "format": "double",
                    "type": "number",
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-names": [
                        "versionNumber",
                        "specificApiVersionNumber"
                    ]
                },
                "workflowApiVersion": {
                    "description": "The Journey Spec version to use for this journey. Possible values: 0.5, 1.0.",
                    "format": "float",
                    "type": "number"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "key"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "x-vendor-objectname": "journey",
            "x-where": [
                "mostRecentVersionOnly",
                "extras",
                "orderBy"
            ],
            "type": "object"
        },
        "activitiesPOST": {
            "description": " (sometimes called interaction) The core object, without this object you are unable to create any other properties of a journey using the spec.",
            "properties": {
                "activities": {
                    "items": {
                        "$ref": "#/definitions/Activities"
                    },
                    "type": "array"
                },
                "defaults": {
                    "$ref": "#/definitions/defaults"
                },
                "description": {
                    "description": " A description of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "entryMode": {
                    "enum": [
                        "NotSet",
                        "SingleEntryAcrossAllVersions",
                        "MultipleEntries"
                    ],
                    "type": "string"
                },
                "goals": {
                    "items": {
                        "$ref": "#/definitions/goals"
                    },
                    "type": "array"
                },
                "key": {
                    "description": "The customer key as a GUID (UUID) to be used while referencing this journey",
                    "type": "string",
                    "x-sub-format": "UUID"
                },
                "name": {
                    "description": "The name of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "triggers": {
                    "items": {
                        "$ref": "#/definitions/triggers"
                    },
                    "type": "array",
                    "x-reference-objectname": "events"
                },
                "workflowApiVersion": {
                    "description": "The Journey Spec version to use for this journey. Possible values: 0.5, 1.0.",
                    "format": "float",
                    "type": "number"
                }
            },
            "required": [
                "workflowApiVersion",
                "name",
                "key"
            ],
            "x-has-customfields": true,
            "x-primary-key": [
                "key"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "x-vendor-objectname": "journey",
            "x-where": [
                "mostRecentVersionOnly",
                "extras",
                "orderBy"
            ],
            "type": "object"
        },
        "Object": {
            "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
            "properties": {
                "objectField": {
                    "type": "string"
                }
            }
        },
        "activitiesPUTResponse": {
            "description": " (sometimes called interaction) The core object, without this object you are unable to create any other properties of a journey using the spec.",
            "properties": {
                "activities": {
                    "items": {
                        "$ref": "#/definitions/Activities"
                    },
                    "type": "array"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "defaults": {
                    "$ref": "#/definitions/defaults"
                },
                "definitionId": {
                    "type": "string",
                    "x-readOnly": true
                },
                "description": {
                    "description": " A description of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "entryMode": {
                    "enum": [
                        "NotSet",
                        "SingleEntryAcrossAllVersions",
                        "MultipleEntries"
                    ],
                    "type": "string"
                },
                "executionMode": {
                    "enum": [
                        "Production",
                        "Test"
                    ],
                    "type": "string",
                    "x-readOnly": true
                },
                "exits": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "goals": {
                    "items": {
                        "$ref": "#/definitions/goals"
                    },
                    "type": "array"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "description": "The customer key as a GUID (UUID) to be used while referencing this journey",
                    "type": "string",
                    "x-sub-format": "UUID"
                },
                "lastPublishedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "modifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "name": {
                    "description": "The name of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "status": {
                    "enum": [
                        "Draft",
                        "Published",
                        "ScheduledToPublish",
                        "Stopped",
                        "Unpublished",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "triggers": {
                    "items": {
                        "$ref": "#/definitions/triggers"
                    },
                    "type": "array",
                    "x-reference-objectname": "events"
                },
                "version": {
                    "format": "double",
                    "type": "number",
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-names": [
                        "versionNumber",
                        "specificApiVersionNumber"
                    ]
                },
                "workflowApiVersion": {
                    "description": "The Journey Spec version to use for this journey. Possible values: 0.5, 1.0.",
                    "format": "float",
                    "type": "number"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "key"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "x-vendor-objectname": "journey",
            "x-where": [
                "mostRecentVersionOnly",
                "extras",
                "orderBy"
            ],
            "type": "object"
        },
        "rightItem": {
            "properties": {
                "cardinality": {
                    "type": "string"
                },
                "connectingID": {
                    "$ref": "#/definitions/rightItemConnectingID"
                },
                "identifier": {
                    "type": "string"
                },
                "objectState": {
                    "type": "string"
                },
                "relationshipType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "items": {
            "properties": {
                "values": {
                    "items": {
                        "$ref": "#/definitions/attributeSetValues"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "patchListContact": {
            "properties": {
                "Addresses": {
                    "items": {
                        "$ref": "#/definitions/SubscriberAddress"
                    },
                    "type": "array"
                },
                "Attributes": {
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    },
                    "type": "array"
                },
                "Client": {
                    "$ref": "#/definitions/ClientIDSub"
                },
                "CorrelationID": {
                    "type": "string"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "type": "string"
                },
                "EmailAddress": {
                    "x-length": 254,
                    "type": "string"
                },
                "EmailTypePreference": {
                    "enum": [
                        "Text",
                        "HTML"
                    ],
                    "type": "string"
                },
                "GlobalUnsubscribeCategory": {
                    "$ref": "#/definitions/GlobalUnsubscribeCategory"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "Locale": {
                    "$ref": "#/definitions/Locale"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "type": "string"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "PartnerProperties": {
                    "items": {
                        "$ref": "#/definitions/APIProperty"
                    },
                    "type": "array"
                },
                "PartnerType": {
                    "type": "string"
                },
                "PrimaryEmailAddress": {
                    "$ref": "#/definitions/EmailAddress"
                },
                "PrimarySMSAddress": {
                    "$ref": "#/definitions/SMSAddress"
                },
                "PrimarySMSPublicationStatus": {
                    "enum": [
                        "OptedIn",
                        "OptedOut",
                        "InActive"
                    ],
                    "type": "string"
                },
                "Status": {
                    "enum": [
                        "Active",
                        "Bounced",
                        "Held",
                        "Unsubscribed",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "SubscriberKey": {
                    "x-length": 254,
                    "type": "string"
                },
                "SubscriberTypeDefinition": {
                    "$ref": "#/definitions/SubscriberTypeDefinition"
                },
                "UnsubscribedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "Subscriber",
            "type": "object"
        },
        "Pong": {
            "properties": {
                "dateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                }
            }
        },
        "schema": {
            "properties": {
                "href": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "activitiesEventsListObject": {
            "properties": {
                "BatchID": {
                    "description": "Ties triggered send sent events to other events (like clicks and opens that occur at a later date and time)",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "BounceCategory": {
                    "description": "Defines category for bounce associated with a bounced email.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "BounceType": {
                    "description": "Defines type of bounce associated with a bounced email.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "Client": {
                    "description": "Specifies the account ownership and context of an object.",
                    "$ref": "#/definitions/Client"
                },
                "CreatedDate": {
                    "description": "Read-only date and time of the object's creation.",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "EventDate": {
                    "description": "Date when a tracking event occurred.",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "EventType": {
                    "description": "The type of tracking event",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "ID": {
                    "description": "Read-only identifier for an object. Some objects use the ObjectID property as the Marketing Cloud unique ID.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "ModifiedDate": {
                    "description": "Indicates the last time object information was modified.",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "ObjectID": {
                    "description": "System-controlled, read-only text string identifier for object.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "SMTPCode": {
                    "description": "Contains SMTP code related to a bounced email.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "SMTPReason": {
                    "description": "Contains SMTP reason associated with a bounced email.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "SendID": {
                    "description": "Contains identifier for a specific send.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "SubscriberKey": {
                    "description": "Identification of a specific subscriber.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "URL": {
                    "description": "Indicates URL included in an event or configuration.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "URLID": {
                    "description": "Indicates URL ID associated with a click tracking event.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                }
            },
            "x-primary-key": [
                "ObjectID"
            ],
            "x-searchable": true,
            "type": "object"
        },
        "Attribute": {
            "properties": {
                "Compression": {
                    "$ref": "#/definitions/CompressionConfiguration"
                },
                "Name": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "contactsPOST": {
            "description": "Creates a new contact with the specified information in the specified attribute groups.",
            "properties": {
                "attributeSets": {
                    "description": "Array of information used to create a new contact",
                    "items": {
                        "$ref": "#/definitions/attributeSets"
                    },
                    "type": "array",
                    "x-reference-objectname": "attributeSets"
                },
                "contactID": {
                    "description": "Unique ID for the contact. You must provide either a value for contactKey or contactID",
                    "format": "int64",
                    "type": "integer",
                    "x-conditional-required": " You must provide either a value for contactKey or contactID.",
                    "x-samplevalue": 38886753,
                    "x-sub-format": "UUID"
                },
                "contactKey": {
                    "description": "Primary address for the contact. You must provide either a value for contactKey or contactID.",
                    "type": "string",
                    "x-conditional-required": " You must provide either a value for contactKey or contactID.",
                    "x-samplevalue": "6dcb271e-06db-4100-bebb-b141469cd4d1"
                }
            },
            "required": [
                "attributeSets"
            ],
            "x-has-customfields": true,
            "x-primary-key": [
                "contactID"
            ],
            "x-searchable": false,
            "x-vendor-objectname": "contacts",
            "type": "object"
        },
        "BulkQuery": {
            "description": "BulkLoad response of bulk download.",
            "properties": {
                "id": {
                    "description": "Id of the bulk job",
                    "type": "number"
                },
                "status": {
                    "description": "Status of the bulk job",
                    "type": "string"
                }
            }
        },
        "GlobalUnsubscribeCategory": {
            "properties": {
                "IgnorableByPartners": {
                    "type": "boolean"
                },
                "Ignore": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "connectingID": {
            "properties": {
                "identifierType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SMSAddress": {
            "properties": {
                "Carrier": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "activitiesListObject": {
            "description": " (sometimes called interaction) The core object, without this object you are unable to create any other properties of a journey using the spec.",
            "properties": {
                "activities": {
                    "items": {
                        "$ref": "#/definitions/Activities"
                    },
                    "type": "array"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "defaults": {
                    "$ref": "#/definitions/defaults"
                },
                "definitionId": {
                    "type": "string",
                    "x-readOnly": true
                },
                "description": {
                    "description": " A description of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "entryMode": {
                    "enum": [
                        "NotSet",
                        "SingleEntryAcrossAllVersions",
                        "MultipleEntries"
                    ],
                    "type": "string"
                },
                "executionMode": {
                    "enum": [
                        "Production",
                        "Test"
                    ],
                    "type": "string",
                    "x-readOnly": true
                },
                "exits": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "goals": {
                    "items": {
                        "$ref": "#/definitions/goals"
                    },
                    "type": "array"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "description": "The customer key as a GUID (UUID) to be used while referencing this journey",
                    "type": "string",
                    "x-sub-format": "UUID"
                },
                "lastPublishedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "modifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "name": {
                    "description": "The name of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "stats": {
                    "$ref": "#/definitions/stats"
                },
                "status": {
                    "enum": [
                        "Draft",
                        "Published",
                        "ScheduledToPublish",
                        "Stopped",
                        "Unpublished",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "tags": {
                    "items": {
                        "$ref": "#/definitions/tags"
                    },
                    "type": "array"
                },
                "triggers": {
                    "items": {
                        "$ref": "#/definitions/retrieveTriggers"
                    },
                    "type": "array",
                    "x-reference-objectname": "events"
                },
                "version": {
                    "format": "double",
                    "type": "number",
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-names": [
                        "versionNumber",
                        "specificApiVersionNumber"
                    ]
                },
                "workflowApiVersion": {
                    "description": "The Journey Spec version to use for this journey. Possible values: 0.5, 1.0.",
                    "format": "float",
                    "type": "number"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "key"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "x-vendor-objectname": "journey",
            "type": "object"
        },
        "PostRowBody": {
            "properties": {
                "keys": {
                    "description": "Defines the primary key(s) for each row",
                    "$ref": "#/definitions/rowsKeys"
                },
                "values": {
                    "description": "Defines the values for each row",
                    "$ref": "#/definitions/rowsValues"
                }
            },
            "required": [
                "keys",
                "values"
            ],
            "type": "object"
        },
        "listsContactsListObject": {
            "properties": {
                "Client": {
                    "$ref": "#/definitions/Client"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "ListID": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "PartnerProperties": {
                    "$ref": "#/definitions/PartnerProperties"
                },
                "Status": {
                    "enum": [
                        "Active",
                        "Bounced",
                        "Held",
                        "Unsubscribed",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "SubscriberKey": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "ListSubscriber",
            "type": "object"
        },
        "relationshipAttributes": {
            "properties": {
                "leftAttributeID": {
                    "type": "string"
                },
                "leftConnectingID": {
                    "$ref": "#/definitions/leftConnectingID"
                },
                "objectState": {
                    "type": "string"
                },
                "rightAttributeID": {
                    "type": "string"
                },
                "rightConnectingID": {
                    "$ref": "#/definitions/rightConnectingID"
                }
            },
            "type": "object"
        },
        "ClientIDLContacts": {
            "properties": {
                "ClientID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "CreatedBy": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "CustomerID": {
                    "type": "string"
                },
                "CustomerKey": {
                    "type": "string"
                },
                "EnterpriseID": {
                    "format": "int64",
                    "type": "integer"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "ModifiedBy": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "PartnerClientKey": {
                    "type": "string"
                },
                "PartnerUserKey": {
                    "type": "string"
                },
                "UserID": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dataExtensionsResp": {
            "properties": {
                "CategoryID": {
                    "description": "Specifies the identifier of the folder.",
                    "format": "int64",
                    "type": "integer"
                },
                "Client": {
                    "description": "Specifies the account ownership and context of an object.",
                    "$ref": "#/definitions/ClientID"
                },
                "CorrelationID": {
                    "description": "Identifies correlation of objects across several requests.",
                    "type": "string"
                },
                "CreatedDate": {
                    "description": "Read-only date and time of the object's creation.",
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "description": "User-supplied unique identifier for an object within an object type (corresponds to the external key assigned to an object in the user interface).",
                    "x-length": 200,
                    "type": "string"
                },
                "DataRetentionPeriod": {
                    "description": "Specifies the period during which the application retains the data within a data extension.",
                    "enum": [
                        "Days",
                        "Weeks",
                        "Months",
                        "Years"
                    ],
                    "type": "string"
                },
                "DataRetentionPeriodLength": {
                    "description": "Specifies the number of time units for which data will be retained (used with DataRetentionPeriodUnitOfMeasure to specify the full data retention time).",
                    "format": "int32",
                    "type": "integer"
                },
                "DataRetentionPeriodUnitOfMeasure": {
                    "description": "Specifies the units of time for which data will be retained. Deprecated. Use DataRetentionPeriodLength and DataRetentionPeriod instead.",
                    "format": "int32",
                    "type": "integer"
                },
                "DeleteAtEndOfRetentionPeriod": {
                    "description": "Indicates whether data should be deleted at the end of the retention period.",
                    "type": "boolean"
                },
                "Description": {
                    "description": "Describes and provides information regarding the object.",
                    "x-length": 2147483647,
                    "type": "string"
                },
                "Fields": {
                    "description": "Specifies fields contained within a data extension.",
                    "items": {
                        "$ref": "#/definitions/DataExtensionField"
                    },
                    "type": "array"
                },
                "ID": {
                    "description": "Read-only identifier for an object. Some objects use the ObjectID property as the Marketing Cloud unique ID.",
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "IsSendable": {
                    "description": "Indicates whether you can use a data extension as part of an audience for a message send.",
                    "type": "boolean"
                },
                "IsTestable": {
                    "description": "Indicates whether a sendable data extension can be used within tests sends for a message.",
                    "type": "boolean"
                },
                "ModifiedDate": {
                    "description": "Indicates the last time object information was modified.",
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "Name": {
                    "description": "Name of the object or property.",
                    "x-length": 128,
                    "type": "string"
                },
                "ObjectID": {
                    "description": "System-controlled, read-only text string identifier for object.",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "description": "Reserved for future use.",
                    "type": "string"
                },
                "Owner": {
                    "description": "Describes account ownership of subscriber in an on-your-behalf account.",
                    "$ref": "#/definitions/Owner"
                },
                "PartnerKey": {
                    "description": "Unique identifier provided by partner for an object, accessible only via API.",
                    "x-length": 64,
                    "type": "string"
                },
                "PartnerProperties": {
                    "description": "A collection of metadata supplied by client and stored by system - only accessible via API.",
                    "items": {
                        "$ref": "#/definitions/APIProperty"
                    },
                    "type": "array"
                },
                "ResetRetentionPeriodOnImport": {
                    "description": "Indicates whether a data retention period should be reset after a successful import of new data. A value of true indicates that the data retention period resets to the beginning upon completion of a successful data import. A value of false indicates the data retention period continues from the original starting point.",
                    "type": "boolean"
                },
                "RetainUntil": {
                    "description": "Indicates the date that ends the retention period for a data extension. Make sure that the value passed to this property is correctly formatted based on the Date Format setting of the API user. Failure to do so may result in an error.",
                    "type": "string",
                    "x-sub-format": "date"
                },
                "RowBasedRetention": {
                    "description": "Indicates whether the data retention policy removes data by row or by entire data extension. A value of true indicates all records within a data extension are removed at the same time. A value of false indicates that the application can remove individual rows within a data extension.",
                    "type": "boolean"
                },
                "SendableDataExtensionField": {
                    "description": "Indicates the field within a sendable data extension to use as an address as part of a send. Possible values include SubscriberID, CustomerKey, or EmailAddress. The application uses this field to establish a data relationship between a value specified by theSendableSubscriberFieldproperty and a value within a sendable data extension.",
                    "$ref": "#/definitions/DataExtensionField"
                },
                "SendableSubscriberField": {
                    "description": "Indicates field to use as sending address. The application uses this field to establish a data relationship between a subscriber field and a value specified by the SendableDataExtentionField property.",
                    "$ref": "#/definitions/Attribute"
                },
                "Status": {
                    "description": "Defines status of object. Status of an address.",
                    "x-length": 200,
                    "type": "string"
                },
                "Template": {
                    "description": "Indicates template used to create a data extension.",
                    "$ref": "#/definitions/DataExtensionTemplate"
                }
            },
            "x-primary-key": [
                "ObjectID"
            ],
            "x-vendor-objectname": "DataExtension",
            "type": "object"
        },
        "BulkStatus": {
            "description": "Status of the bulk upload.",
            "type": "object",
            "properties": {
                "batchId": {
                    "description": "Contact/Leads loaded",
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "numOfLeadsProcessed": {
                    "description": "Contact/Leads loaded",
                    "type": "number"
                },
                "numOfRowsFailed": {
                    "description": "Failed count",
                    "type": "number"
                },
                "numOfRowsWithWarning": {
                    "description": "Contact/Leads that had warnings",
                    "type": "number"
                },
                "status": {
                    "description": "Status of the bulk job",
                    "type": "string"
                }
            }
        },
        "SubscriberAddress": {
            "properties": {
                "Address": {
                    "type": "string"
                },
                "AddressType": {
                    "type": "string"
                },
                "Statuses": {
                    "items": {
                        "$ref": "#/definitions/AddressStatus"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "activitiesGET": {
            "description": " (sometimes called interaction) The core object, without this object you are unable to create any other properties of a journey using the spec.",
            "properties": {
                "activities": {
                    "items": {
                        "$ref": "#/definitions/Activities"
                    },
                    "type": "array"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "defaults": {
                    "$ref": "#/definitions/defaults"
                },
                "definitionId": {
                    "type": "string",
                    "x-readOnly": true
                },
                "description": {
                    "description": " A description of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "entryMode": {
                    "enum": [
                        "NotSet",
                        "SingleEntryAcrossAllVersions",
                        "MultipleEntries"
                    ],
                    "type": "string"
                },
                "executionMode": {
                    "enum": [
                        "Production",
                        "Test"
                    ],
                    "type": "string",
                    "x-readOnly": true
                },
                "exits": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "goals": {
                    "items": {
                        "$ref": "#/definitions/goals"
                    },
                    "type": "array"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "description": "The customer key as a GUID (UUID) to be used while referencing this journey",
                    "type": "string",
                    "x-sub-format": "UUID"
                },
                "lastPublishedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "modifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "name": {
                    "description": "The name of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "stats": {
                    "$ref": "#/definitions/stats"
                },
                "status": {
                    "enum": [
                        "Draft",
                        "Published",
                        "ScheduledToPublish",
                        "Stopped",
                        "Unpublished",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "tags": {
                    "items": {
                        "$ref": "#/definitions/tags"
                    },
                    "type": "array"
                },
                "triggers": {
                    "items": {
                        "$ref": "#/definitions/retrieveTriggers"
                    },
                    "type": "array",
                    "x-reference-objectname": "events"
                },
                "version": {
                    "format": "double",
                    "type": "number",
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-names": [
                        "versionNumber",
                        "specificApiVersionNumber"
                    ]
                },
                "workflowApiVersion": {
                    "description": "The Journey Spec version to use for this journey. Possible values: 0.5, 1.0.",
                    "format": "float",
                    "type": "number"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "key"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "x-vendor-objectname": "journey",
            "type": "object"
        },
        "SendClassification": {
            "properties": {
                "ArchiveEmail": {
                    "type": "boolean"
                },
                "Description": {
                    "type": "string"
                },
                "HonorPublicationListOptOutsForTransactionalSends": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                },
                "SendClassificationType": {
                    "enum": [
                        "Operational",
                        "Marketing"
                    ],
                    "type": "string"
                },
                "SendPriority": {
                    "enum": [
                        "Burst",
                        "Normal",
                        "Low"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "objectsMetadataFields": {
            "properties": {
                "mask": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "vendorDisplayName": {
                    "type": "string"
                },
                "vendorPath": {
                    "type": "string"
                },
                "vendorReadOnly": {
                    "type": "boolean"
                },
                "vendorRequired": {
                    "type": "boolean"
                }
            }
        },
        "activitiesEvents": {
            "properties": {
                "BatchID": {
                    "description": "Ties triggered send sent events to other events (like clicks and opens that occur at a later date and time)",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "BounceCategory": {
                    "description": "Defines category for bounce associated with a bounced email.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "BounceType": {
                    "description": "Defines type of bounce associated with a bounced email.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "Client": {
                    "description": "Specifies the account ownership and context of an object.",
                    "$ref": "#/definitions/Client"
                },
                "CreatedDate": {
                    "description": "Read-only date and time of the object's creation.",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "EventDate": {
                    "description": "Date when a tracking event occurred.",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "EventType": {
                    "description": "The type of tracking event",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "ID": {
                    "description": "Read-only identifier for an object. Some objects use the ObjectID property as the Marketing Cloud unique ID.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "ModifiedDate": {
                    "description": "Indicates the last time object information was modified.",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ]
                },
                "ObjectID": {
                    "description": "System-controlled, read-only text string identifier for object.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "SMTPCode": {
                    "description": "Contains SMTP code related to a bounced email.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "SMTPReason": {
                    "description": "Contains SMTP reason associated with a bounced email.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "SendID": {
                    "description": "Contains identifier for a specific send.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "SubscriberKey": {
                    "description": "Identification of a specific subscriber.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "URL": {
                    "description": "Indicates URL included in an event or configuration.",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                },
                "URLID": {
                    "description": "Indicates URL ID associated with a click tracking event.",
                    "format": "int32",
                    "type": "integer",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        "!="
                    ]
                }
            },
            "x-primary-key": [
                "ObjectID"
            ],
            "x-searchable": true,
            "type": "object"
        },
        "AttributeMap": {
            "properties": {
                "AdditionalData": {
                    "description": "Reserved for future use.",
                    "$ref": "#/definitions/APIProperty"
                },
                "ColumnName": {
                    "description": "Reserved for future use.",
                    "type": "string"
                },
                "ColumnNameMappedTo": {
                    "description": "Reserved for future use.",
                    "type": "string"
                },
                "EntityName": {
                    "description": "Reserved for future use.",
                    "type": "string"
                },
                "EntityNameMappedTo": {
                    "description": "Reserved for future use.",
                    "type": "string"
                },
                "Name": {
                    "description": "Name of the object or property.",
                    "type": "string"
                },
                "Value": {
                    "description": "Defines value to be used in filter or other object. In filters, the BETWEEN operator requires two Values. IN can handle multiple Values. All other operators require one and only one Value. isNull and isNotNull ignores any supplied values and don't return an error.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListPost": {
            "properties": {
                "AutomatedEmail": {
                    "$ref": "#/definitions/Email"
                },
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "Client": {
                    "$ref": "#/definitions/IdPCK"
                },
                "CorrelationID": {
                    "type": "string"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "x-length": 100,
                    "type": "string"
                },
                "Description": {
                    "x-length": 200,
                    "type": "string"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "ListClassification": {
                    "enum": [
                        "ExactTargetList",
                        "PublicationList",
                        "SuppressionList"
                    ],
                    "type": "string"
                },
                "ListName": {
                    "x-length": 50,
                    "type": "string"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "type": "string"
                },
                "Owner": {
                    "$ref": "#/definitions/IdPCK"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "SendClassification": {
                    "$ref": "#/definitions/SendClassification"
                },
                "Type": {
                    "enum": [
                        "Public",
                        "Private",
                        "SalesForce",
                        "GlobalUnsubscribe",
                        "Master"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "ListName"
            ],
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "List",
            "type": "object"
        },
        "attributeSetValues": {
            "properties": {
                "name": {
                    "type": "string",
                    "x-samplevalue": "Email Address"
                },
                "value": {
                    "type": "string",
                    "x-samplevalue": "simon@sausage.com"
                }
            },
            "x-has-customfields": true,
            "type": "object"
        },
        "self": {
            "properties": {
                "href": {
                    "type": "string",
                    "x-samplevalue": "/v1/attributeGroups/d3a3a6aa-25d4-e711-b98f-38eaa71427a1",
                    "x-sub-format": "Url"
                }
            },
            "type": "object"
        },
        "attributes": {
            "properties": {
                "customerDataID": {
                    "format": "int32",
                    "type": "integer"
                },
                "dataSourceID": {
                    "format": "int32",
                    "type": "integer"
                },
                "dataType": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fullyQualifiedName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isHidden": {
                    "type": "boolean"
                },
                "isIdentityValue": {
                    "type": "boolean"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isPrimaryKey": {
                    "type": "boolean"
                },
                "isReadOnly": {
                    "type": "boolean"
                },
                "isSystemDefined": {
                    "type": "boolean"
                },
                "isUpdateable": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "length": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "$ref": "#/definitions/attributesName"
                },
                "objectState": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "parentType": {
                    "type": "string"
                },
                "storageName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dataExtensionsRows": {
            "properties": {
                "keys": {
                    "description": "Defines the primary key(s) for each row",
                    "$ref": "#/definitions/rowsKeys"
                },
                "values": {
                    "description": "Defines the values for each row",
                    "$ref": "#/definitions/rowsValues"
                }
            },
            "type": "object"
        },
        "contacts": {
            "description": "Updates contacts with the specified information in the specified attribute groups.",
            "properties": {
                "contactID": {
                    "description": "Unique ID for the contact. You must provide either a value for contactKey or contactID.",
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 38927617
                },
                "contactKey": {
                    "description": "Primary address for the contact. You must provide either a value for contactKey or contactID.",
                    "type": "string",
                    "x-samplevalue": "6dcb271e-06db-4100-bebb-b141469cd4d1"
                },
                "contactTypeID": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "hasErrors": {
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "isNewContactKey": {
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "operationStatus": {
                    "type": "string",
                    "x-samplevalue": "OK"
                },
                "requestServiceMessageID": {
                    "type": "string",
                    "x-samplevalue": "9e51d854-14cf-4446-a6a3-9db841b37c41"
                },
                "responseDateTime": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-12-03T23:35:55.0747387-06:00"
                },
                "rowsAffected": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "serviceMessageID": {
                    "type": "string",
                    "x-samplevalue": "9c21ae1d-724c-4c9a-8cea-657a87fa0184"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "contactID"
            ],
            "x-searchable": false,
            "x-vendor-objectname": "contacts",
            "type": "object"
        },
        "SubscriberTypeDefinition": {
            "properties": {
                "SubscriberType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Locale": {
            "properties": {
                "LocaleCode": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Email": {
            "properties": {
                "CategoryID": {
                    "format": "int32",
                    "type": "integer"
                },
                "CharacterSet": {
                    "type": "string"
                },
                "ClonedFromID": {
                    "format": "int32",
                    "type": "integer"
                },
                "ContentAreas": {
                    "$ref": "#/definitions/ContentArea"
                },
                "ContentCheckStatus": {
                    "type": "string"
                },
                "EmailType": {
                    "type": "string"
                },
                "Folder": {
                    "type": "string"
                },
                "HTMLBody": {
                    "type": "string"
                },
                "HasDynamicSubjectLine": {
                    "type": "boolean"
                },
                "IsActive": {
                    "type": "boolean"
                },
                "IsApproved": {
                    "type": "boolean"
                },
                "IsHTMLPaste": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                },
                "PreHeader": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "SyncTextWithHTML": {
                    "type": "boolean"
                },
                "TextBody": {
                    "type": "string"
                },
                "__AdditionalEmailAttribute1": {
                    "type": "string"
                },
                "__AdditionalEmailAttribute2": {
                    "type": "string"
                },
                "__AdditionalEmailAttribute3": {
                    "type": "string"
                },
                "__AdditionalEmailAttribute4": {
                    "type": "string"
                },
                "__AdditionalEmailAttribute5": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListPatchResp": {
            "properties": {
                "AutomatedEmail": {
                    "$ref": "#/definitions/Email"
                },
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "Client": {
                    "$ref": "#/definitions/IdPCK"
                },
                "CorrelationID": {
                    "type": "string"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "x-length": 100,
                    "type": "string"
                },
                "Description": {
                    "x-length": 200,
                    "type": "string"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "ListClassification": {
                    "enum": [
                        "ExactTargetList",
                        "PublicationList",
                        "SuppressionList"
                    ],
                    "type": "string"
                },
                "ListName": {
                    "x-length": 50,
                    "type": "string"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "type": "string"
                },
                "Owner": {
                    "$ref": "#/definitions/IdPCK"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "SendClassification": {
                    "$ref": "#/definitions/SendClassification"
                },
                "Type": {
                    "enum": [
                        "Public",
                        "Private",
                        "SalesForce",
                        "GlobalUnsubscribe",
                        "Master"
                    ],
                    "type": "string"
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "List",
            "type": "object"
        },
        "ListPatch": {
            "properties": {
                "AutomatedEmail": {
                    "$ref": "#/definitions/Email"
                },
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "Client": {
                    "$ref": "#/definitions/IdPCK"
                },
                "CorrelationID": {
                    "type": "string"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "x-length": 100,
                    "type": "string"
                },
                "Description": {
                    "x-length": 200,
                    "type": "string"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "ListClassification": {
                    "enum": [
                        "ExactTargetList",
                        "PublicationList",
                        "SuppressionList"
                    ],
                    "type": "string"
                },
                "ListName": {
                    "x-length": 50,
                    "type": "string"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "type": "string"
                },
                "Owner": {
                    "$ref": "#/definitions/IdPCK"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "SendClassification": {
                    "$ref": "#/definitions/SendClassification"
                },
                "Type": {
                    "enum": [
                        "Public",
                        "Private",
                        "SalesForce",
                        "GlobalUnsubscribe",
                        "Master"
                    ],
                    "type": "string"
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "List",
            "type": "object"
        },
        "Template": {
            "properties": {
                "CustomerKey": {
                    "description": "User-supplied unique identifier for an object within an object type (corresponds to the external key assigned to an object in the user interface).",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "attributeSetDefinitions": {
            "properties": {
                "href": {
                    "type": "string",
                    "x-samplevalue": "/v1//attributeSetDefinitions",
                    "x-sub-format": "Url"
                }
            },
            "type": "object"
        },
        "PicklistItem": {
            "properties": {
                "IsDefaultValue": {
                    "description": "Indicates whether an item is the default value in a list.",
                    "type": "boolean"
                },
                "Label": {
                    "description": "Name or text that is displayed next to the field.",
                    "type": "string"
                },
                "Value": {
                    "description": "Defines value to be used in filter or other object. In filters, the BETWEEN operator requires two Values. IN can handle multiple Values. All other operators require one and only one Value. isNull and isNotNull ignores any supplied values and don't return an error.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartnerProperties": {
            "properties": {
                "Name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "patchListContactResp": {
            "properties": {
                "Addresses": {
                    "items": {
                        "$ref": "#/definitions/SubscriberAddress"
                    },
                    "type": "array"
                },
                "Attributes": {
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    },
                    "type": "array"
                },
                "Client": {
                    "$ref": "#/definitions/ClientIDSub"
                },
                "CorrelationID": {
                    "type": "string"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "type": "string"
                },
                "EmailAddress": {
                    "x-length": 254,
                    "type": "string"
                },
                "EmailTypePreference": {
                    "enum": [
                        "Text",
                        "HTML"
                    ],
                    "type": "string"
                },
                "GlobalUnsubscribeCategory": {
                    "$ref": "#/definitions/GlobalUnsubscribeCategory"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "Locale": {
                    "$ref": "#/definitions/Locale"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "type": "string"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "PartnerProperties": {
                    "items": {
                        "$ref": "#/definitions/APIProperty"
                    },
                    "type": "array"
                },
                "PartnerType": {
                    "type": "string"
                },
                "PrimaryEmailAddress": {
                    "$ref": "#/definitions/EmailAddress"
                },
                "PrimarySMSAddress": {
                    "$ref": "#/definitions/SMSAddress"
                },
                "PrimarySMSPublicationStatus": {
                    "enum": [
                        "OptedIn",
                        "OptedOut",
                        "InActive"
                    ],
                    "type": "string"
                },
                "Status": {
                    "enum": [
                        "Active",
                        "Bounced",
                        "Held",
                        "Unsubscribed",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "SubscriberKey": {
                    "x-length": 254,
                    "type": "string"
                },
                "SubscriberTypeDefinition": {
                    "$ref": "#/definitions/SubscriberTypeDefinition"
                },
                "UnsubscribedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "Subscriber",
            "type": "object"
        },
        "SubscriberReq": {
            "properties": {
                "Addresses": {
                    "items": {
                        "$ref": "#/definitions/SubscriberAddress"
                    },
                    "type": "array"
                },
                "Attributes": {
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    },
                    "type": "array"
                },
                "Client": {
                    "$ref": "#/definitions/ClientIDSub"
                },
                "CorrelationID": {
                    "type": "string"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "type": "string"
                },
                "EmailAddress": {
                    "x-length": 254,
                    "type": "string"
                },
                "EmailTypePreference": {
                    "enum": [
                        "Text",
                        "HTML"
                    ],
                    "type": "string"
                },
                "GlobalUnsubscribeCategory": {
                    "$ref": "#/definitions/GlobalUnsubscribeCategory"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "Locale": {
                    "$ref": "#/definitions/Locale"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "type": "string"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "PartnerProperties": {
                    "items": {
                        "$ref": "#/definitions/APIProperty"
                    },
                    "type": "array"
                },
                "PartnerType": {
                    "type": "string"
                },
                "PrimaryEmailAddress": {
                    "$ref": "#/definitions/EmailAddress"
                },
                "PrimarySMSAddress": {
                    "$ref": "#/definitions/SMSAddress"
                },
                "PrimarySMSPublicationStatus": {
                    "enum": [
                        "OptedIn",
                        "OptedOut",
                        "InActive"
                    ],
                    "type": "string"
                },
                "Status": {
                    "enum": [
                        "Active",
                        "Bounced",
                        "Held",
                        "Unsubscribed",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "SubscriberKey": {
                    "x-length": 254,
                    "type": "string"
                },
                "SubscriberTypeDefinition": {
                    "$ref": "#/definitions/SubscriberTypeDefinition"
                },
                "UnsubscribedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                }
            },
            "required": [
                "SubscriberKey",
                "EmailAddress"
            ],
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "Subscriber",
            "type": "object"
        },
        "rowsValues": {
            "properties": {},
            "x-has-customfields": true,
            "type": "object"
        },
        "links": {
            "properties": {
                "attributeSetDefinitions": {
                    "x-reference-objectname": "attributeSets",
                    "$ref": "#/definitions/attributeSetDefinitions"
                },
                "self": {
                    "x-samplevalue": "/v1/attributeGroups/c59f8fc7-b57a-e611-a06b-38eaa7142c91",
                    "x-sub-format": "Url",
                    "$ref": "#/definitions/self"
                }
            },
            "type": "object"
        },
        "Client": {
            "properties": {
                "ID": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "AddressStatus": {
            "properties": {
                "Status": {
                    "enum": [
                        "OptedIn",
                        "OptedOut",
                        "InActive"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SendableSubscriberField": {
            "properties": {
                "Name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "activitiesPUT": {
            "description": " (sometimes called interaction) The core object, without this object you are unable to create any other properties of a journey using the spec.",
            "properties": {
                "activities": {
                    "items": {
                        "$ref": "#/definitions/Activities"
                    },
                    "type": "array"
                },
                "defaults": {
                    "$ref": "#/definitions/defaults"
                },
                "description": {
                    "description": " A description of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "entryMode": {
                    "enum": [
                        "NotSet",
                        "SingleEntryAcrossAllVersions",
                        "MultipleEntries"
                    ],
                    "type": "string"
                },
                "goals": {
                    "items": {
                        "$ref": "#/definitions/goals"
                    },
                    "type": "array"
                },
                "key": {
                    "description": "The customer key as a GUID (UUID) to be used while referencing this journey",
                    "type": "string",
                    "x-sub-format": "UUID"
                },
                "modifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this journey",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "nameOrDescription"
                    ]
                },
                "triggers": {
                    "items": {
                        "$ref": "#/definitions/triggers"
                    },
                    "type": "array",
                    "x-reference-objectname": "events"
                },
                "version": {
                    "format": "double",
                    "type": "number",
                    "x-searchable": true,
                    "x-searchable-names": [
                        "versionNumber",
                        "specificApiVersionNumber"
                    ]
                },
                "workflowApiVersion": {
                    "description": "The Journey Spec version to use for this journey. Possible values: 0.5, 1.0.",
                    "format": "float",
                    "type": "number"
                }
            },
            "required": [
                "workflowApiVersion",
                "name",
                "key",
                "version",
                "modifiedDate"
            ],
            "x-has-customfields": true,
            "x-primary-key": [
                "key"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "x-vendor-objectname": "journey",
            "x-where": [
                "mostRecentVersionOnly",
                "extras",
                "orderBy"
            ],
            "type": "object"
        },
        "attributesName": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "id"
            ],
            "type": "object"
        },
        "ContentArea": {
            "properties": {
                "BackgroundColor": {
                    "type": "string"
                },
                "BorderColor": {
                    "type": "string"
                },
                "BorderWidth": {
                    "format": "int32",
                    "type": "integer"
                },
                "CategoryID": {
                    "format": "int32",
                    "type": "integer"
                },
                "Cellpadding": {
                    "format": "int32",
                    "type": "integer"
                },
                "Cellspacing": {
                    "format": "int32",
                    "type": "integer"
                },
                "Content": {
                    "type": "string"
                },
                "FontFamily": {
                    "type": "string"
                },
                "HasFontSize": {
                    "type": "boolean"
                },
                "IsBlank": {
                    "type": "boolean"
                },
                "IsDynamicContent": {
                    "type": "boolean"
                },
                "IsLocked": {
                    "type": "boolean"
                },
                "IsSurvey": {
                    "type": "boolean"
                },
                "Key": {
                    "type": "string"
                },
                "Layout": {
                    "enum": [
                        "HTMLWrapped",
                        "RawText",
                        "SMS"
                    ],
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Width": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rightConnectingID": {
            "properties": {
                "identifierType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "listsListObject": {
            "properties": {
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "Client": {
                    "$ref": "#/definitions/Client"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CustomerKey": {
                    "x-length": 100,
                    "type": "string"
                },
                "Description": {
                    "x-length": 200,
                    "type": "string"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer"
                },
                "ListClassification": {
                    "enum": [
                        "ExactTargetList",
                        "PublicationList",
                        "SuppressionList"
                    ],
                    "type": "string"
                },
                "ListName": {
                    "x-length": 50,
                    "type": "string"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ObjectID": {
                    "type": "string"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "Type": {
                    "enum": [
                        "Public",
                        "Private",
                        "SalesForce",
                        "GlobalUnsubscribe",
                        "Master"
                    ],
                    "type": "string"
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "List",
            "type": "object"
        },
        "attributeSets": {
            "properties": {
                "items": {
                    "items": {
                        "$ref": "#/definitions/itemsPat"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of attribute group to which to add the contact information",
                    "type": "string",
                    "x-samplevalue": "Email Addresses"
                }
            },
            "required": [
                "name"
            ],
            "x-vendor-objectname": "attributeSets",
            "type": "object"
        },
        "CompressionConfiguration": {
            "properties": {
                "Encoding": {
                    "enum": [
                        "base64"
                    ],
                    "type": "string"
                },
                "Type": {
                    "enum": [
                        "gzip"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IdPCK": {
            "properties": {
                "ID": {
                    "format": "int32",
                    "type": "integer"
                },
                "PartnerClientKey": {
                    "x-length": 64,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "campaignsListObject": {
            "description": "Retrieves a collection of campaigns.",
            "properties": {
                "campaignCode": {
                    "description": "Unique identifier for the campaign with a maximum length of 36 characters",
                    "type": "string",
                    "x-samplevalue": "testingTheElement"
                },
                "color": {
                    "description": "Hex color value",
                    "type": "string",
                    "x-samplevalue": "ffc7c7"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-25T03:31:36"
                },
                "description": {
                    "description": "Description of the campaign with a maximum length of 512 characters",
                    "type": "string",
                    "x-samplevalue": "Test Element"
                },
                "favorite": {
                    "description": "Determines if the campaign will be flagged as a favorite",
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "id": {
                    "description": "Campaign ID",
                    "type": "string",
                    "x-samplevalue": "3308"
                },
                "modifiedDate": {
                    "description": "",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-25T03:31:36"
                },
                "name": {
                    "description": "Name of the campaign with a maximum length of 128 characters",
                    "type": "string",
                    "x-samplevalue": "testingTheElement"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "id"
            ],
            "x-vendor-objectname": "campaigns",
            "type": "object"
        },
        "columnStepBody": {
            "properties": {
                "keys": {
                    "description": "Defines the primary key(s) for each row",
                    "$ref": "#/definitions/rowsKeys"
                },
                "values": {
                    "description": "Defines the values for each row",
                    "$ref": "#/definitions/rowsValues"
                }
            },
            "required": [
                "keys",
                "values"
            ],
            "type": "object"
        },
        "lists": {
            "properties": {
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "Client": {
                    "$ref": "#/definitions/Client"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "CustomerKey": {
                    "x-length": 100,
                    "type": "string"
                },
                "Description": {
                    "x-length": 200,
                    "type": "string"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer"
                },
                "ListClassification": {
                    "enum": [
                        "ExactTargetList",
                        "PublicationList",
                        "SuppressionList"
                    ],
                    "type": "string"
                },
                "ListName": {
                    "x-length": 50,
                    "type": "string"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "ObjectID": {
                    "type": "string"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "Type": {
                    "enum": [
                        "Public",
                        "Private",
                        "SalesForce",
                        "GlobalUnsubscribe",
                        "Master"
                    ],
                    "type": "string"
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "List",
            "type": "object"
        },
        "name": {
            "properties": {
                "value": {
                    "type": "string",
                    "x-name": true
                }
            },
            "type": "object"
        },
        "ClientID": {
            "properties": {
                "ClientID": {
                    "description": "Specifies system account ID",
                    "format": "int32",
                    "type": "integer"
                },
                "CreatedBy": {
                    "description": "Returns user ID for user who created object",
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "CustomerID": {
                    "type": "string"
                },
                "CustomerKey": {
                    "description": "User-supplied unique identifier for an object within an object type (corresponds to the external key assigned to an object in the user interface).",
                    "type": "string"
                },
                "EnterpriseID": {
                    "description": "Reserved for future use.",
                    "format": "int64",
                    "type": "integer"
                },
                "ID": {
                    "description": "Read-only identifier for an object. Some objects use the ObjectID property as the Marketing Cloud unique ID.",
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "ModifiedBy": {
                    "description": "Returns user ID for user who modified object.",
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "PartnerClientKey": {
                    "description": "User-defined partner key for an account.",
                    "type": "string"
                },
                "PartnerUserKey": {
                    "description": "Specifies the partner key value of a user.",
                    "type": "string"
                },
                "UserID": {
                    "description": "Indicates username for an account.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dtClient": {
            "properties": {
                "ID": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "atSetsPatchValues": {
            "properties": {
                "name": {
                    "type": "string",
                    "x-samplevalue": "Email Address"
                },
                "value": {
                    "type": "string",
                    "x-samplevalue": "simon@sausage.com"
                }
            },
            "type": "object"
        },
        "objectsMetadata": {
            "properties": {
                "fields": {
                    "items": {
                        "$ref": "#/definitions/objectsMetadataFields"
                    },
                    "type": "array"
                }
            }
        },
        "rightItemConnectingID": {
            "properties": {
                "identifierType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rowsKeys": {
            "properties": {},
            "x-has-customfields": true,
            "type": "object"
        },
        "leftItem": {
            "properties": {
                "cardinality": {
                    "type": "string"
                },
                "connectingID": {
                    "$ref": "#/definitions/connectingID"
                },
                "identifier": {
                    "type": "string"
                },
                "objectState": {
                    "type": "string"
                },
                "relationshipType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "postDataExtension": {
            "properties": {
                "CategoryID": {
                    "description": "Specifies the identifier of the folder.",
                    "format": "int64",
                    "type": "integer"
                },
                "Client": {
                    "description": "Specifies the account ownership and context of an object.",
                    "$ref": "#/definitions/ClientID"
                },
                "CorrelationID": {
                    "description": "Identifies correlation of objects across several requests.",
                    "type": "string"
                },
                "CreatedDate": {
                    "description": "Read-only date and time of the object's creation.",
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "description": "User-supplied unique identifier for an object within an object type (corresponds to the external key assigned to an object in the user interface).",
                    "x-length": 200,
                    "type": "string"
                },
                "DataRetentionPeriod": {
                    "description": "Specifies the period during which the application retains the data within a data extension.",
                    "enum": [
                        "Days",
                        "Weeks",
                        "Months",
                        "Years"
                    ],
                    "type": "string"
                },
                "DataRetentionPeriodLength": {
                    "description": "Specifies the number of time units for which data will be retained (used with DataRetentionPeriodUnitOfMeasure to specify the full data retention time).",
                    "format": "int32",
                    "type": "integer"
                },
                "DataRetentionPeriodUnitOfMeasure": {
                    "description": "Specifies the units of time for which data will be retained. Deprecated. Use DataRetentionPeriodLength and DataRetentionPeriod instead.",
                    "format": "int32",
                    "type": "integer"
                },
                "DeleteAtEndOfRetentionPeriod": {
                    "description": "Indicates whether data should be deleted at the end of the retention period.",
                    "type": "boolean"
                },
                "Description": {
                    "description": "Describes and provides information regarding the object.",
                    "x-length": 2147483647,
                    "type": "string"
                },
                "Fields": {
                    "description": "Specifies fields contained within a data extension.",
                    "items": {
                        "$ref": "#/definitions/DataExtensionField"
                    },
                    "type": "array"
                },
                "ID": {
                    "description": "Read-only identifier for an object. Some objects use the ObjectID property as the Marketing Cloud unique ID.",
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "IsSendable": {
                    "description": "Indicates whether you can use a data extension as part of an audience for a message send.",
                    "type": "boolean"
                },
                "IsTestable": {
                    "description": "Indicates whether a sendable data extension can be used within tests sends for a message.",
                    "type": "boolean"
                },
                "ModifiedDate": {
                    "description": "Indicates the last time object information was modified.",
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "Name": {
                    "description": "Name of the object or property.",
                    "x-length": 128,
                    "type": "string"
                },
                "ObjectID": {
                    "description": "System-controlled, read-only text string identifier for object.",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "description": "Reserved for future use.",
                    "type": "string"
                },
                "Owner": {
                    "description": "Describes account ownership of subscriber in an on-your-behalf account.",
                    "$ref": "#/definitions/Owner"
                },
                "PartnerKey": {
                    "description": "Unique identifier provided by partner for an object, accessible only via API.",
                    "x-length": 64,
                    "type": "string"
                },
                "PartnerProperties": {
                    "description": "A collection of metadata supplied by client and stored by system - only accessible via API.",
                    "items": {
                        "$ref": "#/definitions/APIProperty"
                    },
                    "type": "array"
                },
                "ResetRetentionPeriodOnImport": {
                    "description": "Indicates whether a data retention period should be reset after a successful import of new data. A value of true indicates that the data retention period resets to the beginning upon completion of a successful data import. A value of false indicates the data retention period continues from the original starting point.",
                    "type": "boolean"
                },
                "RetainUntil": {
                    "description": "Indicates the date that ends the retention period for a data extension. Make sure that the value passed to this property is correctly formatted based on the Date Format setting of the API user. Failure to do so may result in an error.",
                    "type": "string",
                    "x-sub-format": "date"
                },
                "RowBasedRetention": {
                    "description": "Indicates whether the data retention policy removes data by row or by entire data extension. A value of true indicates all records within a data extension are removed at the same time. A value of false indicates that the application can remove individual rows within a data extension.",
                    "type": "boolean"
                },
                "SendableDataExtensionField": {
                    "description": "Indicates the field within a sendable data extension to use as an address as part of a send. Possible values include SubscriberID, CustomerKey, or EmailAddress. The application uses this field to establish a data relationship between a value specified by theSendableSubscriberFieldproperty and a value within a sendable data extension.",
                    "$ref": "#/definitions/DataExtensionField"
                },
                "SendableSubscriberField": {
                    "description": "Indicates field to use as sending address. The application uses this field to establish a data relationship between a subscriber field and a value specified by the SendableDataExtentionField property.",
                    "$ref": "#/definitions/Attribute"
                },
                "Status": {
                    "description": "Defines status of object. Status of an address.",
                    "x-length": 200,
                    "type": "string"
                },
                "Template": {
                    "description": "Indicates template used to create a data extension.",
                    "$ref": "#/definitions/DataExtensionTemplate"
                }
            },
            "required": [
                "Name",
                "CustomerKey",
                "Fields"
            ],
            "x-primary-key": [
                "ObjectID"
            ],
            "x-vendor-objectname": "DataExtension",
            "type": "object"
        },
        "SubscriberResp": {
            "properties": {
                "Addresses": {
                    "items": {
                        "$ref": "#/definitions/SubscriberAddress"
                    },
                    "type": "array"
                },
                "Attributes": {
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    },
                    "type": "array"
                },
                "Client": {
                    "$ref": "#/definitions/ClientIDSub"
                },
                "CorrelationID": {
                    "type": "string"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "type": "string"
                },
                "EmailAddress": {
                    "x-length": 254,
                    "type": "string"
                },
                "EmailTypePreference": {
                    "enum": [
                        "Text",
                        "HTML"
                    ],
                    "type": "string"
                },
                "GlobalUnsubscribeCategory": {
                    "$ref": "#/definitions/GlobalUnsubscribeCategory"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "Locale": {
                    "$ref": "#/definitions/Locale"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "type": "string"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "PartnerProperties": {
                    "items": {
                        "$ref": "#/definitions/APIProperty"
                    },
                    "type": "array"
                },
                "PartnerType": {
                    "type": "string"
                },
                "PrimaryEmailAddress": {
                    "$ref": "#/definitions/EmailAddress"
                },
                "PrimarySMSAddress": {
                    "$ref": "#/definitions/SMSAddress"
                },
                "PrimarySMSPublicationStatus": {
                    "enum": [
                        "OptedIn",
                        "OptedOut",
                        "InActive"
                    ],
                    "type": "string"
                },
                "Status": {
                    "enum": [
                        "Active",
                        "Bounced",
                        "Held",
                        "Unsubscribed",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "SubscriberKey": {
                    "x-length": 254,
                    "type": "string"
                },
                "SubscriberTypeDefinition": {
                    "$ref": "#/definitions/SubscriberTypeDefinition"
                },
                "UnsubscribedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "Subscriber",
            "type": "object"
        },
        "retrieveTriggers": {
            "description": "The trigger for this particular journey. Expressed as an object of type ContactEvent from the Journey Spec",
            "properties": {
                "description": {
                    "type": "string"
                },
                "eventDefinitionKey": {
                    "description": "This is the key used to filter appropriate events into filter for evaluation on entry into the journey. Do not include a period in the event definition key.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "description": "The MID-unique key used to identify this entry Event",
                    "type": "string"
                },
                "name": {
                    "description": "The display name for this Entry Event which will be shown in the Journey Builder UI",
                    "type": "string"
                },
                "outcomes": {
                    "items": {
                        "$ref": "#/definitions/outcomes"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The type of Entry Event this is (only value currently supported is event)",
                    "type": "string"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "key"
            ],
            "x-vendor-objectname": "events",
            "type": "object"
        },
        "ClientIDSub": {
            "properties": {
                "ClientID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "CreatedBy": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "CustomerID": {
                    "type": "string"
                },
                "CustomerKey": {
                    "type": "string"
                },
                "EnterpriseID": {
                    "format": "int64",
                    "type": "integer"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "ModifiedBy": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "PartnerClientKey": {
                    "type": "string"
                },
                "PartnerUserKey": {
                    "type": "string"
                },
                "UserID": {
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "leftRelationshipIDs": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "APIProperty": {
            "properties": {
                "Name": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Activities": {
            "description": "The activities which compose this particular journey. Expressed as objects of types supported by the Journey Spec.",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "This is the Marketing Cloud-provided unique ID for this particular activity.",
                    "type": "string"
                },
                "key": {
                    "description": "This is the customer key (journey-unique) for this particular activity.",
                    "type": "string"
                },
                "name": {
                    "description": "This is the display name for this activity, it will be shown in the Journey Builder UI.",
                    "type": "string"
                },
                "outcomes": {
                    "items": {
                        "$ref": "#/definitions/outcomes"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "This property defines what type of activity this is. The expected input for each activity must be passed as an argument to operate correctly",
                    "enum": [
                        "Email",
                        "MultiCriteriaDecision",
                        "RandomSplit",
                        "EngagementSplit",
                        "DataExtensionUpdate",
                        "Rest",
                        "Wait"
                    ],
                    "type": "string"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "id"
            ],
            "x-vendor-objectname": "activity",
            "x-where": [
                "mostRecentVersionOnly",
                "extras",
                "orderBy"
            ],
            "type": "object"
        },
        "contactsPATCH": {
            "description": "Updates contacts with the specified information in the specified attribute groups.",
            "properties": {
                "attributeSets": {
                    "description": "Array of information used to create a new contact",
                    "items": {
                        "$ref": "#/definitions/attributeSets"
                    },
                    "type": "array",
                    "x-reference-objectname": "attributeSets"
                },
                "contactID": {
                    "description": "Unique ID for the contact. You must provide either a value for contactKey or contactID",
                    "format": "int64",
                    "type": "integer",
                    "x-conditional-required": " You must provide either a value for contactKey or contactID.",
                    "x-readOnly": true,
                    "x-samplevalue": 38886753,
                    "x-sub-format": "UUID"
                },
                "contactKey": {
                    "description": "Primary address for the contact. You must provide either a value for contactKey or contactID.",
                    "type": "string",
                    "x-conditional-required": " You must provide either a value for contactKey or contactID.",
                    "x-samplevalue": "6dcb271e-06db-4100-bebb-b141469cd4d1"
                }
            },
            "required": [
                "attributeSets"
            ],
            "x-has-customfields": true,
            "x-primary-key": [
                "contactID"
            ],
            "x-searchable": false,
            "x-vendor-objectname": "contacts",
            "type": "object"
        },
        "DataExtensionField": {
            "properties": {
                "AttributeMaps": {
                    "description": "Reserved for future use.",
                    "items": {
                        "$ref": "#/definitions/AttributeMap"
                    },
                    "type": "array"
                },
                "Client": {
                    "description": "Specifies the account ownership and context of an object.",
                    "$ref": "#/definitions/ClientID"
                },
                "CorrelationID": {
                    "description": "Identifies correlation of objects across several requests.",
                    "type": "string"
                },
                "CreatedDate": {
                    "description": "Read-only date and time of the object's creation.",
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "description": "User-supplied unique identifier for an object within an object type, which corresponds to the external key assigned to an object in the user interface.",
                    "x-length": 333,
                    "type": "string"
                },
                "DataType": {
                    "description": "This has been deprecated. Use ValueType. (PropertyDefinition) The data type of the parameter that is passed to the Data Extract, which can be used to dynamically build a user interface with some basic data validation. (ExtractParameterDescription)",
                    "type": "string"
                },
                "DefaultValue": {
                    "description": "The default value for a data extension field if no value is supplied (Include Now() as the default value if you wish to have a field default to today's date). Used by ExtractParameterDescription as the default value for the parameter if not suppliedwhen a data extract is executed. Used by PropertyDefinition if the default value for the attribute if not suppliedfor a data profile attribute.",
                    "x-length": 2147483647,
                    "type": "string"
                },
                "Description": {
                    "description": "Describes and provides information regarding the object.",
                    "type": "string"
                },
                "DisplayOrder": {
                    "description": "Specifies the position in which the attribute appears on the Subscriber Profile Center page.",
                    "format": "int32",
                    "type": "integer"
                },
                "FieldType": {
                    "description": "Designates data type for a data extension field.",
                    "enum": [
                        "Text",
                        "Number",
                        "Date",
                        "Boolean",
                        "EmailAddress",
                        "Phone",
                        "Decimal",
                        "Locale",
                        "Base16Encrypted",
                        "Base16EncryptedEmail"
                    ],
                    "x-length": 20,
                    "type": "string"
                },
                "ID": {
                    "description": "Read-only identifier for an object. Some objects use the ObjectID property as the Marketing Cloud unique ID.",
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsAccountProperty": {
                    "description": "Indicates whether the property is specific to the account.",
                    "type": "boolean"
                },
                "IsContextSpecific": {
                    "description": "Reserved for future use.",
                    "type": "boolean"
                },
                "IsCreatable": {
                    "description": "Indicates if the PropertyDefinition, ObjectDefinition, or DataExtensionField can be set on a Create call. A value of true indicates it is creatable.",
                    "type": "boolean"
                },
                "IsEditable": {
                    "description": "Indicates if the property is editable by the end-user in the profile center.",
                    "type": "boolean"
                },
                "IsFilterable": {
                    "description": "Indicates if you can filter on this property. Set to true to specify the property in a SimpleFilterPart in a Retrieve call.",
                    "type": "boolean"
                },
                "IsNillable": {
                    "description": "Indicates whether the property can contain a NULL value.",
                    "type": "boolean",
                    "x-conditionally-required": "If isRequired is true, then IsNillable must be set to false"
                },
                "IsPartnerProperty": {
                    "description": "Indicates if the property is specific to a partner.",
                    "type": "boolean"
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "IsPrimaryKey": {
                    "description": "Designates whether a data extension field is used as a primary key for that data extension.",
                    "type": "boolean",
                    "x-conditionally-required": "If this field is set to true, then IsNillable must be set to false"
                },
                "IsQueryable": {
                    "description": "Indicates whether the property is queryable.",
                    "type": "boolean"
                },
                "IsRequired": {
                    "description": "Indicates whether the property must have a value specified. Create calls must include a supplied value, while Update and Delete calls don't require a value.",
                    "type": "boolean"
                },
                "IsRestrictedPicklist": {
                    "description": "Indicates whetherthe property has a restricted list of valid values.",
                    "type": "boolean"
                },
                "IsRetrievable": {
                    "description": "Indicates if object data is retrievable.",
                    "type": "boolean"
                },
                "IsSendTime": {
                    "description": "Indicates whether the property is a send time attribute.",
                    "type": "boolean"
                },
                "IsUpdatable": {
                    "description": "Indicates whether object is updatable.",
                    "type": "boolean"
                },
                "IsViewable": {
                    "description": "Indicates whether the property is viewable by the end-user in the profile center.",
                    "type": "boolean"
                },
                "Label": {
                    "description": "Name or text that is displayed next to the field.",
                    "type": "string"
                },
                "x-length": {
                    "description": "Maximum length of the data.",
                    "format": "int32",
                    "type": "integer"
                },
                "MaxValue": {
                    "description": "Specifies the maximum value to set this property to.",
                    "type": "string"
                },
                "MinLength": {
                    "description": "Specifies the minimum length of the data.",
                    "format": "int32",
                    "type": "integer"
                },
                "MinValue": {
                    "description": "Specifies the minimum value to set this property to.",
                    "type": "string"
                },
                "ModifiedDate": {
                    "description": "Indicates the last time object information was modified.",
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "Name": {
                    "description": "Name of the object or property.",
                    "x-length": 128,
                    "type": "string"
                },
                "ObjectID": {
                    "description": "System-controlled, read-only text string identifier for object.",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "description": "Reserved for future use.",
                    "type": "string"
                },
                "Ordinal": {
                    "description": "Indicates position of object within an array",
                    "format": "int32",
                    "type": "integer"
                },
                "Owner": {
                    "description": "Describes account ownership of subscriber in an on-your-behalf account.",
                    "$ref": "#/definitions/Owner"
                },
                "PartnerKey": {
                    "description": "Unique identifier provided by partner for an object, accessible only via API.",
                    "type": "string"
                },
                "PartnerProperties": {
                    "description": "A collection of metadata supplied by client and stored by system - only accessible via API.",
                    "items": {
                        "$ref": "#/definitions/APIProperty"
                    },
                    "type": "array"
                },
                "PicklistItems": {
                    "description": "Represents a list of the valid values for the property.",
                    "items": {
                        "$ref": "#/definitions/PicklistItem"
                    },
                    "type": "array"
                },
                "Precision": {
                    "description": "Defines numeric precision for decimal properties.",
                    "format": "int32",
                    "type": "integer"
                },
                "PropertyType": {
                    "description": "Indicates the Marketing Cloud data type of the property.",
                    "enum": [
                        "string",
                        "boolean",
                        "double",
                        "dateTime"
                    ],
                    "type": "string"
                },
                "RelationshipName": {
                    "description": "Indicates the name of the relationship, such as One-to-One, One-to-Many.",
                    "type": "string"
                },
                "Scale": {
                    "description": "Indicates numeric precision for decimal properties.",
                    "format": "int32",
                    "type": "integer"
                },
                "Status": {
                    "description": "Defines status of object. Status of an address.",
                    "type": "string"
                },
                "StorageType": {
                    "description": "Indicates special storage properties for the field. Valid values are: Unspecified, Plain, Encrypted, or Obfuscated.",
                    "enum": [
                        "Unspecified",
                        "Plain",
                        "Obfuscated",
                        "Encrypted"
                    ],
                    "type": "string"
                },
                "ValueType": {
                    "description": "ValueType indicates the actual data type of the value that is stored in this property.",
                    "enum": [
                        "xsd:string",
                        "xsd:boolean",
                        "xsd:double",
                        "xsd:dateTime"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Name",
                "FieldType"
            ],
            "type": "object"
        },
        "listsContacts": {
            "properties": {
                "Client": {
                    "$ref": "#/definitions/Client"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "ListID": {
                    "format": "int32",
                    "type": "integer"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "PartnerProperties": {
                    "$ref": "#/definitions/PartnerProperties"
                },
                "Status": {
                    "enum": [
                        "Active",
                        "Bounced",
                        "Held",
                        "Unsubscribed",
                        "Deleted"
                    ],
                    "type": "string"
                },
                "SubscriberKey": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "ListSubscriber",
            "type": "object"
        },
        "DataEventUpdateBody": {
            "properties": {
                "keys": {
                    "description": "Defines the primary key(s) for each row",
                    "$ref": "#/definitions/rowsKeys"
                },
                "values": {
                    "description": "Defines the values for each row",
                    "$ref": "#/definitions/rowsValues"
                }
            },
            "required": [
                "keys",
                "values"
            ],
            "type": "object"
        },
        "ListPostResp": {
            "properties": {
                "AutomatedEmail": {
                    "$ref": "#/definitions/Email"
                },
                "Category": {
                    "format": "int32",
                    "type": "integer"
                },
                "Client": {
                    "$ref": "#/definitions/IdPCK"
                },
                "CorrelationID": {
                    "type": "string"
                },
                "CreatedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "x-length": 100,
                    "type": "string"
                },
                "Description": {
                    "x-length": 200,
                    "type": "string"
                },
                "ID": {
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "ListClassification": {
                    "enum": [
                        "ExactTargetList",
                        "PublicationList",
                        "SuppressionList"
                    ],
                    "type": "string"
                },
                "ListName": {
                    "x-length": 50,
                    "type": "string"
                },
                "ModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectID": {
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "type": "string"
                },
                "Owner": {
                    "$ref": "#/definitions/IdPCK"
                },
                "PartnerKey": {
                    "x-length": 64,
                    "type": "string"
                },
                "SendClassification": {
                    "$ref": "#/definitions/SendClassification"
                },
                "Type": {
                    "enum": [
                        "Public",
                        "Private",
                        "SalesForce",
                        "GlobalUnsubscribe",
                        "Master"
                    ],
                    "type": "string"
                }
            },
            "x-primary-key": [
                "ID"
            ],
            "x-vendor-objectname": "List",
            "type": "object"
        },
        "DataExtensionTemplate": {
            "properties": {
                "CustomerKey": {
                    "description": "User-supplied unique identifier for an object within an object type (corresponds to the external key assigned to an object in the user interface).",
                    "x-length": 200,
                    "type": "string"
                },
                "Description": {
                    "description": "Describes and provides information regarding the object.",
                    "type": "string"
                },
                "Name": {
                    "description": "Name of the object or property.",
                    "x-length": 200,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "patchDataExtension": {
            "properties": {
                "CategoryID": {
                    "description": "Specifies the identifier of the folder.",
                    "format": "int64",
                    "type": "integer"
                },
                "Client": {
                    "description": "Specifies the account ownership and context of an object.",
                    "$ref": "#/definitions/ClientID"
                },
                "CorrelationID": {
                    "description": "Identifies correlation of objects across several requests.",
                    "type": "string"
                },
                "CreatedDate": {
                    "description": "Read-only date and time of the object's creation.",
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "CustomerKey": {
                    "description": "User-supplied unique identifier for an object within an object type (corresponds to the external key assigned to an object in the user interface).",
                    "x-length": 200,
                    "type": "string"
                },
                "DataRetentionPeriod": {
                    "description": "Specifies the period during which the application retains the data within a data extension.",
                    "enum": [
                        "Days",
                        "Weeks",
                        "Months",
                        "Years"
                    ],
                    "type": "string"
                },
                "DataRetentionPeriodLength": {
                    "description": "Specifies the number of time units for which data will be retained (used with DataRetentionPeriodUnitOfMeasure to specify the full data retention time).",
                    "format": "int32",
                    "type": "integer"
                },
                "DataRetentionPeriodUnitOfMeasure": {
                    "description": "Specifies the units of time for which data will be retained. Deprecated. Use DataRetentionPeriodLength and DataRetentionPeriod instead.",
                    "format": "int32",
                    "type": "integer"
                },
                "DeleteAtEndOfRetentionPeriod": {
                    "description": "Indicates whether data should be deleted at the end of the retention period.",
                    "type": "boolean"
                },
                "Description": {
                    "description": "Describes and provides information regarding the object.",
                    "x-length": 2147483647,
                    "type": "string"
                },
                "Fields": {
                    "description": "Specifies fields contained within a data extension.",
                    "items": {
                        "$ref": "#/definitions/DataExtensionField"
                    },
                    "type": "array"
                },
                "ID": {
                    "description": "Read-only identifier for an object. Some objects use the ObjectID property as the Marketing Cloud unique ID.",
                    "format": "int32",
                    "type": "integer",
                    "x-readOnly": true
                },
                "IsPlatformObject": {
                    "type": "boolean"
                },
                "IsSendable": {
                    "description": "Indicates whether you can use a data extension as part of an audience for a message send.",
                    "type": "boolean"
                },
                "IsTestable": {
                    "description": "Indicates whether a sendable data extension can be used within tests sends for a message.",
                    "type": "boolean"
                },
                "ModifiedDate": {
                    "description": "Indicates the last time object information was modified.",
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "Name": {
                    "description": "Name of the object or property.",
                    "x-length": 128,
                    "type": "string"
                },
                "ObjectID": {
                    "description": "System-controlled, read-only text string identifier for object.",
                    "type": "string",
                    "x-readOnly": true
                },
                "ObjectState": {
                    "description": "Reserved for future use.",
                    "type": "string"
                },
                "Owner": {
                    "description": "Describes account ownership of subscriber in an on-your-behalf account.",
                    "$ref": "#/definitions/Owner"
                },
                "PartnerKey": {
                    "description": "Unique identifier provided by partner for an object, accessible only via API.",
                    "x-length": 64,
                    "type": "string"
                },
                "PartnerProperties": {
                    "description": "A collection of metadata supplied by client and stored by system - only accessible via API.",
                    "items": {
                        "$ref": "#/definitions/APIProperty"
                    },
                    "type": "array"
                },
                "ResetRetentionPeriodOnImport": {
                    "description": "Indicates whether a data retention period should be reset after a successful import of new data. A value of true indicates that the data retention period resets to the beginning upon completion of a successful data import. A value of false indicates the data retention period continues from the original starting point.",
                    "type": "boolean"
                },
                "RetainUntil": {
                    "description": "Indicates the date that ends the retention period for a data extension. Make sure that the value passed to this property is correctly formatted based on the Date Format setting of the API user. Failure to do so may result in an error.",
                    "type": "string",
                    "x-sub-format": "date"
                },
                "RowBasedRetention": {
                    "description": "Indicates whether the data retention policy removes data by row or by entire data extension. A value of true indicates all records within a data extension are removed at the same time. A value of false indicates that the application can remove individual rows within a data extension.",
                    "type": "boolean"
                },
                "SendableDataExtensionField": {
                    "description": "Indicates the field within a sendable data extension to use as an address as part of a send. Possible values include SubscriberID, CustomerKey, or EmailAddress. The application uses this field to establish a data relationship between a value specified by theSendableSubscriberFieldproperty and a value within a sendable data extension.",
                    "$ref": "#/definitions/DataExtensionField"
                },
                "SendableSubscriberField": {
                    "description": "Indicates field to use as sending address. The application uses this field to establish a data relationship between a subscriber field and a value specified by the SendableDataExtentionField property.",
                    "$ref": "#/definitions/Attribute"
                },
                "Status": {
                    "description": "Defines status of object. Status of an address.",
                    "x-length": 200,
                    "type": "string"
                },
                "Template": {
                    "description": "Indicates template used to create a data extension.",
                    "$ref": "#/definitions/DataExtensionTemplate"
                }
            },
            "x-primary-key": [
                "ObjectID"
            ],
            "x-vendor-objectname": "DataExtension",
            "type": "object"
        },
        "itemsPat": {
            "properties": {
                "values": {
                    "items": {
                        "$ref": "#/definitions/atSetsPatchValues"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "swagger": "2.0",
    "info": {
        "contact": {
            "email": "support@cloud-elements.com"
        },
        "title": "salesforcemarketingcloud",
        "version": "api-v2"
    },
    "tags": [
        {
            "name": "data-extensions"
        },
        {
            "name": "attribute-sets"
        },
        {
            "name": "campaigns"
        },
        {
            "name": "activities"
        },
        {
            "name": "lists"
        },
        {
            "name": "ping"
        },
        {
            "name": "objects"
        },
        {
            "name": "objectName"
        },
        {
            "name": "bulk"
        },
        {
            "name": "contacts"
        }
    ]
}
