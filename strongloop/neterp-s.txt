Making a call to http://localhost:8080 for the netsuiteerpv2 element
Calling GET http://localhost:8080/elements/api-v2/elements/netsuiteerpv2
Calling GET http://localhost:8080/elements/api-v2/elements/167/docs
{
    "basePath": "/elements/api-v2/hubs/erp",
    "paths": {
        "/accounts": {
            "get": {
                "operationId": "getAccounts",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned in a paginated fashion.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Account"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find accounts in the ERP system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all accounts whose name contains the word 'data', the search expression parameter will be <i>where=name like '%data%'</i>. If a search expression is not provided, then the first 200 records will be returned. <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
                "tags": [
                    "accounts"
                ]
            },
            "post": {
                "operationId": "createAccount",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Account object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Account' model are those required to create a new account.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a new account in the ERP system. Account creation will flow through Cloud Elements to your ERP service. With the exception of the 'id' field, the required fields indicated in the 'Account' model are those required to create a new account.",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/accounts/{id}": {
            "delete": {
                "operationId": "deleteAccountById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the account to delete from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an account associated with a given ID from your ERP system.\nSpecifying an account associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "accounts"
                ]
            },
            "get": {
                "operationId": "getAccountById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the account to retrieve from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an account associated with a given ID from the ERP system.Specifying an account with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "accounts"
                ]
            },
            "patch": {
                "operationId": "updateAccountById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the account to update in the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The account object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an account associated with a given ID in the ERP system. The update API uses the PATCH HTTP verb, so only those fields provided in the account object will be updated, and those fields not provided will be left aloneUpdating an account with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/activities": {
            "get": {
                "operationId": "getActivities",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned in a paginated fashion.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "format": "int64",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Task"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find activities in the CRM system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all accounts whose name contains the word 'data', the search expression parameter will be <i>where=name like '%data%'</i>. If a search expression is not provided, then the first 200 records will be returned. <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
                "tags": [
                    "activities"
                ]
            },
            "post": {
                "operationId": "createActivity",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Task/Activity object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Account' model are those required to create a new account.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a new activities in the CRM system. Task creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Task' model are those required to create a new account.",
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{id}": {
            "delete": {
                "operationId": "deleteActivityById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the activity to delete from the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an activities associated with a given ID from your CRM system.\nSpecifying an account associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "activities"
                ]
            },
            "get": {
                "operationId": "getActivityById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the activity to retrieve from the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an activity associated with a given ID from the CRM system. Specifying an activity with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "activities"
                ]
            },
            "patch": {
                "operationId": "updateActivityById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the activity to update in the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The activity object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateTask"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an Activity associated with a given ID in the CRM system. The update API uses the PATCH HTTP verb, so only those fields provided in the activity object will be updated, and those fields not provided will be left alone.Updating an activity with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "activities"
                ]
            }
        },
        "/bills": {
            "get": {
                "operationId": "getBills",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all projects are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Bill"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for bills",
                "tags": [
                    "bills"
                ]
            },
            "post": {
                "operationId": "createBill",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The bill",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BillPOST"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Bill"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a bill",
                "tags": [
                    "bills"
                ]
            }
        },
        "/bills/{id}": {
            "delete": {
                "operationId": "deleteBillById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The bill ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a bill",
                "tags": [
                    "bills"
                ]
            },
            "get": {
                "operationId": "getBillById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The bill ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Bill"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a bill",
                "tags": [
                    "bills"
                ]
            },
            "patch": {
                "operationId": "updateBillById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The bill ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The bill",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BillPATCH"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Bill"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a bill",
                "tags": [
                    "bills"
                ]
            }
        },
        "/bulk/query": {
            "post": {
                "operationId": "createBulkQuery",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Url to send the notification to when the Job is completed",
                        "in": "header",
                        "name": "Elements-Async-Callback-Url",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
                        "in": "query",
                        "name": "q",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
                        "in": "query",
                        "name": "lastRunDate",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
                        "in": "query",
                        "name": "from",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
                        "in": "query",
                        "name": "to",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "If this id is supplied the previous job will be continued from where it left off and continue to get all records to the time the new job was started. If this value is passed in - the query parameter is ignored",
                        "in": "query",
                        "name": "continueFromJobId",
                        "required": false,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/BulkQuery"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Create an asynchronous bulk query job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/cancel": {
            "put": {
                "operationId": "replaceBulkCancel",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job to cancel.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/BulkStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Cancel an asynchronous bulk query job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/errors": {
            "get": {
                "operationId": "getBulkErrors",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job to retrieve its errors.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The start page for pagination, which defaults to 1 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The Next page to get from set of bulk results",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Retrieve the errors of a bulk job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/status": {
            "get": {
                "operationId": "getBulkStatus",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job to retrieve its status.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/BulkStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve the status of a bulk job.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{id}/{objectName}": {
            "get": {
                "operationId": "getBulkByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the bulk job",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "text/csv",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Retrieve the results of an asynchronous bulk query.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/bulk/{objectName}": {
            "post": {
                "operationId": "createBulkByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Url to send the notification to when the Job is completed",
                        "in": "header",
                        "name": "Elements-Async-Callback-Url",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object for which data needs to be uploaded.",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Optional JSON MetaData that contains path or format, ex: {\"path\" : <path for the sub resource>, \"format\": <json/csv>}. path - is passed to the endpoint for bulk loading the data into a nested object, Example: /hubs/marketing/lists/{id}/contacts where {id} is the id of the list to upload contacts to. If the Upload format is JSON pass metadata as {\"format\":\"json\"}.",
                        "in": "formData",
                        "name": "metaData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The file of objects to bulk load.",
                        "in": "formData",
                        "name": "file",
                        "type": "file"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "<span class='betaAPI'>beta</span> Upload a file of objects to be bulk uploaded to Marketo.",
                "tags": [
                    "bulk"
                ]
            }
        },
        "/cases": {
            "get": {
                "operationId": "getCases",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all estimates are returned",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Case"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Cases in the ERP System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for estimates last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Cases are returned.",
                "tags": [
                    "cases"
                ]
            },
            "post": {
                "operationId": "createCase",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "The Case object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Case' model are those required to create a new case",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Case"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Case"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an Case in the ERP system.",
                "tags": [
                    "cases"
                ]
            }
        },
        "/cases/{id}": {
            "delete": {
                "operationId": "deleteCaseById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the case to delete in the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an Case associated with a given ID from the Finance system.",
                "tags": [
                    "cases"
                ]
            },
            "get": {
                "operationId": "getCaseById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the case to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Case"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an Case associated with a given ID from the ERP system.",
                "tags": [
                    "cases"
                ]
            },
            "patch": {
                "operationId": "updateCaseById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the case to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The case object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Case"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Case"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Case given a set of partial attributes associated with a given ID in the ERP system.",
                "tags": [
                    "cases"
                ]
            }
        },
        "/cases/{id}/messages": {
            "get": {
                "operationId": "getCasesMessages",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the Internal Id of the case.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all estimates are returned",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Message"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Cases Messages in the ERP System, using the provided CEQL search expression and the case id.",
                "tags": [
                    "cases"
                ]
            }
        },
        "/checks": {
            "get": {
                "operationId": "getChecks",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all vendors are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Check"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Checks in the ERP System, using the provided CEQL search expression.",
                "tags": [
                    "checks"
                ]
            },
            "post": {
                "operationId": "createCheck",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Check object to be created.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CheckCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Check"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Check in the ERP system.",
                "tags": [
                    "checks"
                ]
            }
        },
        "/checks/{id}": {
            "get": {
                "operationId": "getCheckById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the check to retrieve from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Check"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Check associated with a given ID from the ERP system. ",
                "tags": [
                    "checks"
                ]
            },
            "patch": {
                "operationId": "updateCheckById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the check to update from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Check object to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CheckUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Check"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Check associated with a given ID from the ERP system.",
                "tags": [
                    "checks"
                ]
            },
            "delete": {
                "operationId": "deleteCheckById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the check to delete from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a defined Check associated with a given ID from the ERP system.",
                "tags": [
                    "checks"
                ]
            }
        },
        "/classifications": {
            "get": {
                "operationId": "getClassifications",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for name 'Admin', the search expression will be <i>where=name='Admin'</i>. When this parameter is omitted, all classifications are returned as defined by the paging",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Classification"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find classifications in the Finance System.",
                "tags": [
                    "classifications"
                ]
            },
            "post": {
                "operationId": "createClassification",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Classification object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Classification' model are those required to create a new Classification",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Classification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Classification"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an Classification in the Finance system.  Classification creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "classifications"
                ]
            }
        },
        "/classifications/{id}": {
            "delete": {
                "operationId": "deleteClassificationById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the Classification to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an Classification associated with a given ID from the Finance system. Specifying an Classification associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "classifications"
                ]
            },
            "get": {
                "operationId": "getClassificationById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the Classification to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Classification"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an Classification associated with a given ID from the Finance system. Specifying an Classification with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "classifications"
                ]
            },
            "patch": {
                "operationId": "updateClassificationById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the classification to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The classification object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Classification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Classification"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an Classification given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Classification object will be updated, and those fields not provided will be left alone.  Updating an Classification with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "classifications"
                ]
            }
        },
        "/contacts": {
            "get": {
                "operationId": "getContacts",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for contacts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all contacts are returned in a paginated fashion.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Specify if deleted contacts should be included in the search.",
                        "in": "query",
                        "name": "includeDeleted",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Contact"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find contacts in the ERP system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all contacts whose name contains the word 'jones', the search expression parameter will be <i>where=name='%jones%'</i>. If a search expression is not provided, then the first 200 records will be returned. <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
                "tags": [
                    "contacts"
                ]
            },
            "post": {
                "operationId": "createContact",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Contact object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a new contact in the ERP system. Contact creation will flow through Cloud Elements to your ERP service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
                "tags": [
                    "contacts"
                ]
            }
        },
        "/contacts/{id}": {
            "delete": {
                "operationId": "deleteContactById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the contact to delete from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a contact associated with a given ID from your ERP system.\nSpecifying a contact associated with a given ID that does not exist will result in an error message. .",
                "tags": [
                    "contacts"
                ]
            },
            "get": {
                "operationId": "getContactById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the contact to retrieve from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a contact associated with a given ID from the ERP system.Specifying a contact with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "contacts"
                ]
            },
            "patch": {
                "operationId": "updateContactById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the contact to update in the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The contact object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update the contact associated with the given ID in the ERP system. The update API uses the PATCH HTTP verb, so only those fields provided in the contact object will be updated, and those fields not provided will be left aloneUpdating a contact with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "contacts"
                ]
            }
        },
        "/credit-memos": {
            "get": {
                "operationId": "getCreditMemos",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all vendors are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CreditMemo"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Credit Memos in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Credit Memo last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Credit Memos are returned.",
                "tags": [
                    "credit-memos"
                ]
            },
            "post": {
                "operationId": "createCreditMemo",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Credit Memo object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Customer' model are those required to create a new credit memo",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreditMemo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CreditMemo"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a CreditMemo in the Finance system.  CreditMemo creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "credit-memos"
                ]
            }
        },
        "/credit-memos/{id}": {
            "get": {
                "operationId": "getCreditMemoById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the credit memo to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CreditMemo"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Credit Memo associated with a given ID from the Finance system. Specifying a credit memo with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "credit-memos"
                ]
            },
            "patch": {
                "operationId": "updateCreditMemoById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the credit memo to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CreditMemo object to be updated.<br>With the exception of the 'id' field, the required fields indicated in the 'Customer' model are those required to create a new Credit Memo",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreditMemo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CreditMemo"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Credit Memo associated with a given ID from the Finance system. Specifying a credit memo with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "credit-memos"
                ]
            },
            "delete": {
                "operationId": "deleteCreditMemoById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the credit term to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a defined Credit Memo associated with a given ID from the Finance system. Specifying a credit memo with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "credit-memos"
                ]
            }
        },
        "/credit-terms": {
            "get": {
                "operationId": "getCreditTerms",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The start page for pagination, which defaults to 1 if not supplied",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CreditTerm"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Credit Terms in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for credit terms last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Credit Terms are returned.",
                "tags": [
                    "credit-terms"
                ]
            }
        },
        "/credit-terms/{id}": {
            "get": {
                "operationId": "getCreditTermById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the credit term to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CreditTerm"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Credit Term Lookup associated with a given ID from the Finance system. Specifying a credit term with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "credit-terms"
                ]
            }
        },
        "/custom-fields": {
            "get": {
                "operationId": "getCustomFields",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "format": "int64",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CustomField"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find contacts in the CRM system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all contacts whose name contains the word 'jones', the search expression parameter will be <i>where=name='%jones%'</i>. If a search expression is not provided, then the first 200 records will be returned. <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
                "tags": [
                    "custom-fields"
                ]
            }
        },
        "/custom-record-types": {
            "get": {
                "operationId": "getCustomRecordTypes",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "format": "int64",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CustomRecordRef"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find custom record types in the CRM system.",
                "tags": [
                    "custom-record-types"
                ]
            }
        },
        "/custom-record-types/{typeId}/custom-record-fields": {
            "get": {
                "operationId": "getCustomRecordTypesCustomRecordFields",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Internal Id of the custom record type.",
                        "in": "path",
                        "name": "typeId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CustomRecordCustomField"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find custom records in the CRM system.",
                "tags": [
                    "custom-record-types"
                ]
            }
        },
        "/custom-record-types/{typeId}/custom-records": {
            "get": {
                "operationId": "getCustomRecordTypesCustomRecords",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Internal Id of the custom record type.",
                        "in": "path",
                        "name": "typeId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CustomRecord"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find custom records in the CRM system.",
                "tags": [
                    "custom-record-types"
                ]
            },
            "post": {
                "operationId": "createCustomRecordTypeCustomRecord",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Internal Id of the custom record type.",
                        "in": "path",
                        "name": "typeId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CustomRecord object to be created.<br>With the exception of the 'internalId' field, the required fields indicated in the 'CustomRecord' model are those required to create a new CustomRecord.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomRecord"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CustomRecord"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a new Custom Record in the CRM system. ",
                "tags": [
                    "custom-record-types"
                ]
            }
        },
        "/custom-record-types/{typeId}/custom-records/{id}": {
            "delete": {
                "operationId": "deleteCustomRecordTypesCustomRecordById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Internal Id of the custom record type.",
                        "in": "path",
                        "name": "typeId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the custom record to delete from the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a Custom Record with the given internal id.",
                "tags": [
                    "custom-record-types"
                ]
            },
            "get": {
                "operationId": "getCustomRecordTypesCustomRecordById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element <token>, User <user secret>'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Internal Id of the custom record type.",
                        "in": "path",
                        "name": "typeId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the CustomRecord to retrieve from the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CustomRecord"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a CustomRecord associated with a given ID from the CRM system.",
                "tags": [
                    "custom-record-types"
                ]
            },
            "patch": {
                "operationId": "updateCustomRecordTypesCustomRecordById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Internal Id of the custom record type.",
                        "in": "path",
                        "name": "typeId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the CustomRecord to update in the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CustomRecord object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateCustomRecord"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CustomRecord"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update the CustomRecord associated with the given ID in the CRM system.",
                "tags": [
                    "custom-record-types"
                ]
            }
        },
        "/customer-refunds": {
            "get": {
                "operationId": "getCustomerRefunds",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Customer Refund last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all customer refunds are returned",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CustomerRefund"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Customer Refunds in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query.",
                "tags": [
                    "customer-refunds"
                ]
            },
            "post": {
                "operationId": "createCustomerRefund",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CustomerRefund object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'CustomerRefund' model are those required to create a new customer refund",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomerRefund"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CustomerRefund"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Customer refund in the Finance system.  Customer creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "customer-refunds"
                ]
            }
        },
        "/customer-refunds/{id}": {
            "delete": {
                "operationId": "deleteCustomerRefundById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the customer refund to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a customer refund associated with a given ID from the Finance system. This marks the customer as inactive.",
                "tags": [
                    "customer-refunds"
                ]
            },
            "get": {
                "operationId": "getCustomerRefundById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the customer refund to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CustomerRefund"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a Customer refund associated with a given ID from the Finance system. Specifying a Customer with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "customer-refunds"
                ]
            },
            "patch": {
                "operationId": "updateCustomerRefundById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the customer refund to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The customer refund object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomerRefund"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/CustomerRefund"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Customer Refund given a set of partial attributes associated with a given ID in the Finance system.",
                "tags": [
                    "customer-refunds"
                ]
            }
        },
        "/customers": {
            "get": {
                "operationId": "getCustomers",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all customers are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Customer"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Customers in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Customers last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Customers are returned.",
                "tags": [
                    "customers"
                ]
            },
            "post": {
                "operationId": "createCustomer",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Customer object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Customer' model are those required to create a new customer",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomerPOST"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Customer in the Finance system.  Customer creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "customers"
                ]
            }
        },
        "/customers/{id}": {
            "delete": {
                "operationId": "deleteCustomerById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the customer to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a customer associated with a given ID from the Finance system. This marks the customer as inactive.  Specifying a Customer associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "customers"
                ]
            },
            "get": {
                "operationId": "getCustomerById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the customer to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a Customer associated with a given ID from the Finance system. Specifying a Customer with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "customers"
                ]
            },
            "patch": {
                "operationId": "updateCustomerById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the customer to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The customer object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomerPATCH"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Customer given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Customer object will be updated, and those fields not provided will be left alone.  Updating an Customer with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "customers"
                ]
            }
        },
        "/departments": {
            "get": {
                "operationId": "getDepartments",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for name 'Admin', the search expression will be <i>where=name='Admin'</i>. When this parameter is omitted, all departments are returned as defined by the paging",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Department"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find departments in the Finance System.",
                "tags": [
                    "departments"
                ]
            },
            "post": {
                "operationId": "createDepartment",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Department object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Department' model are those required to create a new Department",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DepartmentPOST"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an Department in the Finance system.  Department creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "departments"
                ]
            }
        },
        "/departments/{id}": {
            "delete": {
                "operationId": "deleteDepartmentById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the Department to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an Department associated with a given ID from the Finance system. Specifying an Department associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "departments"
                ]
            },
            "get": {
                "operationId": "getDepartmentById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the Department to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an Department associated with a given ID from the Finance system. Specifying an Department with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "departments"
                ]
            },
            "patch": {
                "operationId": "updateDepartmentById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the Department to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Department object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an Department given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Department object will be updated, and those fields not provided will be left alone.  Updating an Department with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "departments"
                ]
            }
        },
        "/employees": {
            "get": {
                "operationId": "getEmployees",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all employees are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Employee"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Employees in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for employees last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Employees are returned.",
                "tags": [
                    "employees"
                ]
            },
            "post": {
                "operationId": "createEmployee",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Employee object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Employee' model are those required to create a new employee",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an Employee in the Finance system.  Employee creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "employees"
                ]
            }
        },
        "/employees/{id}": {
            "delete": {
                "operationId": "deleteEmployeeById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the employee to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an Employee associated with a given ID from the Finance system. This marks the employee as inactive.  Specifying an Employee associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "employees"
                ]
            },
            "get": {
                "operationId": "getEmployeeById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the employee to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an Employee associated with a given ID from the Finance system. Specifying an Employee with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "employees"
                ]
            },
            "patch": {
                "operationId": "updateEmployeeById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the employee to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The employee object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an Employee given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Employee object will be updated, and those fields not provided will be left alone.  Updating an Employee with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "employees"
                ]
            }
        },
        "/estimates": {
            "get": {
                "operationId": "getEstimates",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all estimates are returned",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Estimate"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Estimates in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for estimates last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Estimates are returned.",
                "tags": [
                    "estimates"
                ]
            },
            "post": {
                "operationId": "createEstimate",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "description": "The Estimate object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Estimate' model are those required to create a new estimate",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Estimate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Estimate"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an Estimate in the ERP system.",
                "tags": [
                    "estimates"
                ]
            }
        },
        "/estimates/{id}": {
            "delete": {
                "operationId": "deleteEstimateById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the estimate to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an Estimate associated with a given ID from the Finance system. This marks the employee as inactive.  Specifying a Estimate associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "estimates"
                ]
            },
            "get": {
                "operationId": "getEstimateById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the employee to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Estimate"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an Estimate associated with a given ID from the ERP system. Specifying an Estimate with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "estimates"
                ]
            },
            "patch": {
                "operationId": "updateEstimateById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the estimate to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The estimate object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Estimate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Estimate"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an Estimate given a set of partial attributes associated with a given ID in the ERP system. The update API uses the PATCH HTTP verb, so only those fields provided in the Employee object will be updated, and those fields not provided will be left alone.  Updating an Estimate with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "estimates"
                ]
            }
        },
        "/expense-reports": {
            "get": {
                "operationId": "getExpenseReports",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all reports are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ExpenseReport"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find ExpenseReports in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for ExpenseReports last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all ExpenseReports are returned.",
                "tags": [
                    "expense-reports"
                ]
            },
            "post": {
                "operationId": "createExpenseReport",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ExpenseReport object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'ExpenseReport' model are those required to create a new ExpenseReport",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExpenseReportPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ExpenseReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create or initiate a ExpenseReport in the Finance system.  ExpenseReport creation/initiation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "expense-reports"
                ]
            }
        },
        "/expense-reports/{id}": {
            "delete": {
                "operationId": "deleteExpenseReportById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the ExpenseReport to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a ExpenseReport associated with a given ID from the Finance system. Specifying a ExpenseReport associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "expense-reports"
                ]
            },
            "get": {
                "operationId": "getExpenseReportById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the ExpenseReport to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ExpenseReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined ExpenseReport associated with a given ID from the Finance system. Specifying a ExpenseReport with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "expense-reports"
                ]
            },
            "patch": {
                "operationId": "updateExpenseReportById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the ExpenseReport to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ExpenseReport object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExpenseReportPut"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ExpenseReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a ExpenseReport given a set of partial ExpenseReport attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the VendorPayment object will be updated, and those fields not provided will be left alone.  Updating a ExpenseReport with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "expense-reports"
                ]
            }
        },
        "/files": {
            "post": {
                "operationId": "createFile",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The optional id of the folder to create the file in.",
                        "in": "query",
                        "name": "folderId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The file to upload.",
                        "in": "formData",
                        "name": "file",
                        "type": "file"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "summary": "Create a File",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/RecordRef"
                        },
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "tags": [
                    "files"
                ]
            }
        },
        "/files/{id}": {
            "delete": {
                "operationId": "deleteFileById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The File ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a File",
                "tags": [
                    "files"
                ]
            },
            "get": {
                "operationId": "getFileById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The File ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Fetch a File",
                "tags": [
                    "files"
                ]
            }
        },
        "/folders": {
            "get": {
                "operationId": "getFolders",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Folder Search query as a where clause",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Folder"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Gets all the folders in the File Cabinet",
                "tags": [
                    "folders"
                ]
            },
            "post": {
                "operationId": "createFolder",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Folder Object",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FolderCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/VendorBill"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Folder",
                "tags": [
                    "folders"
                ]
            }
        },
        "/folders/{id}": {
            "get": {
                "operationId": "getFolderById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the folder to fetch all the contents",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Gets Details of the given Folder",
                "tags": [
                    "folders"
                ]
            },
            "delete": {
                "operationId": "deleteFolderById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the folder",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete the given Folder",
                "tags": [
                    "folders"
                ]
            },
            "patch": {
                "operationId": "updateFolderById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the folder",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Folder Object",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FolderCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update the given Folder",
                "tags": [
                    "folders"
                ]
            }
        },
        "/folders/{id}/files": {
            "get": {
                "operationId": "getFoldersFiles",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the folder to fetch all the contents",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/File"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Gets all the folders in the File Cabinet",
                "tags": [
                    "folders"
                ]
            }
        },
        "/folders/{id}/folders": {
            "get": {
                "operationId": "getFoldersFolders",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the folder to fetch all the contents",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Folder"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Gets all the folders in the File Cabinet",
                "tags": [
                    "folders"
                ]
            }
        },
        "/invoices": {
            "get": {
                "operationId": "getInvoices",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all invoices are returned as defined by the paging",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Invoice"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Invoices in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Invoices last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Invoices are returned.",
                "tags": [
                    "invoices"
                ]
            },
            "post": {
                "operationId": "createInvoice",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Invoice object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Invoice' model are those required to create a new invoice",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateInvoice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Invoice"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an Invoice in the Finance system.  Invoice creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "invoices"
                ]
            }
        },
        "/invoices/{id}": {
            "delete": {
                "operationId": "deleteInvoiceById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the invoice to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an Invoice associated with a given ID from the Finance system. Specifying an Invoice associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "invoices"
                ]
            },
            "get": {
                "operationId": "getInvoiceById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the invoice to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Invoice"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an Invoice associated with a given ID from the Finance system. Specifying an Invoice with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "invoices"
                ]
            },
            "patch": {
                "operationId": "updateInvoiceById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the invoice to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The invoice object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateInvoice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Invoice"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an Invoice given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Invoice object will be updated, and those fields not provided will be left alone.  Updating an Invoice with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "invoices"
                ]
            }
        },
        "/items/{id}": {
            "get": {
                "operationId": "getItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the return authorization to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve any Item by Id",
                "tags": [
                    "items"
                ]
            }
        },
        "/journal-entries": {
            "get": {
                "operationId": "getJournalEntries",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/JournalEntry"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Journal Entries in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Ledger Accounts last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Ledger Accounts are returned.",
                "tags": [
                    "journal-entries"
                ]
            },
            "post": {
                "operationId": "createJournalEntry",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Journal Entry object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'JournalEntry' model are those required to create a new journal entry",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JournalEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/JournalEntry"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Journal Entry in the Finance system.  Journal Entry creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "journal-entries"
                ]
            }
        },
        "/journal-entries/{id}": {
            "delete": {
                "operationId": "deleteJournalEntryById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the journal entry to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a Journal Entry associated with a given ID from the Finance system. This deletes the Journal Entry.  Specifying a Journal Entry associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "journal-entries"
                ]
            },
            "get": {
                "operationId": "getJournalEntryById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the journal entry to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/JournalEntry"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a Journal Entry associated with a given ID from the Finance system. Specifying a Journal Entry with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "journal-entries"
                ]
            },
            "patch": {
                "operationId": "updateJournalEntryById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the journal entry to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The journal entry object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JournalEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/JournalEntry"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Journal Entry given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Customer object will be updated, and those fields not provided will be left alone.  Updating an Customer with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "journal-entries"
                ]
            }
        },
        "/leads": {
            "get": {
                "operationId": "getLeads",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for leads last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all leads are returned in a paginated fashion.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Specify if deleted leads should be included in the search.",
                        "in": "query",
                        "name": "includeDeleted",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Customer"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find leads in the ERP system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all leads whose name contains the word 'data', the search expression parameter will be <i>where=name like '%data%'</i>. If a search expression is not provided, then the first 200 records will be returned. <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
                "tags": [
                    "leads"
                ]
            },
            "post": {
                "operationId": "createLead",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Lead object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Lead' model are those required to create a new lead.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Lead"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a new lead in the ERP system. Lead creation will flow through Cloud Elements to your ERP service. With the exception of the 'id' field, the required fields indicated in the 'Lead' model are those required to create a new lead.",
                "tags": [
                    "leads"
                ]
            }
        },
        "/leads/{id}": {
            "delete": {
                "operationId": "deleteLeadById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the lead to delete from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a lead associated with a given ID from the ERP system.  Specifying a leadassociated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "leads"
                ]
            },
            "get": {
                "operationId": "getLeadById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the lead to retrieve from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a lead associated with a given ID from the ERP system. Specifying a lead with a  specified ID that does not exist will result in an error response.",
                "tags": [
                    "leads"
                ]
            },
            "patch": {
                "operationId": "updateLeadById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the lead to update in the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The lead object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Lead"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a lead associated with the given ID in the ERP system. The update API uses the PATCH HTTP verb, so only those fields provided in the lead object will be updated, and those fields not provided will be left alone.Updating a lead with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "leads"
                ]
            }
        },
        "/ledger-accounts": {
            "get": {
                "operationId": "getLedgerAccounts",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/LedgerAccount"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Ledger Accounts in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Ledger Accounts last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Ledger Accounts are returned.",
                "tags": [
                    "ledger-accounts"
                ]
            },
            "post": {
                "operationId": "createLedgerAccount",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Create a Ledger Account with the given schema",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LedgerAccountCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/LedgerAccount"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Ledger Accounts in the Finance System",
                "tags": [
                    "ledger-accounts"
                ]
            }
        },
        "/ledger-accounts/{id}": {
            "get": {
                "operationId": "getLedgerAccountById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the ledger account to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/LedgerAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a Ledger Account associated with a given ID from the Finance system. Specifying a Ledger Account method with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "ledger-accounts"
                ]
            },
            "delete": {
                "operationId": "deleteLedgerAccountById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the ledger account to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "DELETE a Ledger Account associated with a given ID from the Finance system.",
                "tags": [
                    "ledger-accounts"
                ]
            },
            "patch": {
                "operationId": "updateLedgerAccountById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the ledger account to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Update a Ledger Account with the given schema",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LedgerAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/LedgerAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Ledger Account associated with a given ID from the Finance system.",
                "tags": [
                    "ledger-accounts"
                ]
            }
        },
        "/locations": {
            "get": {
                "operationId": "getLocations",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for name 'Admin', the search expression will be <i>where=name='Admin'</i>. When this parameter is omitted, all locations are returned as defined by the paging",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Location"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find locations in the Finance System.",
                "tags": [
                    "locations"
                ]
            },
            "post": {
                "operationId": "createLocation",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Location object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Location' model are those required to create a new Location",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an Location in the Finance system.  Location creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "locations"
                ]
            }
        },
        "/locations/{id}": {
            "delete": {
                "operationId": "deleteLocationById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the Location to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an Location associated with a given ID from the Finance system. Specifying an Location associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "locations"
                ]
            },
            "get": {
                "operationId": "getLocationById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the Location to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an Location associated with a given ID from the Finance system. Specifying an Location with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "locations"
                ]
            },
            "patch": {
                "operationId": "updateLocationById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the Location to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Location object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an Location given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Location object will be updated, and those fields not provided will be left alone.  Updating an Location with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "locations"
                ]
            }
        },
        "/lookups/{fieldName}": {
            "get": {
                "operationId": "getLookupByFieldName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the field to retrieve all possible values for, from the ERP system.",
                        "in": "path",
                        "name": "fieldName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Values"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve all possible values for a selection field from the Finance system. Specifying a field that does not exist or is not a picklist will result in an error response.",
                "tags": [
                    "lookups"
                ]
            }
        },
        "/lot-numbered-assembly-items": {
            "get": {
                "operationId": "getLotNumberedAssemblyItems",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/LotNumberedAssemblyItem"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find LotNumberedAssemblyItem or Services in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Products or Services last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Products or Services are returned.",
                "tags": [
                    "lot-numbered-assembly-items"
                ]
            },
            "post": {
                "operationId": "createLotNumberedAssemblyItem",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The LotNumberedAssemblyItem object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Product' model are those required to create a new product",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LotNumberedAssemblyItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/LotNumberedAssemblyItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a LotNumberedAssemblyItem in the Finance system.  Product creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "lot-numbered-assembly-items"
                ]
            }
        },
        "/lot-numbered-assembly-items/{id}": {
            "delete": {
                "operationId": "deleteLotNumberedAssemblyItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the LotNumberedAssemblyItem to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a LotNumberedAssemblyItem associated with a given ID from the Finance system. This marks the product as inactive.  Specifying a Product associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "lot-numbered-assembly-items"
                ]
            },
            "get": {
                "operationId": "getLotNumberedAssemblyItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the LotNumberedAssemblyItem or service to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/LotNumberedAssemblyItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined LotNumberedAssemblyItem or Service associated with a given ID from the Finance system. Specifying a Product or Service with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "lot-numbered-assembly-items"
                ]
            },
            "patch": {
                "operationId": "updateLotNumberedAssemblyItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the product to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The LotNumberedAssemblyItem object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LotNumberedAssemblyItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/LotNumberedAssemblyItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a  LotNumberedAssemblyItem given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Product object will be updated, and those fields not provided will be left alone.  Updating an Product with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "lot-numbered-assembly-items"
                ]
            }
        },
        "/lot-numbered-inventory-items": {
            "get": {
                "operationId": "getLotNumberedInventoryItems",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/LotNumberedInventoryItem"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find LotNumberedInventoryItem or Services in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Products or Services last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Products or Services are returned.",
                "tags": [
                    "lot-numbered-inventory-items"
                ]
            },
            "post": {
                "operationId": "createLotNumberedInventoryItem",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The LotNumberedInventoryItem object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Product' model are those required to create a new product",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LotNumberedInventoryItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/LotNumberedInventoryItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a LotNumberedInventoryItem in the Finance system.  Product creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "lot-numbered-inventory-items"
                ]
            }
        },
        "/lot-numbered-inventory-items/{id}": {
            "delete": {
                "operationId": "deleteLotNumberedInventoryItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the LotNumberedAssemblyItem to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a LotNumberedInventoryItem associated with a given ID from the Finance system. This marks the product as inactive.  Specifying a Product associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "lot-numbered-inventory-items"
                ]
            },
            "get": {
                "operationId": "getLotNumberedInventoryItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the LotNumberedInventoryItem or service to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/LotNumberedInventoryItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined LotNumberedInventoryItem or Service associated with a given ID from the Finance system. Specifying a Product or Service with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "lot-numbered-inventory-items"
                ]
            },
            "patch": {
                "operationId": "updateLotNumberedInventoryItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the LotNumberedInventoryItem to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The LotNumberedInventoryItem object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LotNumberedInventoryItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/LotNumberedInventoryItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a  LotNumberedInventoryItem given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Product object will be updated, and those fields not provided will be left alone.  Updating an Product with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "lot-numbered-inventory-items"
                ]
            }
        },
        "/non-inventory-resale-items": {
            "get": {
                "operationId": "getNonInventoryResaleItems",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/NonInventoryResaleItem"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find NonInventoryResaleItems or Services in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Products or Services last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Products or Services are returned.",
                "tags": [
                    "non-inventory-resale-items"
                ]
            },
            "post": {
                "operationId": "createNonInventoryResaleItem",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The NonInventoryResaleItem object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Product' model are those required to create a new product",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NonInventoryResaleItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/NonInventoryResaleItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a NonInventoryResaleItem in the Finance system.  Product creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "non-inventory-resale-items"
                ]
            }
        },
        "/non-inventory-resale-items/{id}": {
            "delete": {
                "operationId": "deleteNonInventoryResaleItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the NonInventoryResaleItem to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a NonInventoryResaleItem associated with a given ID from the Finance system. This marks the product as inactive.  Specifying a Product associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "non-inventory-resale-items"
                ]
            },
            "get": {
                "operationId": "getNonInventoryResaleItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the NonInventoryResaleItem or service to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/NonInventoryResaleItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined NonInventoryResaleItem or Service associated with a given ID from the Finance system. Specifying a Product or Service with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "non-inventory-resale-items"
                ]
            },
            "patch": {
                "operationId": "updateNonInventoryResaleItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the product to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The NonInventoryResaleItem object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NonInventoryResaleItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/NonInventoryResaleItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a NonInventoryResaleItem given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Product object will be updated, and those fields not provided will be left alone.  Updating an Product with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "non-inventory-resale-items"
                ]
            }
        },
        "/objects": {
            "get": {
                "operationId": "getObjects",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Get a list of all the available objects.",
                "tags": [
                    "objects"
                ]
            }
        },
        "/objects/{objectName}/metadata": {
            "get": {
                "operationId": "getObjectsObjectNameMetadata",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/objectsMetadata"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Get a list of all the field for an object.",
                "tags": [
                    "objects"
                ]
            }
        },
        "/opportunities": {
            "get": {
                "operationId": "getOpportunities",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for opportunities last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all opportunities are returned in a paginated fashion.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Specify if deleted opportunities should be included in the search.",
                        "in": "query",
                        "name": "includeDeleted",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Opportunity"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find opportunities in the ERP system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all opportunities whose name contains the word 'data', the search expression parameter will be <i>where=name like '%data%'</i>. If a search expression is not provided, then the first 200 records will be returned. <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
                "tags": [
                    "opportunities"
                ]
            },
            "post": {
                "operationId": "createOpportunity",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Opportunity object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Opportunity' model are those required to create a new opportunity.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Opportunity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Opportunity"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a new opportunity in the ERP system. Opportunity creation will flow through Cloud Elements to your ERP service. With the exception of the 'id' field, the required fields indicated in the 'Opportunity' model are those required to create a new opportunity.",
                "tags": [
                    "opportunities"
                ]
            }
        },
        "/opportunities/{id}": {
            "delete": {
                "operationId": "deleteOpportunityById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the opportunity to delete from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an opportunity associated with a given ID from the ERP system.  Specifying an opportunity associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "opportunities"
                ]
            },
            "get": {
                "operationId": "getOpportunityById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the opportunity to retrieve from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Opportunity"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an opportunity associated with a given ID from the ERP system.Specifying an opportunity with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "opportunities"
                ]
            },
            "patch": {
                "operationId": "updateOpportunityById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the opportunity to update in the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The opportunity object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Opportunity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Opportunity"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update the opportunity associated with the given ID in the ERP system. The update API uses the PATCH HTTP verb, so only those fields provided in the opportunity object will be updated, and those fields not provided will be left alone.Updating an opportunity with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "opportunities"
                ]
            }
        },
        "/opportunities/{id}/activities": {
            "get": {
                "operationId": "getOpportunitiesActivities",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the opportunity to retrieve from the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned in a paginated fashion.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "format": "int64",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an opportunity associated with a given ID from the CRM system. Specifying an opportunity with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "opportunities"
                ]
            }
        },
        "/payment-methods": {
            "get": {
                "operationId": "getPaymentMethods",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PaymentMethod"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Payment Methods in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for payments last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all payments are returned.",
                "tags": [
                    "payment-methods"
                ]
            }
        },
        "/payment-methods/{id}": {
            "get": {
                "operationId": "getPaymentMethodById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the payment method to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/PaymentMethod"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Payment Method associated with a given ID from the Finance system. Specifying a payment method with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "payment-methods"
                ]
            }
        },
        "/payments": {
            "get": {
                "operationId": "getPayments",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all payments are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Payment"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Payments in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for payments last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all payments are returned.",
                "tags": [
                    "payments"
                ]
            },
            "post": {
                "operationId": "createPayment",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Payment object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Payment' model are those required to create a new payment",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create or initiate a payment in the Finance system.  Payment creation/initiation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "payments"
                ]
            }
        },
        "/payments/{id}": {
            "delete": {
                "operationId": "deletePaymentById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the payment to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a payment associated with a given ID from the Finance system. Specifying a payment associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "payments"
                ]
            },
            "get": {
                "operationId": "getPaymentById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the payment to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Payment associated with a given ID from the Finance system. Specifying a payment with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "payments"
                ]
            },
            "patch": {
                "operationId": "updatePaymentById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the payment to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The payment object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PaymentUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Payment given a set of partial payment attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the payment object will be updated, and those fields not provided will be left alone.  Updating a payment with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "payments"
                ]
            }
        },
        "/payroll-items": {
            "get": {
                "operationId": "getPayrollItems",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "format": "int64",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PayrollItem"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Payroll Items in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for employees last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'.",
                "tags": [
                    "payroll-items"
                ]
            },
            "post": {
                "operationId": "createPayrollItem",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Payroll Item object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'PayrollItem' model are those required to create a new payroll item",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PayrollItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an Employee in the Finance system.  Employee creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "payroll-items"
                ]
            }
        },
        "/payroll-items/{id}": {
            "get": {
                "operationId": "getPayrollItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the payroll item to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/PayrollItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an Payroll Item associated with a given ID from the Finance system.",
                "tags": [
                    "payroll-items"
                ]
            },
            "delete": {
                "operationId": "deletePayrollItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the payroll item to delete from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an Payroll Item associated with a given ID from the Finance system.",
                "tags": [
                    "payroll-items"
                ]
            },
            "patch": {
                "operationId": "updatePayrollItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the payroll-item to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The payroll-item object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PayrollItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/PayrollItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an Payroll Item given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Employee object will be updated, and those fields not provided will be left alone.",
                "tags": [
                    "payroll-items"
                ]
            }
        },
        "/ping": {
            "get": {
                "operationId": "getPing",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Pong"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
                "tags": [
                    "ping"
                ]
            }
        },
        "/posting-periods": {
            "get": {
                "operationId": "getPostingPeriods",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all vendors are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/AccountingPeriod"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Account Posting Periods in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Account Posting Period last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'.",
                "tags": [
                    "posting-periods"
                ]
            }
        },
        "/posting-periods/{id}": {
            "get": {
                "operationId": "getPostingPeriodById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the Account Posting Period to retrieve from the ERP system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/AccountingPeriod"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Accounting Posting Period associated with a given ID from the Finance system. ",
                "tags": [
                    "posting-periods"
                ]
            }
        },
        "/products": {
            "get": {
                "operationId": "getProducts",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Product"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Products or Services in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Products or Services last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Products or Services are returned.",
                "tags": [
                    "products"
                ]
            },
            "post": {
                "operationId": "createProduct",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Product object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Product' model are those required to create a new product",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Product in the Finance system.  Product creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "products"
                ]
            }
        },
        "/products/{id}": {
            "delete": {
                "operationId": "deleteProductById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the product to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a product associated with a given ID from the Finance system. This marks the product as inactive.  Specifying a Product associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "products"
                ]
            },
            "get": {
                "operationId": "getProductById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the product or service to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Product or Service associated with a given ID from the Finance system. Specifying a Product or Service with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "products"
                ]
            },
            "patch": {
                "operationId": "updateProductById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the product to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The product object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Product given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Product object will be updated, and those fields not provided will be left alone.  Updating an Product with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "products"
                ]
            }
        },
        "/projects": {
            "get": {
                "operationId": "getProjects",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all projects are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Project"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for projects",
                "tags": [
                    "projects"
                ]
            },
            "post": {
                "operationId": "createProject",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The project",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a project",
                "tags": [
                    "projects"
                ]
            }
        },
        "/projects/{id}": {
            "delete": {
                "operationId": "deleteProjectById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The project ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a project",
                "tags": [
                    "projects"
                ]
            },
            "get": {
                "operationId": "getProjectById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The project ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a project",
                "tags": [
                    "projects"
                ]
            },
            "patch": {
                "operationId": "updateProjectById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The project ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The project",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a project",
                "tags": [
                    "projects"
                ]
            }
        },
        "/prospects": {
            "get": {
                "operationId": "getProspects",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for prospects last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all prospects are returned in a paginated fashion.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Specify if deleted prospects should be included in the search.",
                        "in": "query",
                        "name": "includeDeleted",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "format": "int64",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Customer"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find prospects in the CRM system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all prospects whose name contains the word 'data', the search expression parameter will be <i>where=name like '%data%'</i>. If a search expression is not provided, then the first 200 records will be returned. <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
                "tags": [
                    "prospects"
                ]
            },
            "post": {
                "operationId": "createProspect",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Customer object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Customer' model are those required to create a new prospect.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a new prospect in the CRM system. Customer creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Customer' model are those required to create a new prospect.",
                "tags": [
                    "prospects"
                ]
            }
        },
        "/prospects/{id}": {
            "delete": {
                "operationId": "deleteProspectById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the prospect to delete from the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a prospect associated with a given ID from the CRM system.  Specifying a prospect associated with a given ID that does not exist will result in an error message. \n",
                "tags": [
                    "prospects"
                ]
            },
            "get": {
                "operationId": "getProspectById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the prospect to retrieve from the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a prospect associated with a given ID from the CRM system. Specifying a prospect with a  specified ID that does not exist will result in an error response.",
                "tags": [
                    "prospects"
                ]
            },
            "patch": {
                "operationId": "updateProspectById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the prospect to update in the CRM system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The prospect object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a prospect associated with the given ID in the CRM system. The update API uses the PATCH HTTP verb, so only those fields provided in the prospect object will be updated, and those fields not provided will be left alone.Updating a prospect with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "prospects"
                ]
            }
        },
        "/purchase-orders": {
            "get": {
                "operationId": "getPurchaseOrders",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all purchase orders are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PurchaseOrder"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Purchase Orders in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Purchase Orders last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Purchase Orders are returned.",
                "tags": [
                    "purchase-orders"
                ]
            },
            "post": {
                "operationId": "createPurchaseOrder",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The PurchaseOrder object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'PurchaseOrder' model are those required to create a new purchase order",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PurchaseOrder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/PurchaseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Purchase Order in the Finance system.  Purchase Order creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "purchase-orders"
                ]
            }
        },
        "/purchase-orders/{id}": {
            "delete": {
                "operationId": "deletePurchaseOrderById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the purchase order to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a Purchase Order associated with a given ID from the Finance system. Specifying a Purchase Order associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "purchase-orders"
                ]
            },
            "get": {
                "operationId": "getPurchaseOrderById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the purchase order to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/PurchaseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Purchase Order associated with a given ID from the Finance system. Specifying a Purchase Order with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "purchase-orders"
                ]
            },
            "patch": {
                "operationId": "updatePurchaseOrderById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the purchase order to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The PurchaseOrder object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PurchaseOrder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/PurchaseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Purchase Order given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the payment object will be updated, and those fields not provided will be left alone.  Updating a Purchase Order with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "purchase-orders"
                ]
            }
        },
        "/return-authorizations": {
            "get": {
                "operationId": "getReturnAuthorizations",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all return authorizations are returned",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ReturnAuthorization"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Return Authorizations in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Return Authorization last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Return Authorizations are returned.",
                "tags": [
                    "return-authorizations"
                ]
            },
            "post": {
                "operationId": "createReturnAuthorization",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The return authorization object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'ReturnAuthorization' model are those required to create a new return authorization",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReturnAuthorization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ReturnAuthorization"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a CreditMemo in the Finance system.  CreditMemo creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "return-authorizations"
                ]
            }
        },
        "/return-authorizations/{id}": {
            "get": {
                "operationId": "getReturnAuthorizationById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the return authorization to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ReturnAuthorization"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Return Authorization",
                "tags": [
                    "return-authorizations"
                ]
            },
            "patch": {
                "operationId": "updateReturnAuthorizationById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the return authorization to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Return Authorization object to be updated.<br>With the exception of the 'id' field, the required fields indicated in the 'ReturnAuthorization' model are those required to create a new Return Authorization",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReturnAuthorization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ReturnAuthorization"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Credit Memo associated with a given ID from the Finance system. Specifying a credit memo with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "return-authorizations"
                ]
            },
            "delete": {
                "operationId": "deleteReturnAuthorizationById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the credit term to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a defined Return Authorization associated with a given ID from the Finance system. Specifying a return authorization with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "return-authorizations"
                ]
            }
        },
        "/sales-orders": {
            "get": {
                "operationId": "getSalesOrders",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for sales orders last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all purchase orders are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/SalesOrder"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Sales Orders in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Purchase Orders last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Purchase Orders are returned.",
                "tags": [
                    "sales-orders"
                ]
            },
            "post": {
                "operationId": "createSalesOrder",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Sales Order object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'PurchaseOrder' model are those required to create a new purchase order",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalesOrder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SalesOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Purchase Order in the Finance system.  Purchase Order creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "sales-orders"
                ]
            }
        },
        "/sales-orders/{id}": {
            "delete": {
                "operationId": "deleteSalesOrderById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the purchase order to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a Sales Order associated with a given ID from the Finance system. Specifying a Purchase Order associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "sales-orders"
                ]
            },
            "get": {
                "operationId": "getSalesOrderById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the sales order to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SalesOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Sales Order associated with a given ID from the Finance system. Specifying a Purchase Order with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "sales-orders"
                ]
            },
            "patch": {
                "operationId": "updateSalesOrderById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the sales order to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The SalesOrder object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SalesOrder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SalesOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Sales Order given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the payment object will be updated, and those fields not provided will be left alone.  Updating a Purchase Order with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "sales-orders"
                ]
            }
        },
        "/saved-searches": {
            "get": {
                "operationId": "getSavedSearches",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The object name for fetching all the saved searches",
                        "in": "query",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/RecordRef"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Saved searches for the given entity",
                "tags": [
                    "saved-searches"
                ]
            }
        },
        "/serialized-assembly-items": {
            "get": {
                "operationId": "getSerializedAssemblyItems",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/SerializedAssemblyItem"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find SerializedAssemblyItem or Services in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Products or Services last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Products or Services are returned.",
                "tags": [
                    "serialized-assembly-items"
                ]
            },
            "post": {
                "operationId": "createSerializedAssemblyItem",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The SerializedAssemblyItem object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Product' model are those required to create a new product",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SerializedAssemblyItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SerializedAssemblyItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a SerializedAssemblyItem in the Finance system.  Product creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "serialized-assembly-items"
                ]
            }
        },
        "/serialized-assembly-items/{id}": {
            "delete": {
                "operationId": "deleteSerializedAssemblyItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the SerializedAssemblyItem to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a SerializedAssemblyItem associated with a given ID from the Finance system. This marks the product as inactive.  Specifying a Product associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "serialized-assembly-items"
                ]
            },
            "get": {
                "operationId": "getSerializedAssemblyItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the SerializedAssemblyItem or service to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SerializedAssemblyItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined SerializedAssemblyItem or Service associated with a given ID from the Finance system. Specifying a Product or Service with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "serialized-assembly-items"
                ]
            },
            "patch": {
                "operationId": "updateSerializedAssemblyItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the product to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The SerializedAssemblyItem object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SerializedAssemblyItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SerializedAssemblyItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a  SerializedAssemblyItem given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Product object will be updated, and those fields not provided will be left alone.  Updating an Product with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "serialized-assembly-items"
                ]
            }
        },
        "/serialized-inventory-items": {
            "get": {
                "operationId": "getSerializedInventoryItems",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/SerializedInventoryItem"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find SerializedInventoryItem or Services in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Products or Services last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Products or Services are returned.",
                "tags": [
                    "serialized-inventory-items"
                ]
            },
            "post": {
                "operationId": "createSerializedInventoryItem",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The SerializedInventoryItem object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Product' model are those required to create a new product",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SerializedInventoryItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SerializedInventoryItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a SerializedInventoryItem in the Finance system.  Product creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "serialized-inventory-items"
                ]
            }
        },
        "/serialized-inventory-items/{id}": {
            "delete": {
                "operationId": "deleteSerializedInventoryItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the SerializedInventoryItem to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a SerializedInventoryItem associated with a given ID from the Finance system. This marks the product as inactive.  Specifying a Product associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "serialized-inventory-items"
                ]
            },
            "get": {
                "operationId": "getSerializedInventoryItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the SerializedInventoryItem or service to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SerializedInventoryItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined SerializedInventoryItem or Service associated with a given ID from the Finance system. Specifying a Product or Service with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "serialized-inventory-items"
                ]
            },
            "patch": {
                "operationId": "updateSerializedInventoryItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the SerializedInventoryItem to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The SerializedInventoryItem object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SerializedInventoryItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/SerializedInventoryItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a  SerializedInventoryItem given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Product object will be updated, and those fields not provided will be left alone.  Updating an Product with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "serialized-inventory-items"
                ]
            }
        },
        "/service-resale-items": {
            "get": {
                "operationId": "getServiceResaleItems",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceResaleItem"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find ServiceResaleItems or Services in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Products or Services last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Products or Services are returned.",
                "tags": [
                    "service-resale-items"
                ]
            },
            "post": {
                "operationId": "createServiceResaleItem",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ServiceResaleItem object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Product' model are those required to create a new product",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceResaleItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ServiceResaleItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a ServiceResaleItem in the Finance system.  Product creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "service-resale-items"
                ]
            }
        },
        "/service-resale-items/{id}": {
            "delete": {
                "operationId": "deleteServiceResaleItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the ServiceResaleItem to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a ServiceResaleItem associated with a given ID from the Finance system. This marks the product as inactive.  Specifying a Product associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "service-resale-items"
                ]
            },
            "get": {
                "operationId": "getServiceResaleItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the ServiceResaleItem or service to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ServiceResaleItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined ServiceResaleItem  associated with a given ID from the Finance system. Specifying a Product or Service with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "service-resale-items"
                ]
            },
            "patch": {
                "operationId": "updateServiceResaleItemById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the product to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ServiceResaleItem object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceResaleItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/ServiceResaleItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a ServiceResaleItem given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Product object will be updated, and those fields not provided will be left alone.  Updating an Product with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "service-resale-items"
                ]
            }
        },
        "/subsidiaries": {
            "get": {
                "operationId": "getSubsidiaries",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical \r\n            SQL query. For example, to search for Subsidiary of email 'abc@gmail.com', the search \r\n            expression \r\n            will be <i>where=email='abc@gmail.com'</i>. When this parameter is omitted, all projects are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Subsidiaries"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for Subsidiaries",
                "tags": [
                    "subsidiaries"
                ]
            },
            "post": {
                "operationId": "createSubsidiary",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Subsidiary object",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SubsidiariesPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Subsidiaries"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Subsidiary",
                "tags": [
                    "subsidiaries"
                ]
            }
        },
        "/subsidiaries/{id}": {
            "delete": {
                "operationId": "deleteSubsidiaryById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the Subsidiary to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an Subsidiary associated with a given ID from the Finance system. Specifying an Subsidiary associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "subsidiaries"
                ]
            },
            "get": {
                "operationId": "getSubsidiaryById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the Subsidiary to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Subsidiaries"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an Subsidiary associated with a given ID from the Finance system. Specifying an Subsidairy with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "subsidiaries"
                ]
            },
            "patch": {
                "operationId": "updateSubsidiaryById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the Subsidiary to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Subsidiary object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Subsidiaries"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Subsidiaries"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an Subsidiary given a set of partial attributes associated with a given ID in the Finance \r\n system.Updating an Subsidiary with a specified ID that \r\n does not exist will result in an error response.",
                "tags": [
                    "subsidiaries"
                ]
            }
        },
        "/tax-codes": {
            "get": {
                "operationId": "getTaxCodes",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/TaxCode"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Tax Codes in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Tax Codes last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Tax Codes are returned.",
                "tags": [
                    "tax-codes"
                ]
            }
        },
        "/tax-codes/{id}": {
            "get": {
                "operationId": "getTaxCodeById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the tax code to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/TaxCode"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Tax Code associated with a given ID from the Finance system. Specifying a Tax Code with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "tax-codes"
                ]
            }
        },
        "/tax-rates": {
            "get": {
                "operationId": "getTaxRates",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all accounts are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/TaxRate"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Tax Rates in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Tax Rates last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Tax Rates are returned.",
                "tags": [
                    "tax-rates"
                ]
            }
        },
        "/tax-rates/{id}": {
            "get": {
                "operationId": "getTaxRateById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the Tax Rate to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/TaxRate"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Tax Rate associated with a given ID from the Finance system. Specifying a Tax Rate with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "tax-rates"
                ]
            }
        },
        "/time-activities": {
            "get": {
                "operationId": "getTimeActivities",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all time activities are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/TimeActivity"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Time Activities in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Time Activities last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Time Activities are returned.",
                "tags": [
                    "time-activities"
                ]
            },
            "post": {
                "operationId": "createTimeActivity",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The TimeActivity object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'TimeActivity' model are those required to create a new time activity",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TimeActivity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/TimeActivity"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Time Activity in the Finance system.  Time Activity creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "time-activities"
                ]
            }
        },
        "/time-activities/{id}": {
            "delete": {
                "operationId": "deleteTimeActivityById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the time activity to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a Time Activity associated with a given ID from the Finance system. Specifying a Time Activity associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "time-activities"
                ]
            },
            "get": {
                "operationId": "getTimeActivityById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the time activity to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/TimeActivity"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Time Activity associated with a given ID from the Finance system. Specifying a Time Activity with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "time-activities"
                ]
            },
            "patch": {
                "operationId": "updateTimeActivityById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the time activity to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The TimeActivity object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TimeActivity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/TimeActivity"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Time Activity given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the payment object will be updated, and those fields not provided will be left alone.  Updating a Time Activity with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "time-activities"
                ]
            }
        },
        "/transaction-summaries": {
            "get": {
                "operationId": "getTransactionSummaries",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The where clause allows you to filter the summary by the following fields,'period', 'account','parentItem','item','entity','department','class','location','subsidiary'. The values are the internalIds for the respective entities. The operators can either be 'in' or '='. ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The grouping fields allow you to specify how you want your data grouped. The following  are valud values. You can use a comma to specify multiple values. The following values are valid - 'period', 'account','parentItem','item','entity','department','class','location','subsidiary'. ",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search. The Page Size  defaults to 1000 and unfortunately cannot be changed because of limitations at the enpoint.",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/TransactionSummary"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Tax Codes in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Tax Codes last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Tax Codes are returned.",
                "tags": [
                    "transaction-summaries"
                ]
            }
        },
        "/vendor-credits": {
            "get": {
                "operationId": "getVendorCredits",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Where clause to search for Vendor Credits",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/VendorCredit"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for Vendor Credits",
                "tags": [
                    "vendor-credits"
                ]
            },
            "post": {
                "operationId": "createVendorCredit",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Vendor Credit",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VendorCreditCreateUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/VendorCredit"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a Vendor Credit",
                "tags": [
                    "vendor-credits"
                ]
            }
        },
        "/vendor-credits/{id}": {
            "delete": {
                "operationId": "deleteVendorCreditById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Vendor Credit ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a Vendor Credit",
                "tags": [
                    "vendor-credits"
                ]
            },
            "get": {
                "operationId": "getVendorCreditById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Vendor Credit ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/VendorCredit"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a Vendor Credit",
                "tags": [
                    "vendor-credits"
                ]
            },
            "patch": {
                "operationId": "updateVendorCreditById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Vendor Credit ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Vendor Credit Object to Update",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VendorCreditCreateUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/VendorCredit"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Vendor Credit",
                "tags": [
                    "vendor-credits"
                ]
            }
        },
        "/vendor-payments": {
            "get": {
                "operationId": "getVendorPayments",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all payments are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/VendorPayment"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find VendorPayments in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for VendorPayments last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all VendorPayments are returned.",
                "tags": [
                    "vendor-payments"
                ]
            },
            "post": {
                "operationId": "createVendorPayment",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The VendorPayment object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'VendorPayment' model are those required to create a new VendorPayment",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VendorPayment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/VendorPayment"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create or initiate a VendorPayment in the Finance system.  VendorPayment creation/initiation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "vendor-payments"
                ]
            }
        },
        "/vendor-payments/{id}": {
            "delete": {
                "operationId": "deleteVendorPaymentById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the VendorPayment to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a VendorPayment associated with a given ID from the Finance system. Specifying a VendorPayment associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "vendor-payments"
                ]
            },
            "get": {
                "operationId": "getVendorPaymentById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the VendorPayment to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/VendorPayment"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined VendorPayment associated with a given ID from the Finance system. Specifying a VendorPayment with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "vendor-payments"
                ]
            },
            "patch": {
                "operationId": "updateVendorPaymentById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the VendorPayment to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The VendorPayment object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VendorPayment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/VendorPayment"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a VendorPayment given a set of partial VendorPayment attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the VendorPayment object will be updated, and those fields not provided will be left alone.  Updating a VendorPayment with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "vendor-payments"
                ]
            }
        },
        "/vendors": {
            "get": {
                "operationId": "getVendors",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all vendors are returned ",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Next Page link. You can get this from the Header of the previous search",
                        "in": "query",
                        "name": "nextPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page size for pagination, which defaults to 200 if not supplied",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Vendor"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Find Vendors in the Finance System, using the provided CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for Vendors last modified on or after 'Jan 15, 2014', the search expression will be where=lastModifiedDate>='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all Vendors are returned.",
                "tags": [
                    "vendors"
                ]
            },
            "post": {
                "operationId": "createVendor",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Vendor object to be created.<br>With the exception of the 'id' field, the required fields indicated in the 'Vendor' model are those required to create a new vendor",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Vendor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Vendor"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create a new Vendor in the Finance system.  Vendor creation will flow through Cloud Elements to the Finance Service.",
                "tags": [
                    "vendors"
                ]
            }
        },
        "/vendors/{id}": {
            "delete": {
                "operationId": "deleteVendorById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the vendor to delete in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete a Vendor associated with a given ID from the Finance system.  This marks it as inactive in the system Specifying a Vendor associated with a given ID that does not exist will result in an error message.",
                "tags": [
                    "vendors"
                ]
            },
            "get": {
                "operationId": "getVendorById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Id of the vendor to retrieve from the finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Vendor"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve a defined Vendor associated with a given ID from the Finance system. Specifying a Vendor with an associated ID that does not exist will result in an error response.",
                "tags": [
                    "vendors"
                ]
            },
            "patch": {
                "operationId": "updateVendorById",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the vendor to update in the Finance system.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The Vendor object, with those fields that are to be updated.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Vendor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Vendor"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update a Vendor Order given a set of partial attributes associated with a given ID in the Finance system. The update API uses the PATCH HTTP verb, so only those fields provided in the Vendor Order object will be updated, and those fields not provided will be left alone.  Updating a Vendor Order with a specified ID that does not exist will result in an error response.",
                "tags": [
                    "vendors"
                ]
            }
        },
        "/{objectName}": {
            "get": {
                "operationId": "getByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page number. Defaults to 1 if not provided.",
                        "format": "int64",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Object"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "post": {
                "operationId": "createByObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an {objectName}",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{id}/files/{fileId}": {
            "delete": {
                "operationId": "deleteObjectNameFileByFileId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the objectName can be contacts,opportunities, etc.",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of object to delete the attachement",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The File ID of the attachement to delete.",
                        "in": "path",
                        "name": "fileId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Remove an attachment for a given object with the given ID",
                "tags": [
                    "objectName"
                ]
            },
            "put": {
                "operationId": "replaceObjectNameFileByFileId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the objectName can be contacts,opportunities, etc.",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of object to delete the attachement",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The File ID of the attachement to delete.",
                        "in": "path",
                        "name": "fileId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Add an attachment for a given object with the given ID",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{objectId}": {
            "delete": {
                "operationId": "deleteObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "get": {
                "operationId": "getObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json",
                    "application/pdf"
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "patch": {
                "operationId": "updateObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {objectName}",
                "tags": [
                    "objectName"
                ]
            },
            "put": {
                "operationId": "replaceObjectNameByObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {objectName}",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{objectId}/{childObjectName}": {
            "get": {
                "operationId": "getObjectNameByChildObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CEQL search expression.",
                        "in": "query",
                        "name": "where",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The page number. Defaults to 1 if not provided.",
                        "format": "int64",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
                        "format": "int64",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Object"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Search for {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "post": {
                "operationId": "createObjectNameByChildObjectName",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Create an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            }
        },
        "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
            "delete": {
                "operationId": "deleteObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected"
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Delete an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "get": {
                "operationId": "getObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Retrieve an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "patch": {
                "operationId": "updateObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            },
            "put": {
                "operationId": "replaceObjectNameByChildObjectId",
                "parameters": [
                    {
                        "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the object",
                        "in": "path",
                        "name": "objectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The name of the childObjectName",
                        "in": "path",
                        "name": "childObjectName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName} ID",
                        "in": "path",
                        "name": "objectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {childObjectName} ID",
                        "in": "path",
                        "name": "childObjectId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The {objectName}",
                        "in": "body",
                        "name": "Body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Everything worked as expected",
                        "schema": {
                            "$ref": "#/definitions/Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Often due to a missing request parameter"
                    },
                    "401": {
                        "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                    },
                    "403": {
                        "description": "Forbidden - Access to the resource by the provider is forbidden"
                    },
                    "404": {
                        "description": "Not found - The requested resource is not found"
                    },
                    "405": {
                        "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                    },
                    "406": {
                        "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                    },
                    "409": {
                        "description": "Conflict - If a resource being created already exists"
                    },
                    "415": {
                        "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                    },
                    "500": {
                        "description": "Server error - Something went wrong on the Cloud Elements server"
                    },
                    "502": {
                        "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                    }
                },
                "summary": "Update an {childObjectName}",
                "tags": [
                    "objectName"
                ]
            }
        }
    },
    "host": "localhost:8080",
    "schemes": [
        "http"
    ],
    "definitions": {
        "VendorCreditItem": {
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorCreditItem",
            "properties": {
                "line": {
                    "format": "int32",
                    "type": "number"
                },
                "orderLine": {
                    "format": "int32",
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "tax1Amt": {
                    "format": "double",
                    "type": "number"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amortizationResidual": {
                    "type": "string"
                },
                "amortizationEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "rate": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "amortizStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate2": {
                    "format": "double",
                    "type": "number"
                },
                "taxRate1": {
                    "format": "double",
                    "type": "number"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "quantity": {
                    "format": "double",
                    "type": "number"
                },
                "binNumbers": {
                    "type": "string"
                },
                "inventoryDetail": {
                    "$ref": "#/definitions/InventoryDetail"
                },
                "amortizationSched": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorName": {
                    "type": "string"
                },
                "isBillable": {
                    "type": "boolean"
                },
                "grossAmt": {
                    "format": "double",
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                },
                "serialNumbersList": {
                    "$ref": "#/definitions/RecordRefList"
                }
            }
        },
        "VendorCredit": {
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorCredit",
            "properties": {
                "tranId": {
                    "type": "string"
                },
                "applied": {
                    "format": "double",
                    "type": "number"
                },
                "memo": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "total": {
                    "format": "double",
                    "type": "number"
                },
                "currencyName": {
                    "type": "string"
                },
                "exchangeRate": {
                    "format": "double",
                    "type": "number"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "expenseList": {
                    "$ref": "#/definitions/VendorCreditExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "unApplied": {
                    "format": "double",
                    "type": "number"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "autoApply": {
                    "type": "boolean"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "userTotal": {
                    "format": "double",
                    "type": "number"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "transactionNumber": {
                    "type": "string"
                },
                "applyList": {
                    "$ref": "#/definitions/VendorCreditApplyList"
                },
                "externalId": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "createdFrom": {
                    "$ref": "#/definitions/RecordRef"
                },
                "postingPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "itemList": {
                    "$ref": "#/definitions/VendorCreditItemList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "VendorCreditCreateUpdate": {
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorCredit",
            "properties": {
                "tranId": {
                    "type": "string"
                },
                "memo": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "total": {
                    "format": "double",
                    "type": "number"
                },
                "currencyName": {
                    "type": "string"
                },
                "exchangeRate": {
                    "format": "double",
                    "type": "number"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "expenseList": {
                    "$ref": "#/definitions/VendorCreditExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "autoApply": {
                    "type": "boolean"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "transactionNumber": {
                    "type": "string"
                },
                "applyList": {
                    "$ref": "#/definitions/VendorCreditApplyList"
                },
                "externalId": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdFrom": {
                    "$ref": "#/definitions/RecordRef"
                },
                "postingPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "itemList": {
                    "$ref": "#/definitions/VendorCreditItemList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "VendorCreditApply": {
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorCreditApply",
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "total": {
                    "format": "double",
                    "type": "number"
                },
                "refNum": {
                    "type": "string"
                },
                "apply": {
                    "type": "boolean"
                },
                "due": {
                    "format": "double",
                    "type": "number"
                },
                "line": {
                    "format": "int32",
                    "type": "number"
                },
                "doc": {
                    "format": "int32",
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "applyDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "VendorCreditExpenseList": {
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorCreditExpenseList",
            "properties": {
                "expense": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VendorCreditExpense"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "VendorCreditExpense": {
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorCreditExpense",
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "line": {
                    "format": "int32",
                    "type": "number"
                },
                "orderLine": {
                    "format": "int32",
                    "type": "number"
                },
                "memo": {
                    "type": "string"
                },
                "tax1Amt": {
                    "format": "double",
                    "type": "number"
                },
                "amortizationSched": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amortizationResidual": {
                    "type": "string"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isBillable": {
                    "type": "boolean"
                },
                "amortizationEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "grossAmt": {
                    "format": "double",
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amortizStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate2": {
                    "format": "double",
                    "type": "number"
                },
                "taxRate1": {
                    "format": "double",
                    "type": "number"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "VendorCreditApplyList": {
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorCreditApplyList",
            "properties": {
                "apply": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VendorCreditApply"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "VendorCreditItemList": {
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorCreditItemList",
            "properties": {
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VendorCreditItem"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "PayrollItem": {
            "required": [
                "itemType",
                "name",
                "subsidiary",
                "liabilityAccount"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "itemType": {
                    "$ref": "#/definitions/RecordRef"
                },
                "employeePaid": {
                    "type": "boolean"
                },
                "inactive": {
                    "type": "boolean"
                },
                "vendor": {
                    "$ref": "#/definitions/RecordRef"
                },
                "expenseAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "name": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "liabilityAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                }
            }
        },
        "CustomRecordRef": {
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "scriptId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/RecordType"
                }
            }
        },
        "CustomRecord": {
            "properties": {
                "parent": {
                    "x-displayName": "Subaccount of",
                    "$ref": "#/definitions/RecordRef"
                },
                "showCreationDate": {
                    "x-displayName": "On Record",
                    "type": "boolean"
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "type": "boolean"
                },
                "allowInlineEditing": {
                    "x-displayName": "Allow Inline Editing",
                    "type": "boolean"
                },
                "description": {
                    "x-displayName": "Description",
                    "type": "string"
                },
                "isAvailableOffline": {
                    "x-displayName": "Available Offline",
                    "type": "boolean"
                },
                "numberingCurrentNumber": {
                    "x-displayName": "Current Number",
                    "format": "int64",
                    "type": "integer"
                },
                "numberingMinDigits": {
                    "x-displayName": "Minimum Digits",
                    "format": "int64",
                    "type": "integer"
                },
                "showOwnerAllowChange": {
                    "x-displayName": "Allow Change",
                    "type": "boolean"
                },
                "allowAttachments": {
                    "x-displayName": "Allow Attachments",
                    "type": "boolean"
                },
                "allowNumberingOverride": {
                    "x-displayName": "Allow Override",
                    "type": "boolean"
                },
                "recType": {
                    "x-displayName": "Record Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "showId": {
                    "x-displayName": "Show ID",
                    "type": "boolean"
                },
                "showLastModified": {
                    "x-displayName": "On Record",
                    "type": "boolean"
                },
                "enablEmailMerge": {
                    "x-displayName": "Enable Mail Merge",
                    "type": "boolean"
                },
                "customRecordId": {
                    "type": "string"
                },
                "allowQuickSearch": {
                    "x-displayName": "Allow Quick Search",
                    "type": "boolean"
                },
                "altName": {
                    "type": "string"
                },
                "numberingInit": {
                    "x-displayName": "Initial Number",
                    "format": "int64",
                    "type": "integer"
                },
                "showOwner": {
                    "x-displayName": "On Record",
                    "type": "boolean"
                },
                "isOrdered": {
                    "x-displayName": "Records are Ordered",
                    "type": "boolean"
                },
                "disclaimer": {
                    "type": "string"
                },
                "showLastModifiedOnList": {
                    "x-displayName": "On List",
                    "type": "boolean"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "showNotes": {
                    "x-displayName": "Show Notes",
                    "type": "boolean"
                },
                "owner": {
                    "x-displayName": "Owner",
                    "$ref": "#/definitions/RecordRef"
                },
                "isNumberingUpdateable": {
                    "x-displayName": "Update",
                    "type": "boolean"
                },
                "autoName": {
                    "type": "boolean"
                },
                "created": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "numberingPrefix": {
                    "x-displayName": "Prefix",
                    "type": "string"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "includeName": {
                    "x-displayName": "Include Name Field",
                    "type": "boolean"
                },
                "scriptId": {
                    "x-displayName": "ID",
                    "type": "string"
                },
                "enableNumbering": {
                    "x-displayName": "Enable",
                    "type": "boolean"
                },
                "recordName": {
                    "x-displayName": "Name",
                    "type": "string"
                },
                "usePermissions": {
                    "x-displayName": "Use Permissions",
                    "type": "boolean"
                },
                "showCreationDateOnList": {
                    "x-displayName": "On List",
                    "type": "boolean"
                },
                "name": {
                    "x-displayName": "Name",
                    "type": "string"
                },
                "showOwnerOnList": {
                    "x-displayName": "On List",
                    "type": "boolean"
                },
                "lastModified": {
                    "x-readOnly": "true",
                    "format": "date-time",
                    "type": "string"
                },
                "numberingSuffix": {
                    "x-displayName": "Suffix",
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "translationsList": {
                    "$ref": "#/definitions/CustomRecordTranslationsList"
                }
            },
            "x-primary-key": [
                "internalId"
            ],
            "required": [
                "name"
            ],
            "x-vendor-objectname": "CustomRecord",
            "x-has-customfields": true
        },
        "CustomRecordTranslationsList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "customRecordTranslations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomRecordTranslations"
                    }
                }
            }
        },
        "CustomRecordTranslations": {
            "properties": {
                "language": {
                    "x-displayName": "Language",
                    "type": "string"
                },
                "label": {
                    "x-displayName": "Label",
                    "type": "string"
                },
                "locale": {
                    "$ref": "#/definitions/Language"
                }
            }
        },
        "CustomRecordCustomField": {
            "properties": {
                "displayHeight": {
                    "x-displayName": "Height",
                    "format": "int64",
                    "type": "integer"
                },
                "roleAccessList": {
                    "$ref": "#/definitions/CustomFieldRoleAccessList"
                },
                "defaultValue": {
                    "x-displayName": "Default Value",
                    "type": "string"
                },
                "dynamicDefault": {
                    "x-displayName": "Dynamic Default",
                    "$ref": "#/definitions/CustomizationDynamicDefault"
                },
                "description": {
                    "x-displayName": "Description",
                    "type": "string"
                },
                "sourcefilterby": {
                    "x-displayName": "Source Filter By",
                    "$ref": "#/definitions/RecordRef"
                },
                "subtab": {
                    "x-displayName": "Subtab",
                    "$ref": "#/definitions/RecordRef"
                },
                "selectRecordType": {
                    "x-displayName": "List/Record",
                    "$ref": "#/definitions/RecordRef"
                },
                "isFormula": {
                    "x-displayName": "Formula",
                    "type": "boolean"
                },
                "insertBefore": {
                    "x-displayName": "Insert Before",
                    "$ref": "#/definitions/RecordRef"
                },
                "recType": {
                    "x-displayName": "Record Type",
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "minValue": {
                    "x-displayName": "Minimum Value",
                    "format": "double",
                    "type": "number"
                },
                "defaultChecked": {
                    "x-displayName": "Default Checked",
                    "type": "boolean"
                },
                "subAccessList": {
                    "$ref": "#/definitions/CustomFieldSubAccessList"
                },
                "roleRestrict": {
                    "x-displayName": "Apply Role Restrictions",
                    "type": "boolean"
                },
                "filterList": {
                    "$ref": "#/definitions/CustomRecordCustomFieldFilterList"
                },
                "isMandatory": {
                    "x-displayName": "Mandatory",
                    "type": "boolean"
                },
                "sourceFrom": {
                    "x-displayName": "Source From",
                    "$ref": "#/definitions/RecordRef"
                },
                "owner": {
                    "x-displayName": "Owner",
                    "$ref": "#/definitions/RecordRef"
                },
                "isParent": {
                    "x-displayName": "Record is Parent",
                    "type": "boolean"
                },
                "accessLevel": {
                    "x-displayName": "Default Access Level",
                    "$ref": "#/definitions/CustomizationAccessLevel"
                },
                "sourceList": {
                    "x-displayName": "Source List",
                    "$ref": "#/definitions/RecordRef"
                },
                "defaultSelection": {
                    "x-displayName": "Default Selection",
                    "$ref": "#/definitions/RecordRef"
                },
                "maxValue": {
                    "x-displayName": "Maximum Value",
                    "format": "double",
                    "type": "number"
                },
                "checkSpelling": {
                    "x-displayName": "Check Spelling",
                    "type": "boolean"
                },
                "linkText": {
                    "x-displayName": "Link Text",
                    "type": "string"
                },
                "label": {
                    "x-displayName": "Label",
                    "type": "string"
                },
                "deptAccessList": {
                    "$ref": "#/definitions/CustomFieldDepartmentAccessList"
                },
                "help": {
                    "x-displayName": "Help",
                    "type": "string"
                },
                "displayType": {
                    "x-displayName": "Display Type",
                    "$ref": "#/definitions/CustomizationDisplayType"
                },
                "scriptId": {
                    "type": "string"
                },
                "searchDefault": {
                    "x-displayName": "Search",
                    "$ref": "#/definitions/RecordRef"
                },
                "displayWidth": {
                    "x-displayName": "Width",
                    "format": "int64",
                    "type": "integer"
                },
                "searchLevel": {
                    "x-displayName": "Default Level for Search/Reporting",
                    "$ref": "#/definitions/CustomizationSearchLevel"
                },
                "parentSubtab": {
                    "x-displayName": "Parent Subtab",
                    "$ref": "#/definitions/RecordRef"
                },
                "showInList": {
                    "x-displayName": "Show In List",
                    "type": "boolean"
                },
                "globalSearch": {
                    "x-displayName": "Global Search",
                    "type": "boolean"
                },
                "storeValue": {
                    "x-displayName": "Store Value",
                    "type": "boolean"
                },
                "fieldType": {
                    "$ref": "#/definitions/CustomizationFieldType"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "maxLength": {
                    "x-displayName": "Maximum Length",
                    "format": "int64",
                    "type": "integer"
                },
                "searchCompareField": {
                    "x-displayName": "Field",
                    "$ref": "#/definitions/RecordRef"
                },
                "translationsList": {
                    "$ref": "#/definitions/CustomFieldTranslationsList"
                }
            },
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": false,
            "x-vendor-objectname": "CustomRecordCustomField"
        },
        "CustomFieldTranslationsList": {
            "properties": {
                "translations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldTranslations"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CustomFieldTranslations": {
            "properties": {
                "help": {
                    "x-displayName": "Help",
                    "type": "string"
                },
                "localeDescription": {
                    "x-displayName": "Language",
                    "type": "string"
                },
                "label": {
                    "x-displayName": "Label",
                    "type": "string"
                },
                "locale": {
                    "$ref": "#/definitions/Language"
                }
            }
        },
        "CustomizationFieldType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "CustomizationSearchLevel": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "CustomizationDisplayType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "CustomFieldDepartmentAccessList": {
            "properties": {
                "deptAccess": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldDepartmentAccess"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CustomFieldDepartmentAccess": {
            "properties": {
                "accessLevel": {
                    "x-displayName": "Access Level",
                    "$ref": "#/definitions/CustomizationAccessLevel"
                },
                "searchLevel": {
                    "x-displayName": "Access Level",
                    "$ref": "#/definitions/CustomizationSearchLevel"
                },
                "dept": {
                    "x-displayName": "Department",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CustomizationAccessLevel": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_quantity",
                        "_value",
                        "_weight",
                        "_line"
                    ]
                }
            }
        },
        "CustomRecordCustomFieldFilterList": {
            "properties": {
                "filter": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomRecordCustomFieldFilter"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CustomRecordCustomFieldFilter": {
            "properties": {
                "fldFilterChecked": {
                    "type": "boolean"
                },
                "fldFilter": {
                    "$ref": "#/definitions/RecordRef"
                },
                "fldFilterNotNull": {
                    "type": "boolean"
                },
                "fldFilterVal": {
                    "type": "string"
                },
                "fldFilterCompareType": {
                    "$ref": "#/definitions/CustomizationFilterCompareType"
                },
                "fldFilterSelList": {
                    "$ref": "#/definitions/FldFilterSelList"
                }
            }
        },
        "FldFilterSelList": {
            "properties": {
                "fldFilterSel": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecordRef"
                    }
                }
            }
        },
        "CustomizationFilterCompareType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "CustomFieldSubAccessList": {
            "properties": {
                "subAccess": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldSubAccess"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CustomFieldSubAccess": {
            "properties": {
                "sub": {
                    "$ref": "#/definitions/RecordRef"
                },
                "accessLevel": {
                    "x-displayName": "Default Access Level",
                    "$ref": "#/definitions/CustomizationAccessLevel"
                },
                "searchLevel": {
                    "x-displayName": "Default Level for Search/Reporting",
                    "$ref": "#/definitions/CustomizationSearchLevel"
                }
            }
        },
        "CustomizationDynamicDefault": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_manual",
                        "_otherTransaction",
                        "_otherTransactionExcludeTax",
                        "_thisTransaction"
                    ]
                }
            }
        },
        "CustomFieldRoleAccessList": {
            "properties": {
                "roleAccess": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldRoleAccess"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CustomFieldRoleAccess": {
            "properties": {
                "role": {
                    "x-displayName": "Role",
                    "$ref": "#/definitions/RecordRef"
                },
                "accessLevel": {
                    "x-displayName": "Access Level",
                    "$ref": "#/definitions/CustomizationAccessLevel"
                },
                "searchLevel": {
                    "x-displayName": "Level for Search/Reporting",
                    "$ref": "#/definitions/CustomizationSearchLevel"
                }
            }
        },
        "UpdateCustomRecord": {
            "properties": {
                "parent": {
                    "x-displayName": "Subaccount of",
                    "$ref": "#/definitions/RecordRef"
                },
                "showCreationDate": {
                    "x-displayName": "On Record",
                    "type": "boolean"
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "type": "boolean"
                },
                "allowInlineEditing": {
                    "x-displayName": "Allow Inline Editing",
                    "type": "boolean"
                },
                "description": {
                    "x-displayName": "Description",
                    "type": "string"
                },
                "isAvailableOffline": {
                    "x-displayName": "Available Offline",
                    "type": "boolean"
                },
                "numberingCurrentNumber": {
                    "x-displayName": "Current Number",
                    "format": "int64",
                    "type": "integer"
                },
                "numberingMinDigits": {
                    "x-displayName": "Minimum Digits",
                    "format": "int64",
                    "type": "integer"
                },
                "showOwnerAllowChange": {
                    "x-displayName": "Allow Change",
                    "type": "boolean"
                },
                "allowAttachments": {
                    "x-displayName": "Allow Attachments",
                    "type": "boolean"
                },
                "allowNumberingOverride": {
                    "x-displayName": "Allow Override",
                    "type": "boolean"
                },
                "recType": {
                    "x-displayName": "Record Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "showId": {
                    "x-displayName": "Show ID",
                    "type": "boolean"
                },
                "showLastModified": {
                    "x-displayName": "On Record",
                    "type": "boolean"
                },
                "enablEmailMerge": {
                    "x-displayName": "Enable Mail Merge",
                    "type": "boolean"
                },
                "customRecordId": {
                    "type": "string"
                },
                "allowQuickSearch": {
                    "x-displayName": "Allow Quick Search",
                    "type": "boolean"
                },
                "altName": {
                    "type": "string"
                },
                "numberingInit": {
                    "x-displayName": "Initial Number",
                    "format": "int64",
                    "type": "integer"
                },
                "showOwner": {
                    "x-displayName": "On Record",
                    "type": "boolean"
                },
                "isOrdered": {
                    "x-displayName": "Records are Ordered",
                    "type": "boolean"
                },
                "disclaimer": {
                    "type": "string"
                },
                "showLastModifiedOnList": {
                    "x-displayName": "On List",
                    "type": "boolean"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "showNotes": {
                    "x-displayName": "Show Notes",
                    "type": "boolean"
                },
                "owner": {
                    "x-displayName": "Owner",
                    "$ref": "#/definitions/RecordRef"
                },
                "isNumberingUpdateable": {
                    "x-displayName": "Update",
                    "type": "boolean"
                },
                "autoName": {
                    "type": "boolean"
                },
                "created": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "numberingPrefix": {
                    "x-displayName": "Prefix",
                    "type": "string"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "includeName": {
                    "x-displayName": "Include Name Field",
                    "type": "boolean"
                },
                "scriptId": {
                    "x-displayName": "ID",
                    "type": "string"
                },
                "enableNumbering": {
                    "x-displayName": "Enable",
                    "type": "boolean"
                },
                "recordName": {
                    "x-displayName": "Name",
                    "type": "string"
                },
                "usePermissions": {
                    "x-displayName": "Use Permissions",
                    "type": "boolean"
                },
                "showCreationDateOnList": {
                    "x-displayName": "On List",
                    "type": "boolean"
                },
                "name": {
                    "x-displayName": "Name",
                    "type": "string"
                },
                "showOwnerOnList": {
                    "x-displayName": "On List",
                    "type": "boolean"
                },
                "lastModified": {
                    "x-readOnly": "true",
                    "format": "date-time",
                    "type": "string"
                },
                "numberingSuffix": {
                    "x-displayName": "Suffix",
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "translationsList": {
                    "$ref": "#/definitions/CustomRecordTranslationsList"
                }
            },
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "CustomRecord",
            "x-has-customfields": true
        },
        "Classification": {
            "required": [
                "name"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": true,
            "x-vendor-objectname": "Classification",
            "properties": {
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Sub{1} of"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "includeChildren": {
                    "type": "boolean",
                    "x-displayName": "Include Children"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "x-displayName": "Name"
                },
                "externalId": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "classTranslationList": {
                    "$ref": "#/definitions/ClassTranslationList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                }
            }
        },
        "ClassTranslationList": {
            "properties": {
                "classTranslation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ClassTranslation"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "Department": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Department",
            "x-has-customfields": true,
            "properties": {
                "internalId": {
                    "type": "string",
                    "x-readOnly": true
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Sub{1} of"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "includeChildren": {
                    "type": "boolean",
                    "x-displayName": "Include Children"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "x-displayName": "Name"
                },
                "externalId": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "classTranslationList": {
                    "$ref": "#/definitions/ClassTranslationList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                }
            }
        },
        "DepartmentPOST": {
            "required": [
                "name"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Department",
            "x-has-customfields": true,
            "properties": {
                "parent": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Sub{1} of"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "includeChildren": {
                    "type": "boolean",
                    "x-displayName": "Include Children"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "x-displayName": "Name"
                },
                "externalId": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "classTranslationList": {
                    "$ref": "#/definitions/ClassTranslationList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                }
            }
        },
        "Location": {
            "required": [
                "name"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": true,
            "x-vendor-objectname": "Location",
            "properties": {
                "makeInventoryAvailable": {
                    "type": "boolean",
                    "x-displayName": "Make Inventory Available"
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Sub{1} of"
                },
                "bufferStock": {
                    "format": "int64",
                    "type": "integer"
                },
                "dailyShippingCapacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "totalShippingCapacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "geolocationMethod": {
                    "x-displayName": "Geolocation Method",
                    "$ref": "#/definitions/LocationGeolocationMethod"
                },
                "autoAssignmentRegionSetting": {
                    "x-displayName": "Automatic Location Assignment",
                    "$ref": "#/definitions/LocationAutoAssignmentRegionSetting"
                },
                "excludeLocationRegionsList": {
                    "$ref": "#/definitions/LocationRegionsList"
                },
                "businessHoursList": {
                    "$ref": "#/definitions/LocationBusinessHoursList"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "tranPrefix": {
                    "type": "string",
                    "x-displayName": "Document Number Prefix"
                },
                "includeChildren": {
                    "type": "boolean",
                    "x-displayName": "Include Children"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "nextPickupCutOffTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "latitude": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Latitude"
                },
                "externalId": {
                    "type": "string"
                },
                "includeLocationRegionsList": {
                    "$ref": "#/definitions/LocationRegionsList"
                },
                "timeZone": {
                    "$ref": "#/definitions/LocationTimeZone",
                    "x-displayName": "Time Zone"
                },
                "mainAddress": {
                    "$ref": "#/definitions/Address"
                },
                "returnAddress": {
                    "$ref": "#/definitions/Address"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "makeInventoryAvailableStore": {
                    "type": "boolean",
                    "x-displayName": "Make Inventory Available in Web Store"
                },
                "automaticLatLongSetup": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "x-displayName": "Name"
                },
                "logo": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Logo"
                },
                "locationType": {
                    "$ref": "#/definitions/LocationType"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "classTranslationList": {
                    "$ref": "#/definitions/ClassTranslationList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "longitude": {
                    "x-displayName": "Longitude",
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "LocationType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "Address": {
            "x-has-customfields": true,
            "properties": {
                "zip": {
                    "type": "string"
                },
                "country": {
                    "$ref": "#/definitions/Country"
                },
                "addr2": {
                    "type": "string"
                },
                "addr1": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "addr3": {
                    "type": "string"
                },
                "addrText": {
                    "x-displayName": "Address",
                    "type": "string"
                },
                "addrPhone": {
                    "type": "string"
                },
                "internalId": {
                    "x-displayName": "Internal ID",
                    "type": "string"
                },
                "addressee": {
                    "type": "string"
                },
                "attention": {
                    "type": "string"
                },
                "override": {
                    "x-displayName": "Override",
                    "type": "boolean"
                },
                "state": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                }
            }
        },
        "LocationTimeZone": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "LocationRegionsList": {
            "properties": {
                "locationRegions": {
                    "items": {
                        "$ref": "#/definitions/LocationRegions"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "LocationRegions": {
            "properties": {
                "region": {
                    "x-displayName": "Region",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "LocationBusinessHoursList": {
            "properties": {
                "locationBusinessHours": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LocationBusinessHours"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "LocationBusinessHours": {
            "properties": {
                "endTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "sameDayPickupCutOffTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "startTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "isFriday": {
                    "type": "boolean"
                },
                "isMonday": {
                    "type": "boolean"
                },
                "isSaturday": {
                    "type": "boolean"
                },
                "isSunday": {
                    "type": "boolean"
                },
                "isThursday": {
                    "type": "boolean"
                },
                "isTuesday": {
                    "type": "boolean"
                },
                "isWednesday": {
                    "type": "boolean"
                }
            }
        },
        "LocationAutoAssignmentRegionSetting": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "LocationGeolocationMethod": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "CreditMemo": {
            "required": [
                "itemList",
                "entity",
                "location",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "CreditMemo",
            "x-has-customfields": true,
            "properties": {
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "altHandlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "type": "number"
                },
                "altShippingCost": {
                    "x-displayName": "Shipping cost",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "amountPaid": {
                    "format": "double",
                    "type": "number"
                },
                "amountRemaining": {
                    "format": "double",
                    "type": "number"
                },
                "applied": {
                    "x-displayName": "Applied",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "applyList": {
                    "$ref": "#/definitions/CreditMemoApplyList"
                },
                "autoApply": {
                    "x-displayName": "Auto Apply",
                    "type": "boolean"
                },
                "balance": {
                    "format": "double",
                    "type": "number"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "contribPct": {
                    "type": "string"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "createdFrom": {
                    "x-displayName": "Created From",
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "currencyName": {
                    "x-displayName": "Currency",
                    "x-readOnly": true,
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "deferredRevenue": {
                    "format": "double",
                    "type": "number"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "discountItem": {
                    "x-displayName": "Discount",
                    "$ref": "#/definitions/RecordRef"
                },
                "discountRate": {
                    "x-displayName": "Rate",
                    "type": "string"
                },
                "discountTotal": {
                    "x-displayName": "Discount Total",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entityTaxRegNum": {
                    "$ref": "#/definitions/RecordRef"
                },
                "estGrossProfit": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "estGrossProfitPercent": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number"
                },
                "excludeCommission": {
                    "x-displayName": "Exclude Commissions",
                    "type": "boolean"
                },
                "fax": {
                    "type": "string"
                },
                "giftCert": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isMultiShipTo": {
                    "$ref": "#/definitions/RecordRef"
                },
                "giftCertApplied": {
                    "format": "double",
                    "type": "number"
                },
                "giftCertAvailable": {
                    "format": "double",
                    "type": "number"
                },
                "giftCertTotal": {
                    "format": "double",
                    "type": "number"
                },
                "handlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "type": "number"
                },
                "handlingTax1Rate": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number"
                },
                "handlingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "type": "string"
                },
                "handlingTaxCode": {
                    "x-displayName": "Handling Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean"
                },
                "itemList": {
                    "$ref": "#/definitions/CreditMemoItemList"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "leadSource": {
                    "x-displayName": "Lead Source",
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "memo": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "messageSel": {
                    "x-displayName": "Select Message",
                    "$ref": "#/definitions/RecordRef"
                },
                "nexus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "onCreditHold": {
                    "type": "string"
                },
                "otherRefNum": {
                    "type": "string"
                },
                "partner": {
                    "x-displayName": "Partner",
                    "$ref": "#/definitions/RecordRef"
                },
                "partnersList": {
                    "$ref": "#/definitions/CreditMemoPartnersList"
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef"
                },
                "promoCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "recognizedRevenue": {
                    "format": "double",
                    "type": "number"
                },
                "revenueStatus": {
                    "$ref": "#/definitions/RevenueStatus"
                },
                "revRecOnRevCommitment": {
                    "type": "boolean"
                },
                "salesEffectiveDate": {
                    "x-displayName": "Sales Effective Date",
                    "format": "date-time",
                    "type": "string"
                },
                "salesGroup": {
                    "x-displayName": "Choose Team",
                    "$ref": "#/definitions/RecordRef"
                },
                "salesRep": {
                    "x-displayName": "Sales Rep",
                    "$ref": "#/definitions/RecordRef"
                },
                "salesTeamList": {
                    "$ref": "#/definitions/CreditMemoSalesTeamList"
                },
                "shipMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number"
                },
                "shippingTax1Rate": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number"
                },
                "shippingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "type": "string"
                },
                "shippingTaxCode": {
                    "x-displayName": "Shipping Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "source": {
                    "x-displayName": "Source",
                    "type": "string"
                },
                "status": {
                    "x-displayName": "Status",
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "subsidiaryTaxRegNum": {
                    "$ref": "#/definitions/RecordRef"
                },
                "subTotal": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "syncPartnerTeams": {
                    "type": "boolean"
                },
                "syncSalesTeams": {
                    "type": "boolean"
                },
                "taxRegOverride": {
                    "type": "boolean"
                },
                "taxDetailsOverride": {
                    "type": "boolean"
                },
                "tax2Total": {
                    "x-displayName": "PST",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "taxItem": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate": {
                    "format": "double",
                    "type": "number"
                },
                "taxTotal": {
                    "x-displayName": "Tax",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "toBeEmailed": {
                    "x-displayName": "To Be Emailed",
                    "type": "boolean"
                },
                "toBeFaxed": {
                    "x-displayName": "To Be Faxed",
                    "type": "boolean"
                },
                "toBePrinted": {
                    "x-displayName": "To Be Printed",
                    "type": "boolean"
                },
                "total": {
                    "format": "double",
                    "type": "number"
                },
                "totalCostEstimate": {
                    "format": "double",
                    "type": "number"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "tranId": {
                    "type": "string"
                },
                "tranIsVsoeBundle": {
                    "x-displayName": "Transaction Is VSOE Bundle",
                    "type": "boolean"
                },
                "unapplied": {
                    "x-displayName": "Unapplied",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "vatRegNum": {
                    "type": "string"
                },
                "vsoeAutoCalc": {
                    "x-displayName": "Auto Calculate VSOE Allocation",
                    "type": "boolean"
                }
            }
        },
        "CreditMemoSalesTeamList": {
            "properties": {
                "salesTeam": {
                    "$ref": "#/definitions/CreditMemoSalesTeam"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CreditMemoSalesTeam": {
            "properties": {
                "contribution": {
                    "x-displayName": "Contribution %",
                    "format": "double",
                    "type": "number"
                },
                "employee": {
                    "x-displayName": "Employee",
                    "$ref": "#/definitions/RecordRef"
                },
                "isPrimary": {
                    "x-displayName": "Primary",
                    "type": "boolean"
                },
                "salesRole": {
                    "x-displayName": "Sales Role",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CreditMemoItemList": {
            "properties": {
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CreditMemoItem"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CreditMemoApplyList": {
            "properties": {
                "apply": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CreditMemoApply"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CreditMemoApply": {
            "properties": {
                "amount": {
                    "x-displayName": "Payment",
                    "type": "number",
                    "format": "double"
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean"
                },
                "applyDate": {
                    "x-displayName": "Date",
                    "type": "string"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "type": "string"
                },
                "doc": {
                    "type": "integer",
                    "format": "int64"
                },
                "due": {
                    "x-displayName": "Amt. Due",
                    "format": "double",
                    "type": "number"
                },
                "job": {
                    "type": "string"
                },
                "line": {
                    "type": "integer",
                    "format": "int64"
                },
                "refNum": {
                    "x-displayName": "Ref No.",
                    "type": "string"
                },
                "total": {
                    "x-displayName": "Orig. Amt.",
                    "type": "number",
                    "format": "double"
                },
                "type": {
                    "x-displayName": "Type",
                    "type": "string"
                }
            }
        },
        "CreditMemoItem": {
            "required": [
                "taxCode"
            ],
            "x-has-customfields": true,
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "binNumbers": {
                    "x-displayName": "Bin Numbers",
                    "type": "string"
                },
                "catchUpPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "chargesList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "chargeType": {
                    "x-displayName": "Charge Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "deferRevRec": {
                    "type": "boolean"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "description": {
                    "type": "string"
                },
                "giftCertFrom": {
                    "x-displayName": "From",
                    "type": "string"
                },
                "giftCertMessage": {
                    "x-displayName": "Gift Message",
                    "type": "string"
                },
                "giftCertNumber": {
                    "x-displayName": "Code",
                    "type": "string"
                },
                "giftCertRecipientEmail": {
                    "x-displayName": "Recipient Email",
                    "type": "string"
                },
                "giftCertRecipientName": {
                    "x-displayName": "Recipient Name",
                    "type": "string"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number"
                },
                "inventoryDetail": {
                    "x-displayName": "Inventory Detail",
                    "$ref": "#/definitions/InventoryDetail"
                },
                "isTaxable": {
                    "type": "boolean"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "line": {
                    "type": "integer",
                    "format": "int64"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "orderLine": {
                    "x-displayName": "{1}",
                    "type": "integer",
                    "format": "int64"
                },
                "price": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantity": {
                    "type": "number",
                    "format": "double"
                },
                "rate": {
                    "type": "string"
                },
                "revRecEndDate": {
                    "type": "string"
                },
                "revRecSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecStartDate": {
                    "type": "string"
                },
                "revRecTermInMonths": {
                    "type": "integer",
                    "format": "int64"
                },
                "subscriptionLine": {
                    "x-displayName": "{Subscription} Line",
                    "$ref": "#/definitions/RecordRef"
                },
                "shipMethod": {
                    "x-displayName": "Ship Via",
                    "$ref": "#/definitions/RecordRef"
                },
                "shipCarrier": {
                    "$ref": "#/definitions/ShippingCarrier"
                },
                "shipAddress": {
                    "x-displayName": "Ship To",
                    "$ref": "#/definitions/RecordRef"
                },
                "serialNumbers": {
                    "x-displayName": "Serial/Lot Numbers",
                    "type": "string"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number"
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "type": "number",
                    "format": "double"
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "type": "number",
                    "format": "double"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeAllocation": {
                    "x-displayName": "Allocation Amount",
                    "type": "number",
                    "format": "double"
                },
                "vsoeAmount": {
                    "x-displayName": "Calculated Amount",
                    "type": "number",
                    "format": "double"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "type": "string"
                },
                "vsoeDelivered": {
                    "x-displayName": "Delivered",
                    "type": "boolean"
                },
                "vsoeIsEstimate": {
                    "x-displayName": "Estimate",
                    "type": "boolean"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "type": "string"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "vsoeSopGroup": {
                    "type": "string"
                }
            }
        },
        "ShippingCarrier": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_fedexUspsMore",
                        "_ups"
                    ]
                }
            }
        },
        "CheckCreateUpdate": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Check",
            "x-has-customfields": true,
            "required": [
                "expenseList",
                "entity"
            ],
            "properties": {
                "tranId": {
                    "type": "string"
                },
                "landedCostsList": {
                    "$ref": "#/definitions/CheckLandedCostList"
                },
                "taxTotal": {
                    "format": "float",
                    "type": "number"
                },
                "memo": {
                    "type": "string"
                },
                "billPay": {
                    "type": "boolean"
                },
                "balance": {
                    "format": "float",
                    "type": "number"
                },
                "exchangeRate": {
                    "format": "float",
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "expenseList": {
                    "$ref": "#/definitions/CheckExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "address": {
                    "type": "string"
                },
                "landedCostPerLine": {
                    "type": "boolean"
                },
                "toBePrinted": {
                    "type": "boolean"
                },
                "landedCostMethod": {
                    "$ref": "#/definitions/LandedCostMethod"
                },
                "voidJournal": {
                    "$ref": "#/definitions/RecordRef"
                },
                "userTotal": {
                    "format": "float",
                    "type": "number"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "transactionNumber": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "postingPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "itemList": {
                    "$ref": "#/definitions/CheckItemList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tax2Total": {
                    "format": "float",
                    "type": "number"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "CheckItemList": {
            "properties": {
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckItem"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CheckItem": {
            "properties": {
                "line": {
                    "format": "int64",
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "tax1Amt": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Tax Amount"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "rate": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate2": {
                    "format": "double",
                    "type": "number"
                },
                "taxRate1": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Tax Rate"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "expirationDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Expiration Date"
                },
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "landedCost": {
                    "$ref": "#/definitions/LandedCost",
                    "x-displayName": "Landed Cost"
                },
                "quantity": {
                    "format": "double",
                    "type": "number"
                },
                "serialNumbers": {
                    "type": "string",
                    "x-displayName": "Serial/Lot Numbers"
                },
                "binNumbers": {
                    "type": "string",
                    "x-displayName": "Bin Number"
                },
                "inventoryDetail": {
                    "$ref": "#/definitions/InventoryDetail",
                    "x-displayName": "Inventory Detail"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Vendor Name"
                },
                "vendorName": {
                    "type": "string"
                },
                "isBillable": {
                    "type": "boolean"
                },
                "grossAmt": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Gross Amt"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CheckExpenseList": {
            "properties": {
                "expense": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckExpense"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CheckExpense": {
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Amount"
                },
                "line": {
                    "type": "integer",
                    "format": "int32"
                },
                "memo": {
                    "type": "string",
                    "x-displayName": "Memo"
                },
                "tax1Amt": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Tax Amount"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Tax Code"
                },
                "isBillable": {
                    "type": "boolean",
                    "x-displayName": "Billable"
                },
                "grossAmt": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Gross Amt"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Category"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "PST"
                },
                "taxRate1": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Tax Rate"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Account"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CheckLandedCostList": {
            "properties": {
                "landedCost": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LandedCostSummary"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "Check": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Check",
            "x-has-customfields": true,
            "required": [
                "expenseList",
                "entity"
            ],
            "properties": {
                "tranId": {
                    "type": "string"
                },
                "landedCostsList": {
                    "$ref": "#/definitions/CheckLandedCostList"
                },
                "taxTotal": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Tax"
                },
                "memo": {
                    "type": "string",
                    "x-displayName": "Memo"
                },
                "internalId": {
                    "type": "string",
                    "x-readOnly": "true"
                },
                "billPay": {
                    "type": "boolean",
                    "x-displayName": "Enable Online Bill Pay"
                },
                "balance": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Balance"
                },
                "exchangeRate": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Exchange Rate"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Currency"
                },
                "expenseList": {
                    "$ref": "#/definitions/CheckExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "address": {
                    "type": "string",
                    "x-displayName": "Address"
                },
                "landedCostPerLine": {
                    "type": "boolean",
                    "x-displayName": "Landed Cost per Line"
                },
                "toBePrinted": {
                    "type": "boolean",
                    "x-displayName": "To Be Printed"
                },
                "landedCostMethod": {
                    "$ref": "#/definitions/LandedCostMethod",
                    "x-displayName": "Cost Allocation Method"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "voidJournal": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Voided On"
                },
                "userTotal": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Amount"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Custom Form"
                },
                "transactionNumber": {
                    "type": "string",
                    "x-displayName": "Transaction Number"
                },
                "externalId": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "postingPeriod": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Posting Period"
                },
                "itemList": {
                    "$ref": "#/definitions/CheckItemList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Date"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tax2Total": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "PST"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Account"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Payee"
                },
                "status": {
                    "type": "string",
                    "x-displayName": "Status"
                }
            }
        },
        "CheckCreate": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Check",
            "x-has-customfields": true,
            "required": [
                "expenseList",
                "entity"
            ],
            "properties": {
                "tranId": {
                    "type": "string"
                },
                "landedCostsList": {
                    "$ref": "#/definitions/CheckLandedCostList"
                },
                "taxTotal": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Tax"
                },
                "memo": {
                    "type": "string",
                    "x-displayName": "Memo"
                },
                "billPay": {
                    "type": "boolean",
                    "x-displayName": "Enable Online Bill Pay"
                },
                "balance": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Balance"
                },
                "exchangeRate": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Exchange Rate"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Currency"
                },
                "expenseList": {
                    "$ref": "#/definitions/CheckExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "address": {
                    "x-displayName": "Address",
                    "type": "string"
                },
                "landedCostPerLine": {
                    "type": "boolean",
                    "x-displayName": "Landed Cost per Line"
                },
                "toBePrinted": {
                    "type": "boolean",
                    "x-displayName": "To Be Printed"
                },
                "landedCostMethod": {
                    "$ref": "#/definitions/LandedCostMethod",
                    "x-displayName": "Cost Allocation Method"
                },
                "voidJournal": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Voided On"
                },
                "userTotal": {
                    "format": "float",
                    "type": "number",
                    "x-displayName": "Amount"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Custom Form"
                },
                "transactionNumber": {
                    "type": "string",
                    "x-displayName": "Transaction Number"
                },
                "externalId": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "postingPeriod": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Posting Period"
                },
                "itemList": {
                    "$ref": "#/definitions/CheckItemList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Date"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tax2Total": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "PST"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Account"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Payee"
                },
                "status": {
                    "type": "string",
                    "x-displayName": "Status"
                },
                "internalId": {
                    "type": "string",
                    "x-readOnly": "true"
                }
            }
        },
        "CheckUpdate": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Check",
            "x-has-customfields": true,
            "properties": {
                "tranId": {
                    "type": "string"
                },
                "landedCostsList": {
                    "$ref": "#/definitions/CheckLandedCostList"
                },
                "taxTotal": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Tax"
                },
                "memo": {
                    "type": "string",
                    "x-displayName": "Memo"
                },
                "billPay": {
                    "type": "boolean",
                    "x-displayName": "Enable Online Bill Pay"
                },
                "balance": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Balance"
                },
                "exchangeRate": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Exchange Rate"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Currency"
                },
                "expenseList": {
                    "$ref": "#/definitions/CheckExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "address": {
                    "x-displayName": "Address",
                    "type": "string"
                },
                "landedCostPerLine": {
                    "type": "boolean",
                    "x-displayName": "Landed Cost per Line"
                },
                "toBePrinted": {
                    "type": "boolean",
                    "x-displayName": "To Be Printed"
                },
                "landedCostMethod": {
                    "$ref": "#/definitions/LandedCostMethod",
                    "x-displayName": "Cost Allocation Method"
                },
                "voidJournal": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Voided On"
                },
                "userTotal": {
                    "format": "float",
                    "type": "number",
                    "x-displayName": "Amount"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Custom Form"
                },
                "transactionNumber": {
                    "type": "string",
                    "x-displayName": "Transaction Number"
                },
                "externalId": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "postingPeriod": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Posting Period"
                },
                "itemList": {
                    "$ref": "#/definitions/CheckItemList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Date"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tax2Total": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "PST"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Account"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Payee"
                },
                "status": {
                    "type": "string",
                    "x-displayName": "Status"
                },
                "internalId": {
                    "type": "string",
                    "x-readOnly": "true"
                }
            }
        },
        "AccountingPeriod": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "AccountingPeriod",
            "x-has-customfields": false,
            "properties": {
                "allowNonGLChanges": {
                    "type": "boolean",
                    "x-displayName": "Allow Non-G/L Changes"
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Sub-period of"
                },
                "allLocked": {
                    "type": "boolean",
                    "x-displayName": "All Closed"
                },
                "endDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "End Date"
                },
                "isQuarter": {
                    "type": "boolean"
                },
                "arLocked": {
                    "type": "boolean",
                    "x-displayName": "A/R Closed"
                },
                "periodName": {
                    "type": "string",
                    "x-displayName": "Period Name"
                },
                "isYear": {
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string"
                },
                "closed": {
                    "type": "boolean",
                    "x-displayName": "All Closed"
                },
                "payrollLocked": {
                    "type": "boolean",
                    "x-displayName": "Payroll Closed"
                },
                "fiscalCalendar": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Fiscal Calendar"
                },
                "fiscalCalendarsList": {
                    "$ref": "#/definitions/AccountingPeriodFiscalCalendarsList"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "apLocked": {
                    "type": "boolean",
                    "x-displayName": "A/P Closed"
                },
                "closedOnDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Date Closed"
                },
                "startDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Start Date"
                },
                "isAdjust": {
                    "type": "boolean",
                    "x-displayName": "Period is Adjustment"
                }
            }
        },
        "AccountingPeriodFiscalCalendarsList": {
            "x-vendor-objectname": "AccountingPeriodFiscalCalendarsList",
            "properties": {
                "accountingPeriodFiscalCalendars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccountingPeriodFiscalCalendars"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "AccountingPeriodFiscalCalendars": {
            "x-vendor-objectname": "AccountingPeriodFiscalCalendars",
            "properties": {
                "parent": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Sub-period of"
                },
                "fiscalCalendar": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Fiscal Calendar"
                }
            }
        },
        "ReturnAuthorization": {
            "required": [
                "itemList",
                "entity",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "ReturnAuthorization",
            "x-has-customfields": true,
            "properties": {
                "accountingBookDetailList": {
                    "$ref": "#/definitions/AccountingBookDetailList"
                },
                "discountRate": {
                    "x-displayName": "Rate",
                    "type": "string"
                },
                "estGrossProfitPercent": {
                    "format": "double",
                    "type": "number"
                },
                "revenueStatus": {
                    "$ref": "#/definitions/RevenueStatus"
                },
                "debitCardIssueNo": {
                    "x-displayName": "Issue No.",
                    "type": "string"
                },
                "salesRep": {
                    "x-displayName": "Sales Rep",
                    "$ref": "#/definitions/RecordRef"
                },
                "salesEffectiveDate": {
                    "x-displayName": "Sales Effective Date",
                    "format": "date-time",
                    "type": "string"
                },
                "vatRegNum": {
                    "type": "string"
                },
                "taxTotal": {
                    "x-displayName": "Tax",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "salesTeamList": {
                    "$ref": "#/definitions/ReturnAuthorizationSalesTeamList"
                },
                "memo": {
                    "type": "string"
                },
                "source": {
                    "x-displayName": "Source",
                    "$ref": "#/definitions/RecordRef"
                },
                "intercoTransaction": {
                    "$ref": "#/definitions/RecordRef"
                },
                "subTotal": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "validFrom": {
                    "x-displayName": "Valid From / Start Date (MM/YYYY)",
                    "format": "date-time",
                    "type": "string"
                },
                "ccName": {
                    "x-displayName": "Name on Card",
                    "type": "string"
                },
                "pnRefNum": {
                    "x-displayName": "P/N Ref.",
                    "type": "string"
                },
                "syncPartnerTeams": {
                    "type": "boolean"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "ccNumber": {
                    "type": "string"
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number"
                },
                "intercoStatus": {
                    "$ref": "#/definitions/IntercoStatus"
                },
                "fax": {
                    "type": "string"
                },
                "vsoeAutoCalc": {
                    "x-displayName": "Auto Calculate VSOE Allocation",
                    "type": "boolean"
                },
                "toBeFaxed": {
                    "x-displayName": "To Be Faxed",
                    "type": "boolean"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "revRecEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "leadSource": {
                    "x-displayName": "Lead Source",
                    "$ref": "#/definitions/RecordRef"
                },
                "fxAccount": {
                    "x-displayName": "Foreign Currency Adjustment Revenue Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "contribPct": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "excludeCommission": {
                    "x-displayName": "Exclude Commissions",
                    "type": "boolean"
                },
                "taxRate": {
                    "format": "double",
                    "type": "number"
                },
                "drAccount": {
                    "x-displayName": "Deferred Revenue Reclassification Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "toBeEmailed": {
                    "x-displayName": "To Be Emailed",
                    "type": "boolean"
                },
                "giftCertTotal": {
                    "format": "double",
                    "type": "number"
                },
                "shipAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "paymentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "_class": {
                    "type": "string"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "status": {
                    "type": "string"
                },
                "tranId": {
                    "type": "string"
                },
                "revCommitStatus": {
                    "$ref": "#/definitions/RevenueCommitStatus"
                },
                "ccExpireDate": {
                    "x-displayName": "Expires (MM/YYYY)",
                    "format": "date-time",
                    "type": "string"
                },
                "creditCardProcessor": {
                    "x-displayName": "Payment Processing Profile",
                    "$ref": "#/definitions/RecordRef"
                },
                "partnersList": {
                    "$ref": "#/definitions/ReturnAuthorizationPartnersList"
                },
                "discountItem": {
                    "x-displayName": "Discount",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxItem": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "salesGroup": {
                    "x-displayName": "Choose Team",
                    "$ref": "#/definitions/RecordRef"
                },
                "orderStatus": {
                    "x-displayName": "Status",
                    "$ref": "#/definitions/ReturnAuthorizationOrderStatus"
                },
                "giftCertApplied": {
                    "format": "double",
                    "type": "number"
                },
                "total": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "currencyName": {
                    "x-displayName": "Currency",
                    "x-readOnly": true,
                    "type": "string"
                },
                "ccStreet": {
                    "x-displayName": "Card Street",
                    "type": "string"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "promoCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "ccZipCode": {
                    "x-displayName": "Card Zip Code",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "totalCostEstimate": {
                    "format": "double",
                    "type": "number"
                },
                "revRecStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "otherRefNum": {
                    "type": "string"
                },
                "toBePrinted": {
                    "x-displayName": "To Be Printed",
                    "type": "boolean"
                },
                "tranIsVsoeBundle": {
                    "x-displayName": "Transaction Is VSOE Bundle",
                    "type": "boolean"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "payPalAuthId": {
                    "x-displayName": "Authorization ID",
                    "type": "string"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean"
                },
                "externalId": {
                    "type": "string"
                },
                "messageSel": {
                    "x-displayName": "Select Message",
                    "$ref": "#/definitions/RecordRef"
                },
                "ccApproved": {
                    "x-displayName": "Credit Card Approved",
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "giftCert": {
                    "$ref": "#/definitions/RecordRef"
                },
                "recognizedRevenue": {
                    "format": "double",
                    "type": "number"
                },
                "revRecSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipAddress": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "syncSalesTeams": {
                    "type": "boolean"
                },
                "taxRegOverride": {
                    "type": "boolean"
                },
                "taxDetailsOverride": {
                    "type": "boolean"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "partner": {
                    "x-displayName": "Partner",
                    "$ref": "#/definitions/RecordRef"
                },
                "createdFrom": {
                    "x-displayName": "Created From",
                    "$ref": "#/definitions/RecordRef"
                },
                "deferredRevenue": {
                    "format": "double",
                    "type": "number"
                },
                "discountTotal": {
                    "x-displayName": "Discount Total",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "estGrossProfit": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "altSalesTotal": {
                    "format": "double",
                    "type": "number"
                },
                "itemList": {
                    "$ref": "#/definitions/ReturnAuthorizationItemList"
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "tax2Total": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number"
                },
                "creditCard": {
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecOnRevCommitment": {
                    "type": "boolean"
                },
                "payPalProcess": {
                    "x-displayName": "Process PayPal Payment",
                    "type": "boolean"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "giftCertAvailable": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "ReturnAuthorizationItemList": {
            "required": [
                "item"
            ],
            "properties": {
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReturnAuthorizationItem"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ReturnAuthorizationItem": {
            "required": [
                "item"
            ],
            "x-has-customfields": true,
            "properties": {
                "altSalesAmt": {
                    "format": "double",
                    "type": "number"
                },
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "catchUpPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "deferRevRec": {
                    "type": "boolean"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "description": {
                    "type": "string"
                },
                "giftCertFrom": {
                    "x-displayName": "From",
                    "type": "string"
                },
                "giftCertMessage": {
                    "x-displayName": "Gift Message",
                    "type": "string"
                },
                "giftCertNumber": {
                    "x-displayName": "Code",
                    "type": "string"
                },
                "giftCertRecipientEmail": {
                    "x-displayName": "Recipient Email",
                    "type": "string"
                },
                "giftCertRecipientName": {
                    "x-displayName": "Recipient Name",
                    "type": "string"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number"
                },
                "inventoryDetail": {
                    "x-displayName": "Inventory Detail",
                    "$ref": "#/definitions/InventoryDetail"
                },
                "isClosed": {
                    "type": "boolean"
                },
                "isDropShipment": {
                    "type": "boolean"
                },
                "isTaxable": {
                    "type": "boolean"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "line": {
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "orderLine": {
                    "x-displayName": "{1}",
                    "format": "int64",
                    "type": "integer"
                },
                "price": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantity": {
                    "format": "double",
                    "type": "number"
                },
                "quantityBilled": {
                    "x-displayName": "Refunded",
                    "format": "double",
                    "type": "number"
                },
                "quantityReceived": {
                    "format": "double",
                    "type": "number"
                },
                "rate": {
                    "type": "string"
                },
                "revRecEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "revRecSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "revRecTermInMonths": {
                    "format": "int64",
                    "type": "integer"
                },
                "serialNumbers": {
                    "x-displayName": "Serial/Lot Numbers",
                    "type": "string"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number"
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number"
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number"
                },
                "taxDetailsReference": {
                    "type": "string"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeAllocation": {
                    "x-displayName": "Allocation Amount",
                    "format": "double",
                    "type": "number"
                },
                "vsoeAmount": {
                    "x-displayName": "Calculated Amount",
                    "format": "double",
                    "type": "number"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "vsoeDelivered": {
                    "x-displayName": "Delivered",
                    "type": "boolean"
                },
                "vsoeIsEstimate": {
                    "x-displayName": "Estimate",
                    "type": "boolean"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                }
            }
        },
        "ReturnAuthorizationOrderStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "ReturnAuthorizationPartnersList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "partners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Partner"
                    }
                }
            }
        },
        "RevenueCommitStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "Partner": {
            "properties": {
                "contribution": {
                    "format": "double",
                    "type": "number"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "partner": {
                    "$ref": "#/definitions/RecordRef"
                },
                "partnerRole": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "ReturnAuthorizationSalesTeamList": {
            "properties": {
                "salesTeam": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReturnAuthorizationSalesTeam"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ReturnAuthorizationSalesTeam": {
            "properties": {
                "contribution": {
                    "x-displayName": "Contribution %",
                    "format": "double",
                    "type": "number"
                },
                "employee": {
                    "x-displayName": "Employee",
                    "$ref": "#/definitions/RecordRef"
                },
                "isPrimary": {
                    "x-displayName": "Primary",
                    "type": "boolean"
                },
                "salesRole": {
                    "x-displayName": "Sales Role",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "AccountingBookDetailList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "accountingBookDetail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccountingBookDetail"
                    }
                }
            }
        },
        "AccountingBookDetail": {
            "properties": {
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number"
                },
                "accountingBook": {
                    "x-displayName": "Secondary Book",
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "x-displayName": "Base Currency",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CustomerRefund": {
            "required": [
                "applyList",
                "paymentMethod",
                "customer",
                "subsidiary"
            ],
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "CustomerRefund",
            "properties": {
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "address": {
                    "x-displayName": "Address",
                    "x-readOnly": true,
                    "type": "string"
                },
                "applyList": {
                    "$ref": "#/definitions/CustomerRefundApplyList"
                },
                "arAcct": {
                    "x-displayName": "A/R Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "balance": {
                    "x-displayName": "Current Balance",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "ccApproved": {
                    "x-displayName": "Credit Card Approved",
                    "type": "boolean"
                },
                "ccExpireDate": {
                    "x-displayName": "Expires (MM/YYYY)",
                    "format": "date-time",
                    "type": "string"
                },
                "ccIsPurchaseCardBin": {
                    "x-displayName": "Purchase Card BIN",
                    "type": "boolean"
                },
                "ccName": {
                    "x-displayName": "Name on Card",
                    "type": "string"
                },
                "ccNumber": {
                    "x-displayName": "Credit Card #",
                    "type": "string"
                },
                "ccProcessAsPurchaseCard": {
                    "x-displayName": "Send Line-Level Data",
                    "type": "boolean"
                },
                "ccStreet": {
                    "x-displayName": "Card Street",
                    "type": "string"
                },
                "ccZipCode": {
                    "x-displayName": "Card Zip Code",
                    "type": "string"
                },
                "chargeIt": {
                    "x-displayName": "Process Credit Card",
                    "type": "boolean"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "x-displayName": "Date Created",
                    "format": "date-time",
                    "type": "string"
                },
                "creditCard": {
                    "x-displayName": "Cards on File",
                    "$ref": "#/definitions/RecordRef"
                },
                "creditCardProcessor": {
                    "x-displayName": "Payment Processing Profile",
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "currencyName": {
                    "x-displayName": "Currency",
                    "x-readOnly": true,
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "debitCardIssueNo": {
                    "x-displayName": "Issue No.",
                    "type": "string"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "depositList": {
                    "$ref": "#/definitions/CustomerRefundDepositList"
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "memo": {
                    "x-displayName": "Memo",
                    "type": "string"
                },
                "paymentMethod": {
                    "x-displayName": "Pmt. Meth.",
                    "$ref": "#/definitions/RecordRef"
                },
                "pnRefNum": {
                    "x-displayName": "P/N Ref.",
                    "type": "string"
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef"
                },
                "status": {
                    "x-displayName": "Status",
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "toBePrinted": {
                    "x-displayName": "To Be Printed",
                    "type": "boolean"
                },
                "total": {
                    "x-displayName": "Refund Amount",
                    "format": "double",
                    "type": "number"
                },
                "tranDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "tranId": {
                    "x-displayName": "{1} #",
                    "type": "string"
                },
                "transactionNumber": {
                    "x-displayName": "Transaction Number",
                    "type": "string"
                },
                "validFrom": {
                    "x-displayName": "Valid From / Start Date (MM/YYYY)",
                    "format": "date-time",
                    "type": "string"
                },
                "voidJournal": {
                    "x-displayName": "Voided On",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CustomerRefundDepositList": {
            "properties": {
                "customerRefundDeposit": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomerRefundDeposit"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CustomerRefundDeposit": {
            "properties": {
                "amount": {
                    "x-displayName": "Payment",
                    "format": "double",
                    "type": "number"
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "type": "string"
                },
                "depositDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer"
                },
                "line": {
                    "format": "int64",
                    "type": "integer"
                },
                "refNum": {
                    "x-displayName": "Ref No.",
                    "type": "string"
                },
                "remaining": {
                    "x-displayName": "Amount Remaining",
                    "format": "double",
                    "type": "number"
                },
                "total": {
                    "x-displayName": "Orig. Amt.",
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "CustomerRefundApplyList": {
            "required": [
                "apply",
                "replaceAll"
            ],
            "properties": {
                "apply": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomerRefundApply"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CustomerRefundApply": {
            "required": [
                "amount",
                "apply",
                "applyDate",
                "currency",
                "type",
                "doc",
                "due",
                "line"
            ],
            "properties": {
                "amount": {
                    "x-displayName": "Payment",
                    "format": "double",
                    "type": "number"
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean"
                },
                "applyDate": {
                    "x-displayName": "Date",
                    "type": "string"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "type": "string"
                },
                "doc": {
                    "type": "integer",
                    "format": "int64"
                },
                "due": {
                    "x-displayName": "Amount Remaining",
                    "format": "double",
                    "type": "number"
                },
                "line": {
                    "format": "int64",
                    "type": "integer"
                },
                "refNum": {
                    "x-displayName": "Ref No.",
                    "type": "string"
                },
                "total": {
                    "x-displayName": "Orig. Amt.",
                    "format": "double",
                    "type": "number"
                },
                "type": {
                    "x-displayName": "Type",
                    "type": "string"
                }
            }
        },
        "NonInventoryResaleItem": {
            "required": [
                "taxSchedule",
                "itemId"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "NonInventoryResaleItem",
            "x-has-customfields": true,
            "properties": {
                "parent": {
                    "x-displayName": "Subitem of",
                    "$ref": "#/definitions/RecordRef"
                },
                "pageTitle": {
                    "x-displayName": "Page Title",
                    "type": "string"
                },
                "pricingGroup": {
                    "x-displayName": "Pricing Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "salesDescription": {
                    "x-displayName": "Sales Description",
                    "type": "string"
                },
                "isHazmatItem": {
                    "type": "boolean"
                },
                "saleUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailList"
                },
                "quantityPricingSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "hazmatShippingName": {
                    "type": "string"
                },
                "defaultItemShipMethod": {
                    "x-displayName": "Default Shipping Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "createRevenuePlansOn": {
                    "x-displayName": "Create Revenue Plans On",
                    "$ref": "#/definitions/ItemCreateRevenuePlansOn"
                },
                "productFeedList": {
                    "$ref": "#/definitions/ProductFeedList"
                },
                "scheduleBQuantity": {
                    "x-displayName": "Schedule B Quantity",
                    "format": "int64",
                    "type": "integer"
                },
                "isSpecialOrderItem": {
                    "x-displayName": "Special Order Item",
                    "type": "boolean"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "isGcoCompliant": {
                    "x-displayName": "Google Checkout Compliant",
                    "type": "boolean"
                },
                "vsoeDelivered": {
                    "x-displayName": "Default as Delivered",
                    "type": "boolean"
                },
                "includeChildren": {
                    "x-displayName": "Include Children",
                    "type": "boolean"
                },
                "incomeAccount": {
                    "x-displayName": "Income Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "manufacturerAddr1": {
                    "x-displayName": "Manufacturer Address",
                    "type": "string"
                },
                "softDescriptor": {
                    "x-displayName": "Soft Descriptor",
                    "type": "string"
                },
                "matrixType": {
                    "x-displayName": "Matrix Type",
                    "$ref": "#/definitions/ItemMatrixType"
                },
                "mpn": {
                    "x-displayName": "Manufacturer Part Number",
                    "type": "string"
                },
                "pricesIncludeTax": {
                    "x-displayName": "Prices Include Tax",
                    "type": "boolean"
                },
                "metaTagHtml": {
                    "x-displayName": "Meta Tag HTML",
                    "type": "string"
                },
                "pricingMatrix": {
                    "$ref": "#/definitions/PricingMatrix"
                },
                "shipPackage": {
                    "x-displayName": "Package",
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "itemId": {
                    "x-displayName": "Item Name/Number",
                    "type": "string"
                },
                "purchaseUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "onSpecial": {
                    "x-displayName": "On Special",
                    "type": "boolean"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                },
                "purchaseDescription": {
                    "x-displayName": "Purchase Description",
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "shopzillaCategoryId": {
                    "x-displayName": "Shopzilla Category ID",
                    "format": "int64",
                    "type": "integer"
                },
                "maxDonationAmount": {
                    "x-displayName": "Maximum Variable Amount",
                    "format": "double",
                    "type": "number"
                },
                "translationsList": {
                    "$ref": "#/definitions/TranslationList"
                },
                "weightUnit": {
                    "$ref": "#/definitions/ItemWeightUnit"
                },
                "isFulfillable": {
                    "x-displayName": "Can be Fulfilled",
                    "type": "boolean"
                },
                "manufacturerTariff": {
                    "x-displayName": "HS Tariff Number",
                    "type": "string"
                },
                "displayName": {
                    "x-displayName": "Display Name/Code",
                    "type": "string"
                },
                "overallQuantityPricingType": {
                    "x-displayName": "Calculate Quantity Discounts",
                    "$ref": "#/definitions/ItemOverallQuantityPricingType"
                },
                "siteCategoryList": {
                    "$ref": "#/definitions/SiteCategoryList"
                },
                "deferralAccount": {
                    "x-displayName": "Deferred Expense",
                    "$ref": "#/definitions/RecordRef"
                },
                "specialsDescription": {
                    "x-displayName": "Specials Description",
                    "type": "string"
                },
                "featuredDescription": {
                    "x-displayName": "Featured Description",
                    "type": "string"
                },
                "scheduleBCode": {
                    "$ref": "#/definitions/ScheduleBCode"
                },
                "urlComponent": {
                    "x-displayName": "URL Component",
                    "type": "string"
                },
                "manufacturer": {
                    "x-displayName": "Manufacturer",
                    "type": "string"
                },
                "receiptAmount": {
                    "x-displayName": "Vendor Bill - Item Receipt Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "costCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "itemCarrier": {
                    "x-displayName": "Carrier",
                    "$ref": "#/definitions/ShippingCarrier"
                },
                "shoppingDotComCategory": {
                    "x-displayName": "Shopping.com Category",
                    "type": "string"
                },
                "storeItemTemplate": {
                    "x-displayName": "Item Drilldown Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "vendor": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRef"
                },
                "dontShowPrice": {
                    "x-displayName": "Don't Show Price",
                    "type": "boolean"
                },
                "handlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "type": "number"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "x-readOnly": true,
                    "type": "string"
                },
                "deferRevRec": {
                    "x-displayName": "Hold Revenue Recognition",
                    "type": "boolean"
                },
                "directRevenuePosting": {
                    "type": "boolean"
                },
                "outOfStockMessage": {
                    "x-displayName": "Out Of Stock Message",
                    "type": "string"
                },
                "minimumQuantity": {
                    "x-displayName": "Minimum Order Qty",
                    "type": "integer",
                    "format": "int64"
                },
                "revenueRecognitionRule": {
                    "x-displayName": "Revenue Recognition Rule",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecForecastRule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipIndividually": {
                    "x-displayName": "Ships Individually",
                    "type": "boolean"
                },
                "multManufactureAddr": {
                    "x-displayName": "Multiple Manufacturer Addresses",
                    "type": "boolean"
                },
                "purchaseOrderQuantity": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "billingSchedule": {
                    "x-displayName": "Billing Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderAmount": {
                    "x-displayName": "Vendor Bill - Purchase Order Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "hazmatHazardClass": {
                    "type": "string"
                },
                "hazmatItemUnitsQty": {
                    "format": "double",
                    "type": "number"
                },
                "intercoIncomeAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "manufacturerState": {
                    "x-displayName": "Manufacturer State",
                    "type": "string"
                },
                "amortizationPeriod": {
                    "x-displayName": "Amortization Period",
                    "format": "int64",
                    "type": "integer"
                },
                "isDropShipItem": {
                    "x-displayName": "Drop Ship Item",
                    "type": "boolean"
                },
                "storeDescription": {
                    "x-displayName": "Store Description",
                    "type": "string"
                },
                "purchaseTaxCode": {
                    "x-displayName": "Purchase Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "x-displayName": "Date Created",
                    "format": "date-time",
                    "type": "string"
                },
                "manufacturerZip": {
                    "x-displayName": "Manufacturer Zip Code",
                    "type": "string"
                },
                "matrixItemNameTemplate": {
                    "type": "string"
                },
                "matrixOptionList": {
                    "$ref": "#/definitions/MatrixOptionList"
                },
                "dropshipExpenseAccount": {
                    "x-displayName": "Dropship expense account",
                    "$ref": "#/definitions/RecordRef"
                },
                "availableToPartners": {
                    "x-displayName": "Available to Adv. Partners",
                    "type": "boolean"
                },
                "itemVendorList": {
                    "$ref": "#/definitions/ItemVendorList"
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "type": "boolean"
                },
                "excludeFromSitemap": {
                    "x-displayName": "Exclude from Sitemap",
                    "type": "boolean"
                },
                "deferredRevenueAccount": {
                    "x-displayName": "Deferred Revenue Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "hazmatId": {
                    "type": "string"
                },
                "offerSupport": {
                    "x-displayName": "Offer Support",
                    "type": "boolean"
                },
                "residual": {
                    "x-displayName": "Residual",
                    "type": "string"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "intercoExpenseAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "enforceMinQtyInternally": {
                    "x-displayName": "Enforce Internally",
                    "type": "boolean"
                },
                "useMarginalRates": {
                    "x-displayName": "Use Marginal Rates",
                    "type": "boolean"
                },
                "weightUnits": {
                    "type": "string"
                },
                "presentationItemList": {
                    "$ref": "#/definitions/PresentationItemList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "countryOfManufacture": {
                    "x-displayName": "Manufacturer Country",
                    "$ref": "#/definitions/Country"
                },
                "manufacturerCity": {
                    "x-displayName": "Manufacturer City",
                    "type": "string"
                },
                "weight": {
                    "x-displayName": "Item Weight",
                    "format": "double",
                    "type": "number"
                },
                "copyDescription": {
                    "x-displayName": "Copy from Sales Order",
                    "type": "boolean"
                },
                "taxSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "issueProduct": {
                    "x-displayName": "Product",
                    "$ref": "#/definitions/RecordRef"
                },
                "unitsType": {
                    "x-displayName": "Units Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorName": {
                    "x-displayName": "Vendor Name/Code",
                    "type": "string"
                },
                "stockDescription": {
                    "x-displayName": "Stock Description",
                    "type": "string"
                },
                "itemOptionsList": {
                    "$ref": "#/definitions/ItemOptionsList"
                },
                "revenueAllocationGroup": {
                    "x-displayName": "Revenue Allocation Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "receiptQuantityDiff": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "isDonationItem": {
                    "x-displayName": "Variable Amount",
                    "type": "boolean"
                },
                "itemRevenueCategory": {
                    "x-displayName": "Item Revenue Category",
                    "$ref": "#/definitions/RecordRef"
                },
                "expenseAccount": {
                    "x-displayName": "Expense Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "preferenceCriterion": {
                    "x-displayName": "Preference Criterion",
                    "$ref": "#/definitions/ItemPreferenceCriterion"
                },
                "producer": {
                    "x-displayName": "Producer",
                    "type": "boolean"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costEstimateUnits": {
                    "type": "string"
                },
                "searchKeywords": {
                    "x-displayName": "Search Keywords",
                    "type": "string"
                },
                "receiptQuantity": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "amortizationTemplate": {
                    "x-displayName": "Amortization Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "isOnline": {
                    "x-displayName": "Display in Web Site",
                    "type": "boolean"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "hazmatItemUnits": {
                    "type": "string"
                },
                "handlingCostUnits": {
                    "type": "string"
                },
                "showDefaultDonationAmount": {
                    "x-displayName": "Show Default Amount",
                    "type": "boolean"
                },
                "generateAccruals": {
                    "x-displayName": "Generate Accruals",
                    "type": "boolean"
                },
                "rate": {
                    "x-displayName": "Price",
                    "format": "double",
                    "type": "number"
                },
                "purchaseOrderQuantityDiff": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "noPriceMessage": {
                    "x-displayName": "No Price Message",
                    "type": "string"
                },
                "hazmatPackingGroup": {
                    "$ref": "#/definitions/HazmatPackingGroup"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "outOfStockBehavior": {
                    "x-displayName": "Out Of Stock Behavior",
                    "$ref": "#/definitions/ItemOutOfStockBehavior"
                },
                "upcCode": {
                    "x-displayName": "UPC Code",
                    "type": "string"
                },
                "nexTagCategory": {
                    "x-displayName": "NexTag Category",
                    "type": "string"
                },
                "storeDisplayImage": {
                    "x-displayName": "Item Display Image",
                    "$ref": "#/definitions/RecordRef"
                },
                "storeDisplayThumbnail": {
                    "x-displayName": "Item Display Thumbnail",
                    "$ref": "#/definitions/RecordRef"
                },
                "cost": {
                    "x-displayName": "Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "itemShipMethodList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "lastModifiedDate": {
                    "x-displayName": "Last Modified",
                    "format": "date-time",
                    "type": "string"
                },
                "manufacturerTaxId": {
                    "x-displayName": "Manufacturer Tax Id",
                    "type": "string"
                },
                "salesTaxCode": {
                    "x-displayName": "Sales Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean"
                },
                "minimumQuantityUnits": {
                    "type": "string"
                },
                "relatedItemsDescription": {
                    "x-displayName": "Related Items Description",
                    "type": "string"
                },
                "storeDisplayName": {
                    "x-displayName": "Store Display Name",
                    "type": "string"
                },
                "revRecSchedule": {
                    "x-displayName": "Revenue Recognition Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "scheduleBNumber": {
                    "x-displayName": "Schedule B Number",
                    "type": "string"
                },
                "shippingCostUnits": {
                    "type": "string"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number"
                },
                "storeDetailedDescription": {
                    "x-displayName": "Detailed Description",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costUnits": {
                    "type": "string"
                },
                "sitemapPriority": {
                    "x-displayName": "Sitemap Priority",
                    "$ref": "#/definitions/SitemapPriority"
                }
            }
        },
        "ItemCreateRevenuePlansOn": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_billing",
                        "_fulfillment",
                        "_projectProgress",
                        "_revenueArrangementCreation"
                    ]
                }
            }
        },
        "ServiceResaleItem": {
            "required": [
                "taxSchedule",
                "itemId"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "ServiceResaleItem",
            "x-has-customfields": true,
            "properties": {
                "parent": {
                    "x-displayName": "Subitem of",
                    "$ref": "#/definitions/RecordRef"
                },
                "pageTitle": {
                    "x-displayName": "Page Title",
                    "type": "string"
                },
                "pricingGroup": {
                    "x-displayName": "Pricing Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "salesDescription": {
                    "x-displayName": "Sales Description",
                    "type": "string"
                },
                "saleUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailList"
                },
                "billingRatesMatrix": {
                    "$ref": "#/definitions/BillingRatesMatrix"
                },
                "quantityPricingSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "createRevenuePlansOn": {
                    "x-displayName": "Create Revenue Plans On",
                    "$ref": "#/definitions/ItemCreateRevenuePlansOn"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "isGcoCompliant": {
                    "x-displayName": "Google Checkout Compliant",
                    "type": "boolean"
                },
                "vsoeDelivered": {
                    "x-displayName": "Default as Delivered",
                    "type": "boolean"
                },
                "includeChildren": {
                    "x-displayName": "Include Children",
                    "type": "boolean"
                },
                "incomeAccount": {
                    "x-displayName": "Income Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "manufacturingChargeItem": {
                    "x-displayName": "Manufacturing Charge Item",
                    "type": "boolean"
                },
                "softDescriptor": {
                    "x-displayName": "Soft Descriptor",
                    "type": "string"
                },
                "matrixType": {
                    "x-displayName": "Matrix Type",
                    "$ref": "#/definitions/ItemMatrixType"
                },
                "pricesIncludeTax": {
                    "x-displayName": "Prices Include Tax",
                    "type": "boolean"
                },
                "metaTagHtml": {
                    "x-displayName": "Meta Tag HTML",
                    "type": "string"
                },
                "pricingMatrix": {
                    "$ref": "#/definitions/PricingMatrix"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "itemId": {
                    "x-displayName": "Item Name/Number",
                    "type": "string"
                },
                "purchaseUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "onSpecial": {
                    "x-displayName": "On Special",
                    "type": "boolean"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                },
                "purchaseDescription": {
                    "x-displayName": "Purchase Description",
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "maxDonationAmount": {
                    "x-displayName": "Maximum Variable Amount",
                    "format": "double",
                    "type": "number"
                },
                "translationsList": {
                    "$ref": "#/definitions/TranslationList"
                },
                "isFulfillable": {
                    "x-displayName": "Can be Fulfilled",
                    "type": "boolean"
                },
                "displayName": {
                    "x-displayName": "Display Name/Code",
                    "type": "string"
                },
                "overallQuantityPricingType": {
                    "x-displayName": "Calculate Quantity Discounts",
                    "$ref": "#/definitions/ItemOverallQuantityPricingType"
                },
                "siteCategoryList": {
                    "$ref": "#/definitions/SiteCategoryList"
                },
                "deferralAccount": {
                    "x-displayName": "Deferred Expense",
                    "$ref": "#/definitions/RecordRef"
                },
                "specialsDescription": {
                    "x-displayName": "Specials Description",
                    "type": "string"
                },
                "featuredDescription": {
                    "x-displayName": "Featured Description",
                    "type": "string"
                },
                "urlComponent": {
                    "x-displayName": "URL Component",
                    "type": "string"
                },
                "receiptAmount": {
                    "x-displayName": "Vendor Bill - Item Receipt Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "costCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "storeItemTemplate": {
                    "x-displayName": "Item Drilldown Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "vendor": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRef"
                },
                "dontShowPrice": {
                    "x-displayName": "Don't Show Price",
                    "type": "boolean"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "x-readOnly": true,
                    "type": "string"
                },
                "deferRevRec": {
                    "x-displayName": "Hold Revenue Recognition",
                    "type": "boolean"
                },
                "outOfStockMessage": {
                    "x-displayName": "Out Of Stock Message",
                    "type": "string"
                },
                "minimumQuantity": {
                    "x-displayName": "Minimum Order Qty",
                    "format": "int64",
                    "type": "integer"
                },
                "revenueRecognitionRule": {
                    "x-displayName": "Revenue Recognition Rule",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderQuantity": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "billingSchedule": {
                    "x-displayName": "Billing Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderAmount": {
                    "x-displayName": "Vendor Bill - Purchase Order Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "intercoIncomeAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amortizationPeriod": {
                    "x-displayName": "Amortization Period",
                    "format": "int64",
                    "type": "integer"
                },
                "storeDescription": {
                    "x-displayName": "Store Description",
                    "type": "string"
                },
                "purchaseTaxCode": {
                    "x-displayName": "Purchase Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "x-displayName": "Date Created",
                    "format": "date-time",
                    "type": "string"
                },
                "matrixOptionList": {
                    "$ref": "#/definitions/MatrixOptionList"
                },
                "availableToPartners": {
                    "x-displayName": "Available to Adv. Partners",
                    "type": "boolean"
                },
                "itemVendorList": {
                    "$ref": "#/definitions/ItemVendorList"
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "type": "boolean"
                },
                "excludeFromSitemap": {
                    "x-displayName": "Exclude from Sitemap",
                    "type": "boolean"
                },
                "itemTaskTemplatesList": {
                    "$ref": "#/definitions/ServiceItemTaskTemplatesList"
                },
                "deferredRevenueAccount": {
                    "x-displayName": "Deferred Revenue Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "offerSupport": {
                    "x-displayName": "Offer Support",
                    "type": "boolean"
                },
                "residual": {
                    "x-displayName": "Residual",
                    "type": "string"
                },
                "createJob": {
                    "x-displayName": "Create {1}",
                    "type": "boolean"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "intercoExpenseAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "enforceMinQtyInternally": {
                    "x-displayName": "Enforce Internally",
                    "type": "boolean"
                },
                "useMarginalRates": {
                    "x-displayName": "Use Marginal Rates",
                    "type": "boolean"
                },
                "presentationItemList": {
                    "$ref": "#/definitions/PresentationItemList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "taxSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "issueProduct": {
                    "x-displayName": "Product",
                    "$ref": "#/definitions/RecordRef"
                },
                "unitsType": {
                    "x-displayName": "Units Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorName": {
                    "x-displayName": "Vendor Name/Code",
                    "type": "string"
                },
                "itemOptionsList": {
                    "$ref": "#/definitions/ItemOptionsList"
                },
                "revenueAllocationGroup": {
                    "x-displayName": "Revenue Allocation Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "receiptQuantityDiff": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "isDonationItem": {
                    "x-displayName": "Variable Amount",
                    "type": "boolean"
                },
                "itemRevenueCategory": {
                    "x-displayName": "Item Revenue Category",
                    "$ref": "#/definitions/RecordRef"
                },
                "expenseAccount": {
                    "x-displayName": "Expense Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costEstimateUnits": {
                    "type": "string"
                },
                "searchKeywords": {
                    "x-displayName": "Search Keywords",
                    "type": "string"
                },
                "receiptQuantity": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "amortizationTemplate": {
                    "x-displayName": "Amortization Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "isOnline": {
                    "x-displayName": "Display in Web Site",
                    "type": "boolean"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "showDefaultDonationAmount": {
                    "x-displayName": "Show Default Amount",
                    "type": "boolean"
                },
                "generateAccruals": {
                    "x-displayName": "Generate Accruals",
                    "type": "boolean"
                },
                "rate": {
                    "x-displayName": "Rate",
                    "format": "double",
                    "type": "number"
                },
                "purchaseOrderQuantityDiff": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "noPriceMessage": {
                    "x-displayName": "No Price Message",
                    "type": "string"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "outOfStockBehavior": {
                    "x-displayName": "Out Of Stock Behavior",
                    "$ref": "#/definitions/ItemOutOfStockBehavior"
                },
                "upcCode": {
                    "x-displayName": "UPC Code",
                    "type": "string"
                },
                "storeDisplayImage": {
                    "x-displayName": "Item Display Image",
                    "$ref": "#/definitions/RecordRef"
                },
                "storeDisplayThumbnail": {
                    "x-displayName": "Item Display Thumbnail",
                    "$ref": "#/definitions/RecordRef"
                },
                "cost": {
                    "x-displayName": "Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "lastModifiedDate": {
                    "x-displayName": "Last Modified",
                    "format": "date-time",
                    "type": "string"
                },
                "salesTaxCode": {
                    "x-displayName": "Sales Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean"
                },
                "minimumQuantityUnits": {
                    "type": "string"
                },
                "relatedItemsDescription": {
                    "x-displayName": "Related Items Description",
                    "type": "string"
                },
                "storeDisplayName": {
                    "x-displayName": "Store Display Name",
                    "type": "string"
                },
                "revRecSchedule": {
                    "x-displayName": "Revenue Recognition Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number"
                },
                "storeDetailedDescription": {
                    "x-displayName": "Detailed Description",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costUnits": {
                    "type": "string"
                },
                "sitemapPriority": {
                    "x-displayName": "Sitemap Priority",
                    "$ref": "#/definitions/SitemapPriority"
                }
            }
        },
        "BillingRatesMatrix": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "billingRates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BillingRates"
                    }
                }
            }
        },
        "BillingRates": {
            "properties": {
                "rateList": {
                    "$ref": "#/definitions/RateList"
                },
                "billingClass": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "RateList": {
            "properties": {
                "rate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Rate"
                    }
                }
            }
        },
        "Rate": {
            "properties": {
                "priceLevel": {
                    "$ref": "#/definitions/RecordRef"
                },
                "value": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "LotNumberedAssemblyItem": {
            "required": [
                "taxSchedule",
                "itemId",
                "memberList"
            ],
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "LotNumberedAssemblyItem",
            "properties": {
                "parent": {
                    "x-displayName": "Subitem of",
                    "$ref": "#/definitions/RecordRef"
                },
                "vendor": {
                    "$ref": "#/definitions/RecordRef"
                },
                "printItems": {
                    "x-displayName": "Print Items",
                    "type": "boolean"
                },
                "pricingGroup": {
                    "x-displayName": "Pricing Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailList"
                },
                "quantityPricingSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityOnOrder": {
                    "x-displayName": "Quantity On Order",
                    "format": "double",
                    "type": "number"
                },
                "hazmatShippingName": {
                    "type": "string"
                },
                "createRevenuePlansOn": {
                    "x-displayName": "Create Revenue Plans On",
                    "$ref": "#/definitions/ItemCreateRevenuePlansOn"
                },
                "productFeedList": {
                    "$ref": "#/definitions/ProductFeedList"
                },
                "vsoeDelivered": {
                    "x-displayName": "Default as Delivered",
                    "type": "boolean"
                },
                "buildTime": {
                    "x-displayName": "Work Order Lead Time",
                    "format": "double",
                    "type": "number"
                },
                "includeChildren": {
                    "x-displayName": "Include Children",
                    "type": "boolean"
                },
                "incomeAccount": {
                    "x-displayName": "Income Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "demandTimeFence": {
                    "x-displayName": "Demand Time Fence",
                    "format": "double",
                    "type": "number"
                },
                "prodPriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "metaTagHtml": {
                    "x-displayName": "Meta Tag HTML",
                    "type": "string"
                },
                "pricingMatrix": {
                    "$ref": "#/definitions/PricingMatrix"
                },
                "invtCountInterval": {
                    "format": "double",
                    "type": "number"
                },
                "shipPackage": {
                    "x-displayName": "Package",
                    "$ref": "#/definitions/RecordRef"
                },
                "stockUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "itemId": {
                    "x-displayName": "Item Name/Number",
                    "type": "string"
                },
                "purchaseUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "rescheduleOutDays": {
                    "x-displayName": "Reschedule Out Days",
                    "format": "int64",
                    "type": "integer"
                },
                "lastPurchasePrice": {
                    "x-displayName": "Last Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "onSpecial": {
                    "x-displayName": "On Special",
                    "type": "boolean"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "shopzillaCategoryId": {
                    "x-displayName": "Shopzilla Category ID",
                    "format": "int64",
                    "type": "integer"
                },
                "safetyStockLevel": {
                    "x-displayName": "Safety Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "displayName": {
                    "x-displayName": "Display Name/Code",
                    "type": "string"
                },
                "specialsDescription": {
                    "x-displayName": "Specials Description",
                    "type": "string"
                },
                "receiptAmount": {
                    "x-displayName": "Vendor Bill - Item Receipt Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "costCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "memberList": {
                    "$ref": "#/definitions/ItemMemberList"
                },
                "prodQtyVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "binNumberList": {
                    "$ref": "#/definitions/InventoryItemBinNumberList"
                },
                "dontShowPrice": {
                    "x-displayName": "Don't Show Price",
                    "type": "boolean"
                },
                "supplyType": {
                    "x-displayName": "Supply Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "handlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "type": "number"
                },
                "outOfStockMessage": {
                    "x-displayName": "Out Of Stock Message",
                    "type": "string"
                },
                "preferredStockLevel": {
                    "x-displayName": "Preferred Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "multManufactureAddr": {
                    "x-displayName": "Multiple Manufacturer Addresses",
                    "type": "boolean"
                },
                "wipVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderAmount": {
                    "x-displayName": "Vendor Bill - Purchase Order Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "hazmatHazardClass": {
                    "type": "string"
                },
                "hazmatItemUnitsQty": {
                    "format": "double",
                    "type": "number"
                },
                "manufacturerState": {
                    "x-displayName": "Manufacturer State",
                    "type": "string"
                },
                "defaultReturnCost": {
                    "format": "double",
                    "type": "number"
                },
                "purchaseTaxCode": {
                    "x-displayName": "Purchase Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "x-displayName": "Date Created",
                    "format": "date-time",
                    "type": "string"
                },
                "availableToPartners": {
                    "x-displayName": "Available to Adv. Partners",
                    "type": "boolean"
                },
                "itemVendorList": {
                    "$ref": "#/definitions/ItemVendorList"
                },
                "nextInvtCountDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "excludeFromSitemap": {
                    "x-displayName": "Exclude from Sitemap",
                    "type": "boolean"
                },
                "deferredRevenueAccount": {
                    "x-displayName": "Deferred Revenue Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "enforceMinQtyInternally": {
                    "x-displayName": "Enforce Internally",
                    "type": "boolean"
                },
                "autoReorderPoint": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "gainLossAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "fixedLotSize": {
                    "x-displayName": "Fixed Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "presentationItemList": {
                    "$ref": "#/definitions/PresentationItemList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number"
                },
                "useComponentYield": {
                    "x-displayName": "Use Component Yield",
                    "type": "boolean"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "purchasePriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "manufacturerCity": {
                    "x-displayName": "Manufacturer City",
                    "type": "string"
                },
                "weight": {
                    "x-displayName": "Item Weight",
                    "format": "double",
                    "type": "number"
                },
                "taxSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "issueProduct": {
                    "x-displayName": "Product",
                    "$ref": "#/definitions/RecordRef"
                },
                "scrapAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorName": {
                    "x-displayName": "Vendor Name/Code",
                    "type": "string"
                },
                "stockDescription": {
                    "x-displayName": "Stock Description",
                    "type": "string"
                },
                "revenueAllocationGroup": {
                    "x-displayName": "Revenue Allocation Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "defaultRevision": {
                    "x-displayName": "Default Revision",
                    "type": "string"
                },
                "quantityBackOrdered": {
                    "x-displayName": "Quantity Back Ordered",
                    "format": "double",
                    "type": "number"
                },
                "receiptQuantityDiff": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "isDonationItem": {
                    "x-displayName": "Variable Amount",
                    "type": "boolean"
                },
                "isStorePickupAllowed": {
                    "type": "boolean"
                },
                "itemRevenueCategory": {
                    "x-displayName": "Item Revenue Category",
                    "$ref": "#/definitions/RecordRef"
                },
                "effectiveBomControl": {
                    "x-displayName": "Effective BOM Control",
                    "$ref": "#/definitions/AssemblyItemEffectiveBomControl"
                },
                "preferenceCriterion": {
                    "x-displayName": "Preference Criterion",
                    "$ref": "#/definitions/ItemPreferenceCriterion"
                },
                "reorderPoint": {
                    "x-displayName": "Build Point",
                    "format": "double",
                    "type": "number"
                },
                "manufactureraddr1": {
                    "x-displayName": "Manufacturer Address",
                    "type": "string"
                },
                "searchKeywords": {
                    "x-displayName": "Search Keywords",
                    "type": "string"
                },
                "receiptQuantity": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "description": {
                    "x-displayName": "Description",
                    "type": "string"
                },
                "rate": {
                    "x-displayName": "Rate",
                    "format": "double",
                    "type": "number"
                },
                "noPriceMessage": {
                    "x-displayName": "No Price Message",
                    "type": "string"
                },
                "hazmatPackingGroup": {
                    "$ref": "#/definitions/HazmatPackingGroup"
                },
                "outOfStockBehavior": {
                    "x-displayName": "Out Of Stock Behavior",
                    "$ref": "#/definitions/ItemOutOfStockBehavior"
                },
                "upcCode": {
                    "x-displayName": "UPC Code",
                    "type": "string"
                },
                "expirationDate": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "type": "string"
                },
                "storeDisplayImage": {
                    "x-displayName": "Item Display Image",
                    "$ref": "#/definitions/RecordRef"
                },
                "storeDisplayThumbnail": {
                    "x-displayName": "Item Display Thumbnail",
                    "$ref": "#/definitions/RecordRef"
                },
                "billQtyVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesTaxCode": {
                    "x-displayName": "Sales Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean"
                },
                "relatedItemsDescription": {
                    "x-displayName": "Related Items Description",
                    "type": "string"
                },
                "locationsList": {
                    "$ref": "#/definitions/LotNumberedInventoryItemLocationsList"
                },
                "storeDisplayName": {
                    "x-displayName": "Store Display Name",
                    "type": "string"
                },
                "unbuildVarianceAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "scheduleBNumber": {
                    "x-displayName": "Schedule B Number",
                    "type": "string"
                },
                "storeDetailedDescription": {
                    "x-displayName": "Detailed Description",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "sitemapPriority": {
                    "x-displayName": "Sitemap Priority",
                    "$ref": "#/definitions/SitemapPriority"
                },
                "assetAccount": {
                    "x-displayName": "Asset Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "pageTitle": {
                    "x-displayName": "Page Title",
                    "type": "string"
                },
                "quantityCommitted": {
                    "x-displayName": "Quantity Committed",
                    "format": "double",
                    "type": "number"
                },
                "autoPreferredStockLevel": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "isSpecialWorkOrderItem": {
                    "x-displayName": "Special Work Order Item",
                    "type": "boolean"
                },
                "numbersList": {
                    "$ref": "#/definitions/LotNumberedInventoryItemNumbersList"
                },
                "isHazmatItem": {
                    "type": "boolean"
                },
                "saleUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "billPriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "defaultItemShipMethod": {
                    "x-displayName": "defaultItemShipMethod",
                    "$ref": "#/definitions/RecordRef"
                },
                "roundUpAsComponent": {
                    "x-displayName": "Round Up Quantity as Component",
                    "type": "boolean"
                },
                "scheduleBQuantity": {
                    "x-displayName": "Schedule B Quantity",
                    "format": "int64",
                    "type": "integer"
                },
                "quantityAvailable": {
                    "x-displayName": "Quantity Available",
                    "format": "double",
                    "type": "number"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "isGcoCompliant": {
                    "x-displayName": "Google Checkout Compliant",
                    "type": "boolean"
                },
                "preferredStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "double",
                    "type": "number"
                },
                "softDescriptor": {
                    "x-displayName": "Soft Descriptor",
                    "$ref": "#/definitions/RecordRef"
                },
                "mpn": {
                    "x-displayName": "Manufacturer Part Number",
                    "type": "string"
                },
                "intercoCogsAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "pricesIncludeTax": {
                    "x-displayName": "Prices Include Tax",
                    "type": "boolean"
                },
                "alternateDemandSourceItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                },
                "purchaseDescription": {
                    "x-displayName": "Purchase Description",
                    "type": "string"
                },
                "demandSource": {
                    "x-displayName": "Demand Source",
                    "$ref": "#/definitions/RecordRef"
                },
                "maxDonationAmount": {
                    "x-displayName": "Maximum Variable Amount",
                    "format": "double",
                    "type": "number"
                },
                "transferPrice": {
                    "format": "double",
                    "type": "number"
                },
                "translationsList": {
                    "$ref": "#/definitions/TranslationList"
                },
                "weightUnit": {
                    "$ref": "#/definitions/ItemWeightUnit"
                },
                "rescheduleInDays": {
                    "x-displayName": "Reschedule In Days",
                    "format": "int64",
                    "type": "integer"
                },
                "manufacturerTariff": {
                    "x-displayName": "HS Tariff Number",
                    "type": "string"
                },
                "matchBillToReceipt": {
                    "type": "boolean"
                },
                "overallQuantityPricingType": {
                    "x-displayName": "Calculate Quantity Discounts",
                    "$ref": "#/definitions/ItemOverallQuantityPricingType"
                },
                "siteCategoryList": {
                    "$ref": "#/definitions/SiteCategoryList"
                },
                "featuredDescription": {
                    "x-displayName": "Featured Description",
                    "type": "string"
                },
                "leadTime": {
                    "x-displayName": "Lead Time",
                    "format": "double",
                    "type": "number"
                },
                "scheduleBCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "urlComponent": {
                    "x-displayName": "URL Component",
                    "type": "string"
                },
                "manufacturer": {
                    "x-displayName": "Manufacturer",
                    "type": "string"
                },
                "supplyTimeFence": {
                    "x-displayName": "Planning Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "demandModifier": {
                    "x-displayName": "Estimated Demand Change",
                    "format": "double",
                    "type": "number"
                },
                "itemCarrier": {
                    "x-displayName": "Carrier",
                    "$ref": "#/definitions/ShippingCarrier"
                },
                "shoppingDotComCategory": {
                    "x-displayName": "Shopping.com Category",
                    "type": "string"
                },
                "storeItemTemplate": {
                    "x-displayName": "Item Drilldown Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "useBins": {
                    "x-displayName": "Use Bins",
                    "type": "boolean"
                },
                "supplyLotSizingMethod": {
                    "x-displayName": "Lot Sizing Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "lastInvtCountDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "minimumQuantity": {
                    "x-displayName": "Minimum Order Qty",
                    "format": "double",
                    "type": "number"
                },
                "revenueRecognitionRule": {
                    "x-displayName": "Revenue Recognition Rule",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecForecastRule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipIndividually": {
                    "x-displayName": "Ships Individually",
                    "type": "boolean"
                },
                "supplyReplenishmentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costingMethod": {
                    "x-displayName": "Costing Method",
                    "x-readOnly": true,
                    "$ref": "#/definitions/ItemCostingMethod"
                },
                "purchaseOrderQuantity": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "billingSchedule": {
                    "x-displayName": "Billing Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "serialNumbers": {
                    "x-displayName": "Lot Numbers",
                    "type": "string"
                },
                "costingMethodDisplay": {
                    "x-displayName": "Costing Method",
                    "x-readOnly": true,
                    "type": "string"
                },
                "wipAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "intercoIncomeAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "storeDescription": {
                    "x-displayName": "Store Description",
                    "type": "string"
                },
                "matrixItemNameTemplate": {
                    "type": "string"
                },
                "manufacturerZip": {
                    "x-displayName": "Manufacturer Zip Code",
                    "type": "string"
                },
                "dropshipExpenseAccount": {
                    "x-displayName": "Dropship expense account",
                    "$ref": "#/definitions/RecordRef"
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "type": "boolean"
                },
                "itemNumberOptionsList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "hazmatId": {
                    "type": "string"
                },
                "offerSupport": {
                    "x-displayName": "Offer Support",
                    "type": "boolean"
                },
                "billExchRateVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "reorderMultiple": {
                    "x-displayName": "Reorder Multiple",
                    "format": "int64",
                    "type": "integer"
                },
                "useMarginalRates": {
                    "x-displayName": "Use Marginal Rates",
                    "type": "boolean"
                },
                "countryOfManufacture": {
                    "x-displayName": "Manufacturer Country",
                    "$ref": "#/definitions/Country"
                },
                "unitsType": {
                    "x-displayName": "Units Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "itemOptionsList": {
                    "$ref": "#/definitions/ItemOptionsList"
                },
                "safetyStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "int64",
                    "type": "integer"
                },
                "cogsAccount": {
                    "x-displayName": "COGS Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "producer": {
                    "x-displayName": "Producer",
                    "type": "boolean"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "autoLeadTime": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "isOnline": {
                    "x-displayName": "Display in Web Site",
                    "type": "boolean"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "hazmatItemUnits": {
                    "type": "string"
                },
                "showDefaultDonationAmount": {
                    "x-displayName": "Show Default Amount",
                    "type": "boolean"
                },
                "purchaseOrderQuantityDiff": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "type": "number"
                },
                "buildEntireAssembly": {
                    "x-displayName": "Mark Sub-assemblies Phantom",
                    "type": "boolean"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nexTagCategory": {
                    "x-displayName": "NexTag Category",
                    "type": "string"
                },
                "totalValue": {
                    "x-displayName": "Total Value",
                    "format": "double",
                    "type": "number"
                },
                "cost": {
                    "x-displayName": "Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "seasonalDemand": {
                    "x-displayName": "Seasonal Demand",
                    "type": "boolean"
                },
                "invtClassification": {
                    "x-displayName": "Classification",
                    "$ref": "#/definitions/ItemInvtClassification"
                },
                "itemShipMethodList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "lastModifiedDate": {
                    "x-displayName": "Last Modified",
                    "format": "date-time",
                    "type": "string"
                },
                "manufacturerTaxId": {
                    "x-displayName": "Manufacturer Tax Id",
                    "type": "string"
                },
                "trackLandedCost": {
                    "x-displayName": "Track Landed Cost",
                    "type": "boolean"
                },
                "preferredLocation": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecSchedule": {
                    "x-displayName": "Revenue Recognition Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number"
                },
                "averageCost": {
                    "x-displayName": "Average Cost",
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "LotNumberedInventoryItemLocations": {
            "properties": {
                "rescheduleInDays": {
                    "x-displayName": "Reschedule In Days",
                    "format": "int64",
                    "type": "integer"
                },
                "reorderPoint": {
                    "x-displayName": "Build Point",
                    "format": "double",
                    "type": "number"
                },
                "safetyStockLevel": {
                    "x-displayName": "Safety Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "nextInvtCountDate": {
                    "x-displayName": "Next Count Date",
                    "format": "date-time",
                    "type": "string"
                },
                "expirationDate": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "type": "string"
                },
                "averageCostMli": {
                    "x-displayName": "Average Cost",
                    "format": "double",
                    "type": "number"
                },
                "quantityCommitted": {
                    "x-displayName": "Quantity Committed",
                    "format": "double",
                    "type": "number"
                },
                "leadTime": {
                    "x-displayName": "Lead Time",
                    "format": "int64",
                    "type": "integer"
                },
                "forwardConsumptionDays": {
                    "x-displayName": "Forward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "costingLotSize": {
                    "x-displayName": "Costing Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "locationlookup": {
                    "x-displayName": "Location",
                    "$ref": "#/definitions/RecordRef"
                },
                "supplyTimeFence": {
                    "x-displayName": "Planning Time Fence",
                    "format": "double",
                    "type": "number"
                },
                "locationId": {
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityOnOrder": {
                    "x-displayName": "Quantity On Order",
                    "format": "double",
                    "type": "number"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "type": "number"
                },
                "supplyType": {
                    "x-displayName": "Supply Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "periodicLotSizeDays": {
                    "x-displayName": "Periods of Supply Increment",
                    "format": "int64",
                    "type": "integer"
                },
                "supplyLotSizingMethod": {
                    "x-displayName": "Lot Sizing Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "fixedLotSize": {
                    "x-displayName": "Fixed Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "lastInvtCountDate": {
                    "x-displayName": "Last Count Date",
                    "format": "date-time",
                    "type": "string"
                },
                "lastPurchasePriceMli": {
                    "x-displayName": "Last Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "preferredStockLevel": {
                    "x-displayName": "Preferred Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "quantityAvailable": {
                    "x-displayName": "Quantity Available",
                    "format": "double",
                    "type": "number"
                },
                "supplyReplenishmentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "cost": {
                    "x-displayName": "Standard Cost",
                    "format": "double",
                    "type": "number"
                },
                "buildTime": {
                    "x-displayName": "Work Order Lead Time",
                    "format": "double",
                    "type": "number"
                },
                "inventoryCostTemplate": {
                    "x-displayName": "Inventory Cost Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "invtClassification": {
                    "x-displayName": "Classification",
                    "$ref": "#/definitions/ItemInvtClassification"
                },
                "backwardConsumptionDays": {
                    "x-displayName": "Backward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "demandTimeFence": {
                    "x-displayName": "Demand Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "serialNumbers": {
                    "x-displayName": "Lot Numbers",
                    "type": "string"
                },
                "isWip": {
                    "x-displayName": "WIP",
                    "type": "boolean"
                },
                "onHandValueMli": {
                    "x-displayName": "Value",
                    "format": "double",
                    "type": "number"
                },
                "invtCountInterval": {
                    "x-displayName": "Count Interval",
                    "format": "int64",
                    "type": "integer"
                },
                "location_display": {
                    "x-displayName": "Location",
                    "type": "string"
                },
                "periodicLotSizeType": {
                    "x-displayName": "Periods of Supply Type",
                    "$ref": "#/definitions/PeriodicLotSizeType"
                },
                "alternateDemandSourceItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "defaultReturnCost": {
                    "x-displayName": "Default Return Cost",
                    "format": "double",
                    "type": "number"
                },
                "quantityBackOrdered": {
                    "x-displayName": "Quantity Back Ordered",
                    "format": "double",
                    "type": "number"
                },
                "rescheduleOutDays": {
                    "x-displayName": "Reschedule Out Days",
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "demandSource": {
                    "x-displayName": "Demand Source",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "ItemMemberList": {
            "required": [
                "itemMember"
            ],
            "properties": {
                "itemMember": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ItemMember"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ItemMember": {
            "required": [
                "quantity",
                "item"
            ],
            "properties": {
                "bomQuantity": {
                    "x-displayName": "BOM Quantity",
                    "format": "double",
                    "type": "number"
                },
                "item": {
                    "x-displayName": "Item",
                    "$ref": "#/definitions/RecordRef"
                },
                "itemSource": {
                    "$ref": "#/definitions/ItemSource"
                },
                "taxrate": {
                    "format": "double",
                    "type": "number"
                },
                "componentYield": {
                    "x-displayName": "Component Yield",
                    "format": "double",
                    "type": "number"
                },
                "quantity": {
                    "x-displayName": "Quantity",
                    "format": "double",
                    "type": "number"
                },
                "vsoeDelivered": {
                    "x-displayName": "Default as Delivered",
                    "type": "boolean"
                },
                "memberKey": {
                    "type": "string"
                },
                "obsoleteRevision": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "memberUnit": {
                    "x-displayName": "Units",
                    "type": "string"
                },
                "effectiveRevision": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "obsoleteDate": {
                    "x-displayName": "Obsolete Date",
                    "format": "date-time",
                    "type": "string"
                },
                "taxcode": {
                    "x-displayName": "Tax Code",
                    "type": "string"
                },
                "lineNumber": {
                    "x-displayName": "Item",
                    "format": "int64",
                    "type": "integer"
                },
                "memberDescr": {
                    "x-displayName": "Description",
                    "type": "string"
                },
                "effectiveDate": {
                    "x-displayName": "Effective Date",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "LotNumberedInventoryItem": {
            "required": [
                "taxSchedule",
                "itemId"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "LotNumberedInventoryItem",
            "x-has-customfields": false,
            "properties": {
                "parent": {
                    "x-displayName": "Subitem of",
                    "$ref": "#/definitions/RecordRef"
                },
                "pricingGroup": {
                    "x-displayName": "Pricing Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "salesDescription": {
                    "x-displayName": "Sales Description",
                    "type": "string"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailList"
                },
                "quantityPricingSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityOnOrder": {
                    "x-displayName": "Quantity On Order",
                    "format": "double",
                    "type": "number"
                },
                "hazmatShippingName": {
                    "type": "string"
                },
                "createRevenuePlansOn": {
                    "x-displayName": "Create Revenue Plans On",
                    "$ref": "#/definitions/ItemCreateRevenuePlansOn"
                },
                "productFeedList": {
                    "$ref": "#/definitions/ProductFeedList"
                },
                "vsoeDelivered": {
                    "x-displayName": "Default as Delivered",
                    "type": "boolean"
                },
                "includeChildren": {
                    "x-displayName": "Include Children",
                    "type": "boolean"
                },
                "backwardConsumptionDays": {
                    "x-displayName": "Backward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "incomeAccount": {
                    "x-displayName": "Income Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "demandTimeFence": {
                    "x-displayName": "Demand Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "metaTagHtml": {
                    "x-displayName": "Meta Tag HTML",
                    "type": "string"
                },
                "pricingMatrix": {
                    "$ref": "#/definitions/PricingMatrix"
                },
                "invtCountInterval": {
                    "format": "int64",
                    "type": "integer"
                },
                "shipPackage": {
                    "x-displayName": "Package",
                    "$ref": "#/definitions/RecordRef"
                },
                "stockUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "itemId": {
                    "x-displayName": "Item Name/Number",
                    "type": "string"
                },
                "purchaseUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "rescheduleOutDays": {
                    "x-displayName": "Reschedule Out Days",
                    "format": "int64",
                    "type": "integer"
                },
                "lastPurchasePrice": {
                    "x-displayName": "Last Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "onSpecial": {
                    "x-displayName": "On Special",
                    "type": "boolean"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "shopzillaCategoryId": {
                    "x-displayName": "Shopzilla Category ID",
                    "format": "int64",
                    "type": "integer"
                },
                "preferredStockLevelUnits": {
                    "type": "string"
                },
                "safetyStockLevel": {
                    "x-displayName": "Safety Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "displayName": {
                    "x-displayName": "Display Name/Code",
                    "type": "string"
                },
                "specialsDescription": {
                    "x-displayName": "Specials Description",
                    "type": "string"
                },
                "receiptAmount": {
                    "x-displayName": "Vendor Bill - Item Receipt Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "costCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "binNumberList": {
                    "$ref": "#/definitions/InventoryItemBinNumberList"
                },
                "vendor": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRef"
                },
                "isStorePickupAllowed": {
                    "x-readOnly": true,
                    "type": "boolean"
                },
                "dontShowPrice": {
                    "x-displayName": "Don't Show Price",
                    "type": "boolean"
                },
                "supplyType": {
                    "x-displayName": "Supply Type\t",
                    "$ref": "#/definitions/RecordRef"
                },
                "handlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "type": "number"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "x-readOnly": true,
                    "type": "string"
                },
                "quantityOnHandUnits": {
                    "type": "string"
                },
                "outOfStockMessage": {
                    "x-displayName": "Out Of Stock Message",
                    "type": "string"
                },
                "preferredStockLevel": {
                    "x-displayName": "Preferred Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "multManufactureAddr": {
                    "x-displayName": "Multiple Manufacturer Addresses",
                    "type": "boolean"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderAmount": {
                    "x-displayName": "Vendor Bill - Purchase Order Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "hazmatHazardClass": {
                    "type": "string"
                },
                "hazmatItemUnitsQty": {
                    "format": "double",
                    "type": "number"
                },
                "manufacturerState": {
                    "x-displayName": "Manufacturer State",
                    "type": "string"
                },
                "periodicLotSizeType": {
                    "x-displayName": "Periods of Supply Type",
                    "$ref": "#/definitions/PeriodicLotSizeType"
                },
                "defaultReturnCost": {
                    "format": "double",
                    "type": "number"
                },
                "purchaseTaxCode": {
                    "x-displayName": "Purchase Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "x-displayName": "Date Created",
                    "format": "date-time",
                    "type": "string"
                },
                "safetyStockLevelUnits": {
                    "type": "string"
                },
                "matrixOptionList": {
                    "$ref": "#/definitions/MatrixOptionList"
                },
                "availableToPartners": {
                    "x-displayName": "Available to Adv. Partners",
                    "type": "boolean"
                },
                "itemVendorList": {
                    "$ref": "#/definitions/ItemVendorList"
                },
                "nextInvtCountDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "excludeFromSitemap": {
                    "x-displayName": "Exclude from Sitemap",
                    "type": "boolean"
                },
                "deferredRevenueAccount": {
                    "x-displayName": "Deferred Revenue Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "enforceMinQtyInternally": {
                    "x-displayName": "Enforce Internally",
                    "type": "boolean"
                },
                "autoReorderPoint": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "gainLossAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "weightUnits": {
                    "type": "string"
                },
                "fixedLotSize": {
                    "x-displayName": "Fixed Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "presentationItemList": {
                    "$ref": "#/definitions/PresentationItemList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "purchasePriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "manufacturerCity": {
                    "x-displayName": "Manufacturer City",
                    "type": "string"
                },
                "weight": {
                    "x-displayName": "Item Weight",
                    "format": "double",
                    "type": "number"
                },
                "copyDescription": {
                    "x-displayName": "Copy from Sales Order",
                    "type": "boolean"
                },
                "onHandValueMli": {
                    "x-displayName": "Value",
                    "format": "double",
                    "type": "number"
                },
                "taxSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "issueProduct": {
                    "x-displayName": "Product",
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorName": {
                    "x-displayName": "Vendor Name/Code",
                    "type": "string"
                },
                "stockDescription": {
                    "x-displayName": "Stock Description",
                    "type": "string"
                },
                "revenueAllocationGroup": {
                    "x-displayName": "Revenue Allocation Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityBackOrdered": {
                    "x-displayName": "Quantity Back Ordered",
                    "format": "double",
                    "type": "number"
                },
                "receiptQuantityDiff": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "isDonationItem": {
                    "x-displayName": "Variable Amount",
                    "type": "boolean"
                },
                "itemRevenueCategory": {
                    "x-displayName": "Item Revenue Category",
                    "$ref": "#/definitions/RecordRef"
                },
                "preferenceCriterion": {
                    "x-displayName": "Preference Criterion",
                    "$ref": "#/definitions/ItemPreferenceCriterion"
                },
                "reorderPoint": {
                    "x-displayName": "Reorder Point",
                    "format": "double",
                    "type": "number"
                },
                "searchKeywords": {
                    "x-displayName": "Search Keywords",
                    "type": "string"
                },
                "receiptQuantity": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "rate": {
                    "x-displayName": "Rate",
                    "format": "double",
                    "type": "number"
                },
                "noPriceMessage": {
                    "x-displayName": "No Price Message",
                    "type": "string"
                },
                "hazmatPackingGroup": {
                    "$ref": "#/definitions/HazmatPackingGroup"
                },
                "outOfStockBehavior": {
                    "x-displayName": "Out Of Stock Behavior",
                    "$ref": "#/definitions/ItemOutOfStockBehavior"
                },
                "upcCode": {
                    "x-displayName": "UPC Code",
                    "type": "string"
                },
                "expirationDate": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "type": "string"
                },
                "storeDisplayImage": {
                    "x-displayName": "Item Display Image",
                    "$ref": "#/definitions/RecordRef"
                },
                "storeDisplayThumbnail": {
                    "x-displayName": "Item Display Thumbnail",
                    "$ref": "#/definitions/RecordRef"
                },
                "billQtyVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesTaxCode": {
                    "x-displayName": "Sales Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean"
                },
                "minimumQuantityUnits": {
                    "type": "string"
                },
                "relatedItemsDescription": {
                    "x-displayName": "Related Items Description",
                    "type": "string"
                },
                "locationsList": {
                    "$ref": "#/definitions/LotNumberedInventoryItemLocationsList"
                },
                "storeDisplayName": {
                    "type": "string",
                    "x-displayName": "Store Display Name"
                },
                "scheduleBNumber": {
                    "x-displayName": "Schedule B Number",
                    "type": "string"
                },
                "shippingCostUnits": {
                    "type": "string"
                },
                "storeDetailedDescription": {
                    "x-displayName": "Detailed Description",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costUnits": {
                    "type": "string"
                },
                "sitemapPriority": {
                    "x-displayName": "Sitemap Priority",
                    "$ref": "#/definitions/SitemapPriority"
                },
                "assetAccount": {
                    "x-displayName": "Asset Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "pageTitle": {
                    "x-displayName": "Page Title",
                    "type": "string"
                },
                "quantityCommitted": {
                    "x-displayName": "Quantity Committed",
                    "format": "double",
                    "type": "number"
                },
                "autoPreferredStockLevel": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "numbersList": {
                    "$ref": "#/definitions/LotNumberedInventoryItemNumbersList"
                },
                "isHazmatItem": {
                    "type": "boolean"
                },
                "saleUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "billPriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "periodicLotSizeDays": {
                    "x-displayName": "Periods of Supply Increment",
                    "format": "int64",
                    "type": "integer"
                },
                "defaultItemShipMethod": {
                    "x-displayName": "Default Shipping Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "roundUpAsComponent": {
                    "x-displayName": "Round Up Quantity as Component",
                    "type": "boolean"
                },
                "scheduleBQuantity": {
                    "x-displayName": "Schedule B Quantity",
                    "format": "int64",
                    "type": "integer"
                },
                "isSpecialOrderItem": {
                    "x-displayName": "Special Order Item",
                    "type": "boolean"
                },
                "quantityAvailable": {
                    "x-displayName": "Quantity Available",
                    "format": "double",
                    "type": "number"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "isGcoCompliant": {
                    "x-displayName": "Google Checkout Compliant",
                    "type": "boolean"
                },
                "manufacturerAddr1": {
                    "x-displayName": "Manufacturer Address",
                    "type": "string"
                },
                "preferredStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "double",
                    "type": "number"
                },
                "softDescriptor": {
                    "x-displayName": "Soft Descriptor",
                    "$ref": "#/definitions/RecordRef"
                },
                "matrixType": {
                    "x-displayName": "Matrix Type",
                    "$ref": "#/definitions/ItemMatrixType"
                },
                "mpn": {
                    "x-displayName": "Manufacturer Part Number",
                    "type": "string"
                },
                "intercoCogsAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "pricesIncludeTax": {
                    "x-displayName": "Prices Include Tax",
                    "type": "boolean"
                },
                "alternateDemandSourceItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                },
                "purchaseDescription": {
                    "x-displayName": "Purchase Description",
                    "type": "string"
                },
                "demandSource": {
                    "x-displayName": "Demand Source",
                    "$ref": "#/definitions/RecordRef"
                },
                "maxDonationAmount": {
                    "x-displayName": "Maximum Variable Amount",
                    "format": "double",
                    "type": "number"
                },
                "transferPrice": {
                    "format": "double",
                    "type": "number"
                },
                "translationsList": {
                    "$ref": "#/definitions/TranslationList"
                },
                "weightUnit": {
                    "$ref": "#/definitions/ItemWeightUnit"
                },
                "rescheduleInDays": {
                    "x-displayName": "Reschedule In Days",
                    "format": "int64",
                    "type": "integer"
                },
                "manufacturerTariff": {
                    "x-displayName": "HS Tariff Number",
                    "type": "string"
                },
                "matchBillToReceipt": {
                    "type": "boolean"
                },
                "overallQuantityPricingType": {
                    "x-displayName": "Calculate Quantity Discounts",
                    "$ref": "#/definitions/ItemOverallQuantityPricingType"
                },
                "siteCategoryList": {
                    "$ref": "#/definitions/SiteCategoryList"
                },
                "featuredDescription": {
                    "x-displayName": "Featured Description",
                    "type": "string"
                },
                "leadTime": {
                    "x-displayName": "Lead Time",
                    "format": "int64",
                    "type": "integer"
                },
                "scheduleBCode": {
                    "$ref": "#/definitions/ScheduleBCode"
                },
                "urlComponent": {
                    "x-displayName": "URL Component",
                    "type": "string"
                },
                "forwardConsumptionDays": {
                    "x-displayName": "Forward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "manufacturer": {
                    "x-displayName": "Manufacturer",
                    "type": "string"
                },
                "supplyTimeFence": {
                    "x-displayName": "Planning Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "demandModifier": {
                    "x-displayName": "Estimated Demand Change",
                    "format": "double",
                    "type": "number"
                },
                "itemCarrier": {
                    "x-displayName": "Carrier",
                    "$ref": "#/definitions/ShippingCarrier"
                },
                "shoppingDotComCategory": {
                    "type": "string",
                    "x-displayName": "Shopping.com Category"
                },
                "storeItemTemplate": {
                    "x-displayName": "Item Drilldown Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "useBins": {
                    "x-displayName": "Use Bins",
                    "type": "boolean"
                },
                "supplyLotSizingMethod": {
                    "x-displayName": "Lot Sizing Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "lastInvtCountDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "minimumQuantity": {
                    "x-displayName": "Minimum Order Qty",
                    "format": "int64",
                    "type": "integer"
                },
                "revenueRecognitionRule": {
                    "x-displayName": "Revenue Recognition Rule",
                    "$ref": "#/definitions/RecordRef"
                },
                "shipIndividually": {
                    "x-displayName": "Ships Individually",
                    "type": "boolean"
                },
                "supplyReplenishmentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costingMethod": {
                    "x-displayName": "Costing Method",
                    "x-readOnly": true,
                    "$ref": "#/definitions/ItemCostingMethod"
                },
                "purchaseOrderQuantity": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "billingSchedule": {
                    "x-displayName": "Billing Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "serialNumbers": {
                    "x-displayName": "Lot Numbers",
                    "type": "string"
                },
                "costingMethodDisplay": {
                    "x-displayName": "Costing Method",
                    "x-readOnly": true,
                    "type": "string"
                },
                "intercoIncomeAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isDropShipItem": {
                    "x-displayName": "Drop Ship Item",
                    "type": "boolean"
                },
                "storeDescription": {
                    "x-displayName": "Store Description",
                    "type": "string"
                },
                "manufacturerZip": {
                    "x-displayName": "Manufacturer Zip Code",
                    "type": "string"
                },
                "dropshipExpenseAccount": {
                    "x-displayName": "Dropship expense account",
                    "$ref": "#/definitions/RecordRef"
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "type": "boolean"
                },
                "itemNumberOptionsList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "hazmatId": {
                    "type": "string"
                },
                "offerSupport": {
                    "x-displayName": "Offer Support",
                    "type": "boolean"
                },
                "billExchRateVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "reorderMultiple": {
                    "x-displayName": "Reorder Multiple",
                    "format": "int64",
                    "type": "integer"
                },
                "useMarginalRates": {
                    "x-displayName": "Use Marginal Rates",
                    "type": "boolean"
                },
                "countryOfManufacture": {
                    "x-displayName": "Manufacturer Country",
                    "$ref": "#/definitions/Country"
                },
                "unitsType": {
                    "x-displayName": "Units Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "itemOptionsList": {
                    "$ref": "#/definitions/ItemOptionsList"
                },
                "safetyStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "int64",
                    "type": "integer"
                },
                "cogsAccount": {
                    "x-displayName": "COGS Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "producer": {
                    "x-displayName": "Producer",
                    "type": "boolean"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "autoLeadTime": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "isOnline": {
                    "x-displayName": "Display in Web Site",
                    "type": "boolean"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "hazmatItemUnits": {
                    "type": "string"
                },
                "handlingCostUnits": {
                    "type": "string"
                },
                "showDefaultDonationAmount": {
                    "x-displayName": "Show Default Amount",
                    "type": "boolean"
                },
                "purchaseOrderQuantityDiff": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "type": "number"
                },
                "directRevenuePosting": {
                    "type": "boolean"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nexTagCategory": {
                    "x-displayName": "NexTag Category",
                    "type": "string"
                },
                "totalValue": {
                    "x-displayName": "Total Value",
                    "format": "double",
                    "type": "number"
                },
                "quantityReorderUnits": {
                    "type": "string"
                },
                "cost": {
                    "x-displayName": "Copy from Sales Order",
                    "format": "double",
                    "type": "number"
                },
                "seasonalDemand": {
                    "x-displayName": "Seasonal Demand",
                    "type": "boolean"
                },
                "invtClassification": {
                    "x-displayName": "Classification",
                    "$ref": "#/definitions/ItemInvtClassification"
                },
                "itemShipMethodList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "lastModifiedDate": {
                    "x-displayName": "Last Modified",
                    "format": "date-time",
                    "type": "string"
                },
                "manufacturerTaxId": {
                    "x-displayName": "Manufacturer Tax Id",
                    "type": "string"
                },
                "trackLandedCost": {
                    "x-displayName": "Track Landed Cost",
                    "type": "boolean"
                },
                "reorderPointUnits": {
                    "type": "string"
                },
                "preferredLocation": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecSchedule": {
                    "x-displayName": "Revenue Recognition Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number"
                },
                "averageCost": {
                    "x-displayName": "Average Cost",
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "SerializedAssemblyItem": {
            "required": [
                "itemId",
                "memberList",
                "taxSchedule"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "SerializedAssemblyItem",
            "x-has-customfields": true,
            "properties": {
                "parent": {
                    "x-displayName": "Subitem of",
                    "$ref": "#/definitions/RecordRef"
                },
                "printItems": {
                    "x-displayName": "Print Items",
                    "type": "boolean"
                },
                "pricingGroup": {
                    "x-displayName": "Pricing Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailList"
                },
                "quantityPricingSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityOnOrder": {
                    "x-displayName": "Quantity On Order",
                    "format": "double",
                    "type": "number"
                },
                "hazmatShippingName": {
                    "type": "string"
                },
                "createRevenuePlansOn": {
                    "x-displayName": "Create Revenue Plans On",
                    "$ref": "#/definitions/ItemCreateRevenuePlansOn"
                },
                "productFeedList": {
                    "$ref": "#/definitions/ProductFeedList"
                },
                "vsoeDelivered": {
                    "x-displayName": "Default as Delivered",
                    "type": "boolean"
                },
                "buildTime": {
                    "x-displayName": "Work Order Lead Time",
                    "format": "int64",
                    "type": "integer"
                },
                "includeChildren": {
                    "x-displayName": "Include Children",
                    "type": "boolean"
                },
                "incomeAccount": {
                    "x-displayName": "Income Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "demandTimeFence": {
                    "x-displayName": "Demand Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "prodPriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "metaTagHtml": {
                    "x-displayName": "Meta Tag HTML",
                    "type": "string"
                },
                "pricingMatrix": {
                    "$ref": "#/definitions/PricingMatrix"
                },
                "invtCountInterval": {
                    "format": "int64",
                    "type": "integer"
                },
                "shipPackage": {
                    "x-displayName": "Package",
                    "$ref": "#/definitions/RecordRef"
                },
                "stockUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "itemId": {
                    "x-displayName": "Item Name/Number",
                    "type": "string"
                },
                "purchaseUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "rescheduleOutDays": {
                    "x-displayName": "Reschedule Out Days",
                    "format": "int64",
                    "type": "integer"
                },
                "lastPurchasePrice": {
                    "x-displayName": "Last Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "onSpecial": {
                    "x-displayName": "On Special",
                    "type": "boolean"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "shopzillaCategoryId": {
                    "x-displayName": "Shopzilla Category ID",
                    "format": "int64",
                    "type": "integer"
                },
                "preferredStockLevelUnits": {
                    "type": "string"
                },
                "safetyStockLevel": {
                    "x-displayName": "Safety Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "displayName": {
                    "x-displayName": "Display Name/Code",
                    "type": "string"
                },
                "specialsDescription": {
                    "x-displayName": "Specials Description",
                    "type": "string"
                },
                "receiptAmount": {
                    "x-displayName": "Vendor Bill - Item Receipt Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "costCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "memberList": {
                    "$ref": "#/definitions/ItemMemberList"
                },
                "prodQtyVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "binNumberList": {
                    "$ref": "#/definitions/InventoryItemBinNumberList"
                },
                "dontShowPrice": {
                    "x-displayName": "Don't Show Price",
                    "type": "boolean"
                },
                "supplyType": {
                    "x-displayName": "Supply Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "handlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "type": "number"
                },
                "quantityOnHandUnits": {
                    "type": "string"
                },
                "outOfStockMessage": {
                    "x-displayName": "Out Of Stock Message",
                    "type": "string"
                },
                "preferredStockLevel": {
                    "x-displayName": "Preferred Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "multManufactureAddr": {
                    "x-displayName": "Multiple Manufacturer Addresses",
                    "type": "boolean"
                },
                "wipVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderAmount": {
                    "x-displayName": "Vendor Bill - Purchase Order Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "hazmatHazardClass": {
                    "type": "string"
                },
                "hazmatItemUnitsQty": {
                    "format": "double",
                    "type": "number"
                },
                "manufacturerState": {
                    "x-displayName": "Manufacturer State",
                    "type": "string"
                },
                "defaultReturnCost": {
                    "format": "double",
                    "type": "number"
                },
                "purchaseTaxCode": {
                    "x-displayName": "Purchase Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "x-displayName": "Date Created",
                    "format": "date-time",
                    "type": "string"
                },
                "safetyStockLevelUnits": {
                    "type": "string"
                },
                "availableToPartners": {
                    "x-displayName": "Available to Adv. Partners",
                    "type": "boolean"
                },
                "itemVendorList": {
                    "$ref": "#/definitions/ItemVendorList"
                },
                "nextInvtCountDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "excludeFromSitemap": {
                    "x-displayName": "Exclude from Sitemap",
                    "type": "boolean"
                },
                "deferredRevenueAccount": {
                    "x-displayName": "Deferred Revenue Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "enforceMinQtyInternally": {
                    "x-displayName": "Enforce Internally",
                    "type": "boolean"
                },
                "autoReorderPoint": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "gainLossAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "weightUnits": {
                    "type": "string"
                },
                "fixedLotSize": {
                    "x-displayName": "Fixed Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "presentationItemList": {
                    "$ref": "#/definitions/PresentationItemList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number"
                },
                "useComponentYield": {
                    "x-displayName": "Use Component Yield",
                    "type": "boolean"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "purchasePriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "manufacturerCity": {
                    "x-displayName": "Manufacturer City",
                    "type": "string"
                },
                "weight": {
                    "x-displayName": "Item Weight",
                    "format": "double",
                    "type": "number"
                },
                "taxSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "issueProduct": {
                    "x-displayName": "Product",
                    "$ref": "#/definitions/RecordRef"
                },
                "scrapAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorName": {
                    "x-displayName": "Vendor Name/Code",
                    "type": "string"
                },
                "stockDescription": {
                    "x-displayName": "Stock Description",
                    "type": "string"
                },
                "revenueAllocationGroup": {
                    "x-displayName": "Revenue Allocation Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "defaultRevision": {
                    "x-displayName": "Default Revision",
                    "type": "string"
                },
                "quantityBackOrdered": {
                    "x-displayName": "Quantity Back Ordered",
                    "format": "double",
                    "type": "number"
                },
                "receiptQuantityDiff": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "isDonationItem": {
                    "x-displayName": "Variable Amount",
                    "type": "boolean"
                },
                "itemRevenueCategory": {
                    "x-displayName": "Item Revenue Category",
                    "$ref": "#/definitions/RecordRef"
                },
                "effectiveBomControl": {
                    "x-displayName": "Effective BOM Control",
                    "$ref": "#/definitions/AssemblyItemEffectiveBomControl"
                },
                "preferenceCriterion": {
                    "x-displayName": "Preference Criterion",
                    "$ref": "#/definitions/ItemPreferenceCriterion"
                },
                "reorderPoint": {
                    "x-displayName": "Build Point",
                    "format": "double",
                    "type": "number"
                },
                "manufactureraddr1": {
                    "x-displayName": "Manufacturer Address",
                    "type": "string"
                },
                "searchKeywords": {
                    "x-displayName": "Search Keywords",
                    "type": "string"
                },
                "receiptQuantity": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "description": {
                    "x-displayName": "Description",
                    "type": "string"
                },
                "rate": {
                    "x-displayName": "Rate",
                    "format": "double",
                    "type": "number"
                },
                "noPriceMessage": {
                    "x-displayName": "No Price Message",
                    "type": "string"
                },
                "hazmatPackingGroup": {
                    "$ref": "#/definitions/HazmatPackingGroup"
                },
                "outOfStockBehavior": {
                    "x-displayName": "Out Of Stock Behavior",
                    "$ref": "#/definitions/ItemOutOfStockBehavior"
                },
                "upcCode": {
                    "x-displayName": "UPC Code",
                    "type": "string"
                },
                "storeDisplayImage": {
                    "x-displayName": "Item Display Image",
                    "$ref": "#/definitions/RecordRef"
                },
                "storeDisplayThumbnail": {
                    "x-displayName": "Item Display Thumbnail",
                    "$ref": "#/definitions/RecordRef"
                },
                "billQtyVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesTaxCode": {
                    "x-displayName": "Sales Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean"
                },
                "minimumQuantityUnits": {
                    "type": "string"
                },
                "relatedItemsDescription": {
                    "x-displayName": "Related Items Description",
                    "type": "string"
                },
                "locationsList": {
                    "$ref": "#/definitions/SerializedInventoryItemLocationsList"
                },
                "storeDisplayName": {
                    "type": "string"
                },
                "unbuildVarianceAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "scheduleBNumber": {
                    "x-displayName": "Schedule B Number",
                    "type": "string"
                },
                "shippingCostUnits": {
                    "type": "string"
                },
                "storeDetailedDescription": {
                    "x-displayName": "Detailed Description",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "sitemapPriority": {
                    "x-displayName": "Sitemap Priority",
                    "$ref": "#/definitions/SitemapPriority"
                },
                "assetAccount": {
                    "x-displayName": "Asset Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "pageTitle": {
                    "x-displayName": "Page Title",
                    "type": "string"
                },
                "quantityCommitted": {
                    "x-displayName": "Quantity Committed",
                    "format": "double",
                    "type": "number"
                },
                "autoPreferredStockLevel": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "isSpecialWorkOrderItem": {
                    "x-displayName": "Special Work Order Item",
                    "type": "boolean"
                },
                "isStorePickupAllowed": {
                    "x-readOnly": true,
                    "type": "boolean"
                },
                "numbersList": {
                    "$ref": "#/definitions/SerializedInventoryItemNumbersList"
                },
                "isHazmatItem": {
                    "type": "boolean"
                },
                "saleUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "billPriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "defaultItemShipMethod": {
                    "x-displayName": "Default Shipping Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "roundUpAsComponent": {
                    "x-displayName": "Round Up Quantity as Component",
                    "type": "boolean"
                },
                "scheduleBQuantity": {
                    "x-displayName": "Schedule B Quantity",
                    "format": "int64",
                    "type": "integer"
                },
                "quantityAvailable": {
                    "x-displayName": "Quantity Available",
                    "format": "double",
                    "type": "number"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "isGcoCompliant": {
                    "x-displayName": "Google Checkout Compliant",
                    "type": "boolean"
                },
                "preferredStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "double",
                    "type": "number"
                },
                "softDescriptor": {
                    "x-displayName": "Soft Descriptor",
                    "$ref": "#/definitions/RecordRef"
                },
                "mpn": {
                    "x-displayName": "Manufacturer Part Number",
                    "type": "string"
                },
                "intercoCogsAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "pricesIncludeTax": {
                    "x-displayName": "Prices Include Tax",
                    "type": "boolean"
                },
                "alternateDemandSourceItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                },
                "purchaseDescription": {
                    "x-displayName": "Purchase Description",
                    "type": "string"
                },
                "demandSource": {
                    "x-displayName": "Demand Source",
                    "$ref": "#/definitions/RecordRef"
                },
                "maxDonationAmount": {
                    "x-displayName": "Maximum Variable Amount",
                    "format": "double",
                    "type": "number"
                },
                "transferPrice": {
                    "format": "double",
                    "type": "number"
                },
                "translationsList": {
                    "$ref": "#/definitions/TranslationList"
                },
                "weightUnit": {
                    "$ref": "#/definitions/ItemWeightUnit"
                },
                "rescheduleInDays": {
                    "x-displayName": "Reschedule In Days",
                    "format": "int64",
                    "type": "integer"
                },
                "manufacturerTariff": {
                    "x-displayName": "HS Tariff Number",
                    "type": "string"
                },
                "matchBillToReceipt": {
                    "type": "boolean"
                },
                "overallQuantityPricingType": {
                    "x-displayName": "Calculate Quantity Discounts",
                    "$ref": "#/definitions/ItemOverallQuantityPricingType"
                },
                "siteCategoryList": {
                    "$ref": "#/definitions/SiteCategoryList"
                },
                "featuredDescription": {
                    "x-displayName": "Featured Description",
                    "type": "string"
                },
                "leadTime": {
                    "x-displayName": "Lead Time",
                    "format": "int64",
                    "type": "integer"
                },
                "scheduleBCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "urlComponent": {
                    "x-displayName": "URL Component",
                    "type": "string"
                },
                "manufacturer": {
                    "x-displayName": "Manufacturer",
                    "type": "string"
                },
                "supplyTimeFence": {
                    "x-displayName": "Planning Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "demandModifier": {
                    "x-displayName": "Estimated Demand Change",
                    "format": "double",
                    "type": "number"
                },
                "itemCarrier": {
                    "x-displayName": "Carrier",
                    "$ref": "#/definitions/ShippingCarrier"
                },
                "shoppingDotComCategory": {
                    "x-displayName": "Shopping.com Category",
                    "type": "string"
                },
                "storeItemTemplate": {
                    "x-displayName": "Item Drilldown Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "useBins": {
                    "x-displayName": "Use Bins",
                    "type": "boolean"
                },
                "supplyLotSizingMethod": {
                    "x-displayName": "Lot Sizing Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "lastInvtCountDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "minimumQuantity": {
                    "x-displayName": "Minimum Order Qty",
                    "format": "int64",
                    "type": "integer"
                },
                "revenueRecognitionRule": {
                    "x-displayName": "Revenue Recognition Rule",
                    "$ref": "#/definitions/RecordRef"
                },
                "shipIndividually": {
                    "x-displayName": "Ships Individually",
                    "type": "boolean"
                },
                "supplyReplenishmentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costingMethod": {
                    "x-displayName": "Costing Method",
                    "x-readOnly": true,
                    "$ref": "#/definitions/ItemCostingMethod"
                },
                "purchaseOrderQuantity": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "billingSchedule": {
                    "x-displayName": "Billing Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "serialNumbers": {
                    "x-displayName": "Serial Numbers",
                    "type": "string"
                },
                "costingMethodDisplay": {
                    "x-displayName": "Costing Method",
                    "x-readOnly": true,
                    "type": "string"
                },
                "wipAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "intercoIncomeAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "storeDescription": {
                    "x-displayName": "Store Description",
                    "type": "string"
                },
                "manufacturerZip": {
                    "x-displayName": "Manufacturer Zip Code",
                    "type": "string"
                },
                "dropshipExpenseAccount": {
                    "x-displayName": "Dropship expense account",
                    "$ref": "#/definitions/RecordRef"
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "type": "boolean"
                },
                "itemNumberOptionsList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "hazmatId": {
                    "type": "string"
                },
                "offerSupport": {
                    "x-displayName": "Offer Support",
                    "type": "boolean"
                },
                "billExchRateVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "reorderMultiple": {
                    "x-displayName": "Reorder Multiple",
                    "format": "int64",
                    "type": "integer"
                },
                "useMarginalRates": {
                    "x-displayName": "Use Marginal Rates",
                    "type": "boolean"
                },
                "countryOfManufacture": {
                    "x-displayName": "Manufacturer Country",
                    "$ref": "#/definitions/Country"
                },
                "unitsType": {
                    "x-displayName": "Units Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "itemOptionsList": {
                    "$ref": "#/definitions/ItemOptionsList"
                },
                "safetyStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "int64",
                    "type": "integer"
                },
                "cogsAccount": {
                    "x-displayName": "COGS Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "producer": {
                    "x-displayName": "Producer",
                    "type": "boolean"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "autoLeadTime": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "isOnline": {
                    "x-displayName": "Display in Web Site",
                    "type": "boolean"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "hazmatItemUnits": {
                    "type": "string"
                },
                "handlingCostUnits": {
                    "type": "string"
                },
                "showDefaultDonationAmount": {
                    "x-displayName": "Show Default Amount",
                    "type": "boolean"
                },
                "purchaseOrderQuantityDiff": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "type": "number"
                },
                "buildEntireAssembly": {
                    "x-displayName": "Mark Sub-assemblies Phantom",
                    "type": "boolean"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nexTagCategory": {
                    "x-displayName": "NexTag Category",
                    "type": "string"
                },
                "totalValue": {
                    "x-displayName": "Total Value",
                    "format": "double",
                    "type": "number"
                },
                "cost": {
                    "x-displayName": "Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "seasonalDemand": {
                    "x-displayName": "Seasonal Demand",
                    "type": "boolean"
                },
                "invtClassification": {
                    "x-displayName": "Classification",
                    "$ref": "#/definitions/ItemInvtClassification"
                },
                "itemShipMethodList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "lastModifiedDate": {
                    "x-displayName": "Last Modified",
                    "format": "date-time",
                    "type": "string"
                },
                "manufacturerTaxId": {
                    "x-displayName": "Manufacturer Tax Id",
                    "type": "string"
                },
                "trackLandedCost": {
                    "x-displayName": "Track Landed Cost",
                    "type": "boolean"
                },
                "reorderPointUnits": {
                    "type": "string"
                },
                "preferredLocation": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecSchedule": {
                    "x-displayName": "Revenue Recognition Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number"
                },
                "averageCost": {
                    "x-displayName": "Average Cost",
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "SerializedInventoryItemNumbersList": {
            "properties": {
                "numbers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SerializedInventoryItemNumbers"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "SerializedInventoryItemNumbers": {
            "properties": {
                "serialNumber": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "SerializedInventoryItemLocationsList": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SerializedInventoryItemLocations"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "SerializedInventoryItemLocations": {
            "properties": {
                "rescheduleInDays": {
                    "x-displayName": "Reschedule In Days",
                    "format": "int64",
                    "type": "integer"
                },
                "reorderPoint": {
                    "x-displayName": "Build Point",
                    "format": "double",
                    "type": "number"
                },
                "safetyStockLevel": {
                    "x-displayName": "Safety Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "nextInvtCountDate": {
                    "x-displayName": "Next Count Date",
                    "format": "date-time",
                    "type": "string"
                },
                "averageCostMli": {
                    "format": "double",
                    "x-displayName": "Average Cost",
                    "type": "number"
                },
                "quantityCommitted": {
                    "x-displayName": "Quantity Committed",
                    "format": "double",
                    "type": "number"
                },
                "leadTime": {
                    "x-displayName": "Lead Time",
                    "format": "int64",
                    "type": "integer"
                },
                "forwardConsumptionDays": {
                    "x-displayName": "Forward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "costingLotSize": {
                    "x-displayName": "Costing Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "supplyTimeFence": {
                    "x-displayName": "Planning Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "locationId": {
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityOnOrder": {
                    "x-displayName": "Quantity On Order",
                    "format": "double",
                    "type": "number"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "type": "number"
                },
                "supplyType": {
                    "x-displayName": "Supply Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "periodicLotSizeDays": {
                    "format": "int64",
                    "x-displayName": "Periods of Supply Increment",
                    "type": "integer"
                },
                "supplyLotSizingMethod": {
                    "x-displayName": "Lot Sizing Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "fixedLotSize": {
                    "x-displayName": "Fixed Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "lastInvtCountDate": {
                    "x-displayName": "Last Count Date",
                    "format": "date-time",
                    "type": "string"
                },
                "lastPurchasePriceMli": {
                    "x-displayName": "Last Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "preferredStockLevel": {
                    "x-displayName": "Preferred Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "quantityAvailable": {
                    "x-displayName": "Quantity Available",
                    "format": "double",
                    "type": "number"
                },
                "supplyReplenishmentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "cost": {
                    "x-displayName": "Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "buildTime": {
                    "x-displayName": "Work Order Lead Time",
                    "format": "double",
                    "type": "number"
                },
                "inventoryCostTemplate": {
                    "x-displayName": "Inventory Cost Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "invtClassification": {
                    "x-displayName": "Classification",
                    "$ref": "#/definitions/ItemInvtClassification"
                },
                "backwardConsumptionDays": {
                    "x-displayName": "Backward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "demandTimeFence": {
                    "x-displayName": "Demand Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "serialNumbers": {
                    "x-displayName": "Serial Numbers",
                    "type": "string"
                },
                "isWip": {
                    "x-displayName": "WIP",
                    "type": "boolean"
                },
                "onHandValueMli": {
                    "x-displayName": "Value",
                    "format": "double",
                    "type": "number"
                },
                "invtCountInterval": {
                    "x-displayName": "Count Interval",
                    "format": "int64",
                    "type": "integer"
                },
                "periodicLotSizeType": {
                    "x-displayName": "Periods of Supply Type",
                    "$ref": "#/definitions/PeriodicLotSizeType"
                },
                "alternateDemandSourceItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "defaultReturnCost": {
                    "x-displayName": "Default Return Cost",
                    "format": "double",
                    "type": "number"
                },
                "quantityBackOrdered": {
                    "x-displayName": "Quantity Back Ordered",
                    "format": "double",
                    "type": "number"
                },
                "rescheduleOutDays": {
                    "x-displayName": "Reschedule Out Days",
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "demandSource": {
                    "x-displayName": "Demand Source",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "SerializedInventoryItem": {
            "required": [
                "taxSchedule",
                "itemId"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "SerializedInventoryItem",
            "x-has-customfields": true,
            "properties": {
                "parent": {
                    "x-displayName": "Subitem of",
                    "$ref": "#/definitions/RecordRef"
                },
                "pricingGroup": {
                    "x-displayName": "Pricing Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "salesDescription": {
                    "x-displayName": "Sales Description",
                    "type": "string"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailList"
                },
                "quantityPricingSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityOnOrder": {
                    "x-displayName": "Quantity On Order",
                    "format": "double",
                    "type": "number"
                },
                "hazmatShippingName": {
                    "type": "string"
                },
                "createRevenuePlansOn": {
                    "x-displayName": "Create Revenue Plans On",
                    "$ref": "#/definitions/ItemCreateRevenuePlansOn"
                },
                "productFeedList": {
                    "$ref": "#/definitions/ProductFeedList"
                },
                "vsoeDelivered": {
                    "x-displayName": "Default as Delivered",
                    "type": "boolean"
                },
                "includeChildren": {
                    "x-displayName": "Include Children",
                    "type": "boolean"
                },
                "backwardConsumptionDays": {
                    "x-displayName": "Backward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "incomeAccount": {
                    "x-displayName": "Income Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "demandTimeFence": {
                    "x-displayName": "Demand Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "metaTagHtml": {
                    "x-displayName": "Meta Tag HTML",
                    "type": "string"
                },
                "pricingMatrix": {
                    "$ref": "#/definitions/PricingMatrix"
                },
                "invtCountInterval": {
                    "format": "int64",
                    "type": "integer"
                },
                "shipPackage": {
                    "x-displayName": "Package",
                    "$ref": "#/definitions/RecordRef"
                },
                "stockUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "itemId": {
                    "x-displayName": "Item Name/Number",
                    "type": "string"
                },
                "purchaseUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "rescheduleOutDays": {
                    "x-displayName": "Reschedule Out Days",
                    "format": "int64",
                    "type": "integer"
                },
                "lastPurchasePrice": {
                    "x-displayName": "Last Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "onSpecial": {
                    "x-displayName": "On Special",
                    "type": "boolean"
                },
                "restrictToAccountingBookList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "shopzillaCategoryId": {
                    "x-displayName": "Shopzilla Category ID",
                    "format": "int64",
                    "type": "integer"
                },
                "preferredStockLevelUnits": {
                    "type": "string"
                },
                "safetyStockLevel": {
                    "x-displayName": "Safety Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "displayName": {
                    "x-displayName": "Display Name/Code",
                    "type": "string"
                },
                "specialsDescription": {
                    "x-displayName": "Specials Description",
                    "type": "string"
                },
                "receiptAmount": {
                    "x-displayName": "Vendor Bill - Item Receipt Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "costCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "binNumberList": {
                    "$ref": "#/definitions/InventoryItemBinNumberList"
                },
                "vendor": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRef"
                },
                "dontShowPrice": {
                    "x-displayName": "Don't Show Price",
                    "type": "boolean"
                },
                "supplyType": {
                    "x-displayName": "Supply Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "handlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "type": "number"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "type": "string"
                },
                "quantityOnHandUnits": {
                    "type": "string"
                },
                "outOfStockMessage": {
                    "x-displayName": "Out Of Stock Message",
                    "type": "string"
                },
                "preferredStockLevel": {
                    "x-displayName": "Preferred Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "multManufactureAddr": {
                    "x-displayName": "Multiple Manufacturer Addresses",
                    "type": "boolean"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderAmount": {
                    "x-displayName": "Vendor Bill - Purchase Order Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "hazmatHazardClass": {
                    "type": "string"
                },
                "hazmatItemUnitsQty": {
                    "format": "double",
                    "type": "number"
                },
                "manufacturerState": {
                    "x-displayName": "Manufacturer State",
                    "type": "string"
                },
                "periodicLotSizeType": {
                    "x-displayName": "Periods of Supply Type",
                    "$ref": "#/definitions/PeriodicLotSizeType"
                },
                "defaultReturnCost": {
                    "format": "double",
                    "type": "number"
                },
                "purchaseTaxCode": {
                    "x-displayName": "Purchase Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "x-displayName": "Date Created",
                    "format": "date-time",
                    "type": "string"
                },
                "safetyStockLevelUnits": {
                    "type": "string"
                },
                "matrixOptionList": {
                    "$ref": "#/definitions/MatrixOptionList"
                },
                "availableToPartners": {
                    "x-displayName": "Available to Adv. Partners",
                    "type": "boolean"
                },
                "itemVendorList": {
                    "$ref": "#/definitions/ItemVendorList"
                },
                "nextInvtCountDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "excludeFromSitemap": {
                    "x-displayName": "Exclude from Sitemap",
                    "type": "boolean"
                },
                "deferredRevenueAccount": {
                    "x-displayName": "Deferred Revenue Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "enforceMinQtyInternally": {
                    "x-displayName": "Enforce Internally",
                    "type": "boolean"
                },
                "autoReorderPoint": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "gainLossAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "weightUnits": {
                    "type": "string"
                },
                "fixedLotSize": {
                    "x-displayName": "Fixed Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "presentationItemList": {
                    "$ref": "#/definitions/PresentationItemList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "purchasePriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "manufacturerCity": {
                    "x-displayName": "Manufacturer City",
                    "type": "string"
                },
                "weight": {
                    "x-displayName": "Item Weight",
                    "format": "double",
                    "type": "number"
                },
                "copyDescription": {
                    "x-displayName": "Copy from Sales Order",
                    "type": "boolean"
                },
                "onHandValueMli": {
                    "x-displayName": "Value",
                    "format": "double",
                    "type": "number"
                },
                "taxSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "issueProduct": {
                    "x-displayName": "Product",
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorName": {
                    "x-displayName": "Vendor Name/Code",
                    "type": "string"
                },
                "stockDescription": {
                    "x-displayName": "Stock Description",
                    "type": "string"
                },
                "revenueAllocationGroup": {
                    "x-displayName": "Revenue Allocation Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityBackOrdered": {
                    "x-displayName": "Quantity Back Ordered",
                    "format": "double",
                    "type": "number"
                },
                "receiptQuantityDiff": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "isDonationItem": {
                    "x-displayName": "Variable Amount",
                    "type": "boolean"
                },
                "itemRevenueCategory": {
                    "x-displayName": "Item Revenue Category",
                    "$ref": "#/definitions/RecordRef"
                },
                "preferenceCriterion": {
                    "x-displayName": "Preference Criterion",
                    "$ref": "#/definitions/ItemPreferenceCriterion"
                },
                "reorderPoint": {
                    "x-displayName": "Reorder Point",
                    "format": "double",
                    "type": "number"
                },
                "searchKeywords": {
                    "x-displayName": "Search Keywords",
                    "type": "string"
                },
                "receiptQuantity": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "rate": {
                    "x-displayName": "Rate",
                    "format": "double",
                    "type": "number"
                },
                "noPriceMessage": {
                    "x-displayName": "No Price Message",
                    "type": "string"
                },
                "hazmatPackingGroup": {
                    "$ref": "#/definitions/HazmatPackingGroup"
                },
                "outOfStockBehavior": {
                    "x-displayName": "Out Of Stock Behavior",
                    "$ref": "#/definitions/ItemOutOfStockBehavior"
                },
                "upcCode": {
                    "x-displayName": "UPC Code",
                    "type": "string"
                },
                "storeDisplayImage": {
                    "x-displayName": "Item Display Image",
                    "$ref": "#/definitions/RecordRef"
                },
                "storeDisplayThumbnail": {
                    "x-displayName": "Item Display Thumbnail",
                    "$ref": "#/definitions/RecordRef"
                },
                "billQtyVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesTaxCode": {
                    "x-displayName": "Sales Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean"
                },
                "minimumQuantityUnits": {
                    "type": "string"
                },
                "relatedItemsDescription": {
                    "x-displayName": "Related Items Description",
                    "type": "string"
                },
                "locationsList": {
                    "$ref": "#/definitions/SerializedInventoryItemLocationsList"
                },
                "storeDisplayName": {
                    "x-displayName": "Store Display Name",
                    "type": "string"
                },
                "scheduleBNumber": {
                    "x-displayName": "Schedule B Number",
                    "type": "string"
                },
                "shippingCostUnits": {
                    "type": "string"
                },
                "storeDetailedDescription": {
                    "x-displayName": "Detailed Description",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costUnits": {
                    "type": "string"
                },
                "sitemapPriority": {
                    "x-displayName": "Sitemap Priority",
                    "$ref": "#/definitions/SitemapPriority"
                },
                "assetAccount": {
                    "x-displayName": "assetAccount",
                    "$ref": "#/definitions/RecordRef"
                },
                "pageTitle": {
                    "x-displayName": "Page Title",
                    "type": "string"
                },
                "quantityCommitted": {
                    "x-displayName": "Quantity Committed",
                    "format": "double",
                    "type": "number"
                },
                "autoPreferredStockLevel": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "numbersList": {
                    "$ref": "#/definitions/SerializedInventoryItemNumbersList"
                },
                "isHazmatItem": {
                    "type": "boolean"
                },
                "saleUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRef"
                },
                "billPriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "periodicLotSizeDays": {
                    "x-displayName": "Periods of Supply Increment",
                    "format": "int64",
                    "type": "integer"
                },
                "defaultItemShipMethod": {
                    "x-displayName": "Default Shipping Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "roundUpAsComponent": {
                    "x-displayName": "Round Up Quantity as Component",
                    "type": "boolean"
                },
                "scheduleBQuantity": {
                    "x-displayName": "Schedule B Quantity",
                    "format": "int64",
                    "type": "integer"
                },
                "isSpecialOrderItem": {
                    "x-displayName": "Special Order Item",
                    "type": "boolean"
                },
                "quantityAvailable": {
                    "x-displayName": "Quantity Available",
                    "format": "double",
                    "type": "number"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "isGcoCompliant": {
                    "x-displayName": "Google Checkout Compliant",
                    "type": "boolean"
                },
                "manufacturerAddr1": {
                    "x-displayName": "Manufacturer Address",
                    "type": "string"
                },
                "preferredStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "double",
                    "type": "number"
                },
                "softDescriptor": {
                    "x-displayName": "Soft Descriptor",
                    "$ref": "#/definitions/RecordRef"
                },
                "matrixType": {
                    "x-displayName": "Matrix Type",
                    "$ref": "#/definitions/ItemMatrixType"
                },
                "mpn": {
                    "x-displayName": "Manufacturer Part Number",
                    "type": "string"
                },
                "intercoCogsAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "pricesIncludeTax": {
                    "x-displayName": "Prices Include Tax",
                    "type": "boolean"
                },
                "alternateDemandSourceItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                },
                "purchaseDescription": {
                    "x-displayName": "Purchase Description",
                    "type": "string"
                },
                "demandSource": {
                    "x-displayName": "Demand Source",
                    "$ref": "#/definitions/RecordRef"
                },
                "maxDonationAmount": {
                    "x-displayName": "Maximum Variable Amount",
                    "format": "double",
                    "type": "number"
                },
                "transferPrice": {
                    "format": "double",
                    "type": "number"
                },
                "translationsList": {
                    "$ref": "#/definitions/TranslationList"
                },
                "weightUnit": {
                    "$ref": "#/definitions/ItemWeightUnit"
                },
                "rescheduleInDays": {
                    "x-displayName": "Reschedule In Days",
                    "format": "int64",
                    "type": "integer"
                },
                "manufacturerTariff": {
                    "x-displayName": "HS Tariff Number",
                    "type": "string"
                },
                "matchBillToReceipt": {
                    "type": "boolean"
                },
                "overallQuantityPricingType": {
                    "x-displayName": "Calculate Quantity Discounts",
                    "$ref": "#/definitions/ItemOverallQuantityPricingType"
                },
                "siteCategoryList": {
                    "$ref": "#/definitions/SiteCategoryList"
                },
                "featuredDescription": {
                    "x-displayName": "Featured Description",
                    "type": "string"
                },
                "leadTime": {
                    "x-displayName": "Lead Time",
                    "format": "int64",
                    "type": "integer"
                },
                "scheduleBCode": {
                    "$ref": "#/definitions/ScheduleBCode"
                },
                "urlComponent": {
                    "x-displayName": "URL Component",
                    "type": "string"
                },
                "forwardConsumptionDays": {
                    "x-displayName": "Forward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "manufacturer": {
                    "x-displayName": "Manufacturer",
                    "type": "string"
                },
                "supplyTimeFence": {
                    "x-displayName": "Planning Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "demandModifier": {
                    "x-displayName": "Estimated Demand Change",
                    "format": "double",
                    "type": "number"
                },
                "itemCarrier": {
                    "x-displayName": "Carrier",
                    "$ref": "#/definitions/ShippingCarrier"
                },
                "shoppingDotComCategory": {
                    "x-displayName": "Shopping.com Category",
                    "type": "string"
                },
                "storeItemTemplate": {
                    "x-displayName": "Item Drilldown Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "useBins": {
                    "x-displayName": "Use Bins",
                    "type": "boolean"
                },
                "supplyLotSizingMethod": {
                    "x-displayName": "Lot Sizing Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "lastInvtCountDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "minimumQuantity": {
                    "x-displayName": "Minimum Order Qty",
                    "format": "int64",
                    "type": "integer"
                },
                "revenueRecognitionRule": {
                    "x-displayName": "Revenue Recognition Rule",
                    "$ref": "#/definitions/RecordRef"
                },
                "shipIndividually": {
                    "x-displayName": "Ships Individually",
                    "type": "boolean"
                },
                "supplyReplenishmentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "costingMethod": {
                    "x-displayName": "Costing Method",
                    "$ref": "#/definitions/ItemCostingMethod"
                },
                "purchaseOrderQuantity": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "billingSchedule": {
                    "x-displayName": "Billing Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "serialNumbers": {
                    "x-displayName": "Serial Numbers",
                    "type": "string"
                },
                "costingMethodDisplay": {
                    "x-displayName": "Costing Method",
                    "type": "string"
                },
                "intercoIncomeAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isDropShipItem": {
                    "x-displayName": "Drop Ship Item",
                    "type": "boolean"
                },
                "storeDescription": {
                    "x-displayName": "Store Description",
                    "type": "string"
                },
                "manufacturerZip": {
                    "x-displayName": "Manufacturer Zip Code",
                    "type": "string"
                },
                "dropshipExpenseAccount": {
                    "x-displayName": "Dropship expense account",
                    "$ref": "#/definitions/RecordRef"
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "type": "boolean"
                },
                "itemNumberOptionsList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "hazmatId": {
                    "type": "string"
                },
                "offerSupport": {
                    "x-displayName": "Offer Support",
                    "type": "boolean"
                },
                "billExchRateVarianceAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "reorderMultiple": {
                    "x-displayName": "Reorder Multiple",
                    "format": "int64",
                    "type": "integer"
                },
                "useMarginalRates": {
                    "x-displayName": "Use Marginal Rates",
                    "type": "boolean"
                },
                "countryOfManufacture": {
                    "x-displayName": "Manufacturer Country",
                    "$ref": "#/definitions/Country"
                },
                "unitsType": {
                    "x-displayName": "Units Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "itemOptionsList": {
                    "$ref": "#/definitions/ItemOptionsList"
                },
                "safetyStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "int64",
                    "type": "integer"
                },
                "cogsAccount": {
                    "x-displayName": "COGS Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "producer": {
                    "x-displayName": "Producer",
                    "type": "boolean"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "autoLeadTime": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean"
                },
                "isOnline": {
                    "x-displayName": "Display in Web Site",
                    "type": "boolean"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "hazmatItemUnits": {
                    "type": "string"
                },
                "handlingCostUnits": {
                    "type": "string"
                },
                "showDefaultDonationAmount": {
                    "x-displayName": "Show Default Amount",
                    "type": "boolean"
                },
                "purchaseOrderQuantityDiff": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "type": "number"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nexTagCategory": {
                    "x-displayName": "NexTag Category",
                    "type": "string"
                },
                "totalValue": {
                    "x-displayName": "Total Value",
                    "format": "double",
                    "type": "number"
                },
                "quantityReorderUnits": {
                    "type": "string"
                },
                "cost": {
                    "x-displayName": "Purchase Price",
                    "format": "double",
                    "type": "number"
                },
                "seasonalDemand": {
                    "x-displayName": "Seasonal Demand",
                    "type": "boolean"
                },
                "invtClassification": {
                    "x-displayName": "Classification",
                    "$ref": "#/definitions/ItemInvtClassification"
                },
                "itemShipMethodList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "lastModifiedDate": {
                    "x-displayName": "Last Modified",
                    "format": "date-time",
                    "type": "string"
                },
                "manufacturerTaxId": {
                    "x-displayName": "Manufacturer Tax Id",
                    "type": "string"
                },
                "trackLandedCost": {
                    "x-displayName": "Track Landed Cost",
                    "type": "boolean"
                },
                "reorderPointUnits": {
                    "type": "string"
                },
                "preferredLocation": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecSchedule": {
                    "x-displayName": "Revenue Recognition Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "costEstimate": {
                    "format": "double",
                    "x-displayName": "Item Defined Cost",
                    "type": "number"
                },
                "averageCost": {
                    "x-displayName": "Average Cost",
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "SalesOrder": {
            "required": [
                "entity",
                "itemList",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "SalesOrder",
            "x-has-customfields": true,
            "properties": {
                "accountingBookDetailList": {
                    "$ref": "#/definitions/AccountingBookDetailList"
                },
                "discountRate": {
                    "x-displayName": "Rate",
                    "type": "string"
                },
                "revenueStatus": {
                    "$ref": "#/definitions/RevenueStatus"
                },
                "endDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "salesTeamList": {
                    "$ref": "#/definitions/SalesOrderSalesTeamList"
                },
                "vatRegNum": {
                    "type": "string"
                },
                "paymentEventType": {
                    "$ref": "#/definitions/TransactionPaymentEventType"
                },
                "ccSecurityCodeMatch": {
                    "x-displayName": "CSC Match",
                    "$ref": "#/definitions/AvsMatchCode"
                },
                "memo": {
                    "type": "string"
                },
                "validFrom": {
                    "x-displayName": "Valid From / Start Date (MM/YYYY)",
                    "format": "date-time",
                    "type": "string"
                },
                "syncPartnerTeams": {
                    "type": "boolean"
                },
                "ccNumber": {
                    "type": "string"
                },
                "saveOnAuthDecline": {
                    "type": "boolean"
                },
                "balance": {
                    "format": "double",
                    "type": "number"
                },
                "terms": {
                    "$ref": "#/definitions/RecordRef"
                },
                "intercoStatus": {
                    "$ref": "#/definitions/IntercoStatus"
                },
                "fax": {
                    "type": "string"
                },
                "threeDStatusCode": {
                    "x-displayName": "Payer Authentication Status",
                    "type": "string"
                },
                "vsoeAutoCalc": {
                    "x-displayName": "Auto Calculate VSOE Allocation",
                    "type": "boolean"
                },
                "shipGroupList": {
                    "$ref": "#/definitions/SalesOrderShipGroupList"
                },
                "paymentEventHoldReason": {
                    "x-displayName": "Reason",
                    "$ref": "#/definitions/TransactionPaymentEventHoldReason"
                },
                "fxAccount": {
                    "x-displayName": "Foreign Currency Adjustment Revenue Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "opportunity": {
                    "x-displayName": "Opportunity",
                    "$ref": "#/definitions/RecordRef"
                },
                "contribPct": {
                    "type": "string"
                },
                "shipDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "isMultiShipTo": {
                    "type": "boolean"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "shipIsResidential": {
                    "x-displayName": "Shipping address is residential",
                    "type": "boolean"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "startDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "creditCardProcessor": {
                    "x-displayName": "Payment Processing Profile",
                    "$ref": "#/definitions/RecordRef"
                },
                "partnersList": {
                    "$ref": "#/definitions/SalesOrderPartnersList"
                },
                "discountItem": {
                    "x-displayName": "Discount",
                    "$ref": "#/definitions/RecordRef"
                },
                "giftCertApplied": {
                    "format": "double",
                    "type": "number"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "handlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "type": "number"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "email": {
                    "type": "string"
                },
                "revRecStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "getAuth": {
                    "x-displayName": "Get Authorization",
                    "type": "boolean"
                },
                "otherRefNum": {
                    "type": "string"
                },
                "toBePrinted": {
                    "x-displayName": "To Be Printed",
                    "type": "boolean"
                },
                "billingSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "shippingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "type": "string"
                },
                "ccApproved": {
                    "x-displayName": "Credit Card Approved",
                    "type": "boolean"
                },
                "recognizedRevenue": {
                    "format": "double",
                    "type": "number"
                },
                "paymentEventResult": {
                    "x-displayName": "Status",
                    "$ref": "#/definitions/TransactionPaymentEventResult"
                },
                "shipComplete": {
                    "x-displayName": "Ship Complete",
                    "type": "boolean"
                },
                "altHandlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "type": "number"
                },
                "createdDate": {
                    "x-displayName": "Date Created",
                    "format": "date-time",
                    "type": "string"
                },
                "paypalProcess": {
                    "x-displayName": "Process PayPal Payment",
                    "type": "boolean"
                },
                "createdFrom": {
                    "x-displayName": "Created From",
                    "$ref": "#/definitions/RecordRef"
                },
                "Partner": {
                    "x-displayName": "Partner",
                    "$ref": "#/definitions/RecordRef"
                },
                "estGrossProfit": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "shippingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "itemList": {
                    "$ref": "#/definitions/SalesOrderItemList"
                },
                "paymentEventDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "revRecOnRevCommitment": {
                    "type": "boolean"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "debitCardIssueNo": {
                    "x-displayName": "Issue No.",
                    "type": "string"
                },
                "estGrossProfitPercent": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "salesRep": {
                    "x-displayName": "Sales Rep",
                    "$ref": "#/definitions/RecordRef"
                },
                "shopperIpAddress": {
                    "type": "string"
                },
                "salesEffectiveDate": {
                    "x-displayName": "Sales Effective Date",
                    "format": "date-time",
                    "type": "string"
                },
                "taxTotal": {
                    "x-displayName": "Tax",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "ccAvsZipMatch": {
                    "x-displayName": "AVS Zip Match",
                    "$ref": "#/definitions/AvsMatchCode"
                },
                "intercoTransaction": {
                    "$ref": "#/definitions/RecordRef"
                },
                "source": {
                    "x-displayName": "Source",
                    "type": "string"
                },
                "subTotal": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "ccName": {
                    "x-displayName": "Name on Card",
                    "type": "string"
                },
                "pnRefNum": {
                    "x-displayName": "P/N Ref.",
                    "type": "string"
                },
                "paymentEventUpdatedBy": {
                    "type": "string"
                },
                "giftCertRedemptionList": {
                    "$ref": "#/definitions/GiftCertRedemptionList"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "handlingTax1Rate": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number"
                },
                "toBeFaxed": {
                    "x-displayName": "To Be Faxed",
                    "type": "boolean"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number"
                },
                "revRecEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "leadSource": {
                    "x-displayName": "Lead Source",
                    "$ref": "#/definitions/RecordRef"
                },
                "trackingNumbers": {
                    "x-displayName": "Tracking Numbers",
                    "x-readOnly": true,
                    "type": "string"
                },
                "ccSecurityCode": {
                    "x-displayName": "CSC",
                    "type": "string"
                },
                "excludeCommission": {
                    "x-displayName": "Exclude Commissions",
                    "type": "boolean"
                },
                "shippingTaxCode": {
                    "x-displayName": "Shipping Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate": {
                    "format": "double",
                    "type": "number"
                },
                "drAccount": {
                    "x-displayName": "Deferred Revenue Reclassification Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "toBeEmailed": {
                    "x-displayName": "To Be Emailed",
                    "type": "boolean"
                },
                "fob": {
                    "type": "string"
                },
                "shipAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "paymentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "paypalAuthId": {
                    "x-displayName": "Authorization ID",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "payPalStatus": {
                    "type": "string"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "ccExpireDate": {
                    "x-displayName": "Expires (MM/YYYY)",
                    "format": "date-time",
                    "type": "string"
                },
                "revCommitStatus": {
                    "$ref": "#/definitions/RevenueCommitStatus"
                },
                "tranId": {
                    "type": "string"
                },
                "salesGroup": {
                    "x-displayName": "Choose Team",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxItem": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "orderStatus": {
                    "x-displayName": "Order Status",
                    "$ref": "#/definitions/SalesOrderOrderStatus"
                },
                "isRecurringPayment": {
                    "x-displayName": "Recurring Payment",
                    "type": "boolean"
                },
                "total": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "ccStreet": {
                    "x-displayName": "Card Street",
                    "type": "string"
                },
                "currencyName": {
                    "x-displayName": "Currency",
                    "x-readOnly": true,
                    "type": "string"
                },
                "actualShipDate": {
                    "x-displayName": "Actual",
                    "format": "date-time",
                    "type": "string"
                },
                "handlingTaxCode": {
                    "x-displayName": "Handling Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "promoCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "ignoreAvs": {
                    "x-displayName": "Ignore AVS",
                    "type": "boolean"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "ccZipCode": {
                    "x-displayName": "Card Zip Code",
                    "type": "string"
                },
                "linkedTrackingNumbers": {
                    "x-displayName": "Tracking Numbers",
                    "type": "string"
                },
                "totalCostEstimate": {
                    "format": "double",
                    "type": "number"
                },
                "authCode": {
                    "x-displayName": "Auth. Code",
                    "type": "string"
                },
                "tranIsVsoeBundle": {
                    "x-displayName": "Transaction Is VSOE Bundle",
                    "type": "boolean"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean"
                },
                "messageSel": {
                    "x-displayName": "Select Message",
                    "$ref": "#/definitions/RecordRef"
                },
                "message": {
                    "type": "string"
                },
                "handlingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "type": "string"
                },
                "payPalTranId": {
                    "type": "string"
                },
                "revRecSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "ccAvsStreetMatch": {
                    "x-displayName": "AVS Street Match",
                    "$ref": "#/definitions/AvsMatchCode"
                },
                "syncSalesTeams": {
                    "type": "boolean"
                },
                "altShippingCost": {
                    "x-displayName": "Shipping cost",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "deferredRevenue": {
                    "format": "double",
                    "type": "number"
                },
                "discountTotal": {
                    "x-displayName": "Discount Total",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "altSalesTotal": {
                    "format": "double",
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "shippingTax1Rate": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number"
                },
                "tax2Total": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number"
                },
                "creditCard": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "SalesOrderOrderStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "SalesOrderItemList": {
            "required": [
                "item"
            ],
            "properties": {
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SalesOrderItem"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "SalesOrderItem": {
            "required": [
                "item"
            ],
            "x-has-customfields": true,
            "properties": {
                "catchUpPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "orderPriority": {
                    "format": "double",
                    "type": "number"
                },
                "chargeType": {
                    "x-displayName": "Charge Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityCommitted": {
                    "format": "double",
                    "type": "number"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number"
                },
                "licenseCode": {
                    "x-displayName": "License Code",
                    "type": "string"
                },
                "isEstimate": {
                    "type": "boolean"
                },
                "altSalesAmt": {
                    "format": "double",
                    "type": "number"
                },
                "price": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRef"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "createPo": {
                    "$ref": "#/definitions/SalesOrderItemCreatePo"
                },
                "poRate": {
                    "format": "double",
                    "type": "number"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "fromJob": {
                    "type": "boolean"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityAvailable": {
                    "format": "double",
                    "type": "number"
                },
                "revRecEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "vsoeAmount": {
                    "x-displayName": "Calculated Amount",
                    "format": "double",
                    "type": "number"
                },
                "vsoeDelivered": {
                    "x-displayName": "Delivered",
                    "type": "boolean"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "itemFulfillmentChoice": {
                    "$ref": "#/definitions/SalesOrderItemFulfillmentChoice"
                },
                "quantityFulfilled": {
                    "format": "double",
                    "type": "number"
                },
                "inventoryDetail": {
                    "x-displayName": "Inventory Detail",
                    "$ref": "#/definitions/InventoryDetail"
                },
                "expandItemGroup": {
                    "type": "boolean"
                },
                "giftCertNumber": {
                    "x-displayName": "Code",
                    "type": "string"
                },
                "giftCertMessage": {
                    "x-displayName": "Gift Message",
                    "type": "string"
                },
                "giftCertRecipientName": {
                    "x-displayName": "Recipient Name",
                    "type": "string"
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "subscription": {
                    "x-displayName": "{Subscription}",
                    "$ref": "#/definitions/RecordRef"
                },
                "createdPo": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "quantityBackOrdered": {
                    "format": "double",
                    "type": "number"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "vsoeIsEstimate": {
                    "x-displayName": "Estimate",
                    "type": "boolean"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                },
                "shipMethod": {
                    "x-displayName": "Ship Via",
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeAllocation": {
                    "x-displayName": "Allocation Amount",
                    "format": "double",
                    "type": "number"
                },
                "shipGroup": {
                    "format": "int64",
                    "type": "integer"
                },
                "poCurrency": {
                    "x-displayName": "Currency",
                    "type": "string"
                },
                "line": {
                    "format": "int64",
                    "type": "integer"
                },
                "lineUniqueKey": {
                    "format": "int64",
                    "type": "integer"
                },
                "expectedShipDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "itemIsFulfilled": {
                    "type": "boolean"
                },
                "rate": {
                    "type": "string"
                },
                "quantityOnHand": {
                    "format": "double",
                    "type": "number"
                },
                "deferRevRec": {
                    "type": "boolean"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate2": {
                    "format": "double",
                    "x-displayName": "PST",
                    "type": "number"
                },
                "taxAmount": {
                    "format": "double",
                    "type": "number"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number"
                },
                "revRecStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "quantityPicked": {
                    "format": "double",
                    "type": "number"
                },
                "giftCertFrom": {
                    "x-displayName": "From",
                    "type": "string"
                },
                "quantity": {
                    "format": "double",
                    "type": "number"
                },
                "giftCertRecipientEmail": {
                    "x-displayName": "Recipient Email",
                    "type": "string"
                },
                "billingSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "excludeFromRateRequest": {
                    "x-displayName": "Exclude Item from Rate Request",
                    "type": "boolean"
                },
                "serialNumbers": {
                    "x-displayName": "Serial/Lot Numbers",
                    "type": "string"
                },
                "taxDetailsReference": {
                    "type": "string"
                },
                "isTaxable": {
                    "type": "boolean"
                },
                "locationAutoAssigned": {
                    "type": "boolean"
                },
                "noAutoAssignLocation": {
                    "type": "boolean"
                },
                "percentComplete": {
                    "format": "double",
                    "type": "number"
                },
                "commitInventory": {
                    "x-displayName": "Commit",
                    "$ref": "#/definitions/SalesOrderItemCommitInventory"
                },
                "revRecSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipAddress": {
                    "x-displayName": "Ship To",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecTermInMonths": {
                    "format": "int64",
                    "type": "integer"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number"
                },
                "isClosed": {
                    "type": "boolean"
                },
                "createWo": {
                    "x-displayName": "Create WO",
                    "type": "boolean"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number"
                },
                "quantityBilled": {
                    "x-displayName": "Invoiced",
                    "format": "double",
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityPacked": {
                    "format": "double",
                    "type": "number"
                },
                "poVendor": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "TransactionPaymentEventResult": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "SalesOrderPartnersList": {
            "properties": {
                "partners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Partners"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "TransactionPaymentEventHoldReason": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "SalesOrderShipGroupList": {
            "properties": {
                "shipGroup": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionShipGroup"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "TransactionPaymentEventType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "SalesOrderSalesTeamList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "salesTeam": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SalesOrderSalesTeam"
                    }
                }
            }
        },
        "SalesOrderSalesTeam": {
            "properties": {
                "contribution": {
                    "x-displayName": "Contribution %",
                    "format": "double",
                    "type": "number"
                },
                "isPrimary": {
                    "x-displayName": "Primary",
                    "type": "boolean"
                },
                "salesRole": {
                    "x-displayName": "Sales Role",
                    "$ref": "#/definitions/RecordRef"
                },
                "employee": {
                    "x-displayName": "Employee",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "SalesOrderItemCommitInventory": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "SalesOrderItemFulfillmentChoice": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "SalesOrderItemCreatePo": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "SubsidiariesPost": {
            "properties": {
                "accountingBookDetailList": {
                    "$ref": "#/definitions/SubsidiaryAccountingBookDetailList"
                },
                "addrLanguage": {
                    "x-displayName": "Language",
                    "type": "string"
                },
                "allowPayroll": {
                    "type": "boolean"
                },
                "checkLayout": {
                    "x-displayName": "Check",
                    "$ref": "#/definitions/RecordRef"
                },
                "classTranslationList": {
                    "$ref": "#/definitions/ClassTranslationList"
                },
                "consol": {
                    "x-displayName": "Consolidated",
                    "type": "string"
                },
                "country": {
                    "$ref": "#/definitions/Country"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "edition": {
                    "x-displayName": "Edition",
                    "type": "string"
                },
                "email": {
                    "x-displayName": "Return Email Address",
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "fax": {
                    "x-displayName": "Fax",
                    "type": "string"
                },
                "federalIdNumber": {
                    "x-displayName": "Employer Identification Number (EIN)",
                    "type": "string"
                },
                "fiscalCalendar": {
                    "x-displayName": "Fiscal Calendar",
                    "$ref": "#/definitions/RecordRef"
                },
                "inboundEmail": {
                    "x-displayName": "Inbound Email Address",
                    "type": "string"
                },
                "interCoAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "isElimination": {
                    "x-displayName": "Elimination",
                    "type": "boolean"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "legalName": {
                    "x-displayName": "Legal Name",
                    "type": "string"
                },
                "logo": {
                    "x-displayName": "Subsidiary Logo (Forms)",
                    "$ref": "#/definitions/RecordRef"
                },
                "mainAddress": {
                    "$ref": "#/definitions/Address"
                },
                "name": {
                    "x-displayName": "Name",
                    "type": "string"
                },
                "nexusList": {
                    "$ref": "#/definitions/SubsidiaryNexusList"
                },
                "nonConsol": {
                    "x-displayName": "Default",
                    "type": "string"
                },
                "pageLogo": {
                    "x-displayName": "Subsidiary Logo (Pages)",
                    "$ref": "#/definitions/RecordRef"
                },
                "parent": {
                    "x-displayName": "Sub{1} of",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderAmount": {
                    "x-displayName": "Vendor Bill - Purchase Order Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "purchaseOrderQuantity": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "purchaseOrderQuantityDiff": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "receiptAmount": {
                    "x-displayName": "Vendor Bill - Item Receipt Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "receiptQuantity": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "receiptQuantityDiff": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "returnAddress": {
                    "$ref": "#/definitions/Address"
                },
                "shippingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "showSubsidiaryName": {
                    "x-displayName": "Always Display Subsidiary Name",
                    "type": "boolean"
                },
                "ssnOrTin": {
                    "x-displayName": "SSN or TIN (Social Security Number, Tax ID Number)",
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "state1TaxNumber": {
                    "x-displayName": "ACN",
                    "type": "string"
                },
                "taxFiscalCalendar": {
                    "x-displayName": "Tax Fiscal Calendar",
                    "$ref": "#/definitions/RecordRef"
                },
                "tranPrefix": {
                    "x-displayName": "Document Number Prefix",
                    "type": "string"
                },
                "url": {
                    "x-displayName": "Web Site",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "state"
            ],
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Subsidary"
        },
        "SubsidiaryNexusList": {
            "properties": {
                "nexus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubsidiaryNexus"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "SubsidiaryNexus": {
            "properties": {
                "country": {
                    "x-displayName": "Country",
                    "type": "string"
                },
                "nexusId": {
                    "x-displayName": "Nexus",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "SubsidiaryAccountingBookDetailList": {
            "properties": {
                "subsidiaryAccountingBookDetail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubsidiaryAccountingBookDetail"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "SubsidiaryAccountingBookDetail": {
            "properties": {
                "bookStatus": {
                    "$ref": "#/definitions/AccountingBookStatus"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "accountingBook": {
                    "x-displayName": "Accounting Book",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "AccountingBookStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "Subsidiaries": {
            "properties": {
                "accountingBookDetailList": {
                    "$ref": "#/definitions/SubsidiaryAccountingBookDetailList"
                },
                "addrLanguage": {
                    "x-displayName": "Language",
                    "type": "string"
                },
                "allowPayroll": {
                    "type": "boolean"
                },
                "checkLayout": {
                    "x-displayName": "Check",
                    "$ref": "#/definitions/RecordRef"
                },
                "classTranslationList": {
                    "$ref": "#/definitions/ClassTranslationList"
                },
                "consol": {
                    "x-displayName": "Consolidated",
                    "type": "string"
                },
                "country": {
                    "$ref": "#/definitions/Country"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "edition": {
                    "x-displayName": "Edition",
                    "type": "string"
                },
                "email": {
                    "x-displayName": "Return Email Address",
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "fax": {
                    "x-displayName": "Fax",
                    "type": "string"
                },
                "federalIdNumber": {
                    "x-displayName": "Employer Identification Number (EIN)",
                    "type": "string"
                },
                "fiscalCalendar": {
                    "x-displayName": "Fiscal Calendar",
                    "$ref": "#/definitions/RecordRef"
                },
                "inboundEmail": {
                    "x-displayName": "Inbound Email Address",
                    "type": "string"
                },
                "interCoAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "isElimination": {
                    "x-displayName": "Elimination",
                    "type": "boolean"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "legalName": {
                    "x-displayName": "Legal Name",
                    "type": "string"
                },
                "logo": {
                    "x-displayName": "Subsidiary Logo (Forms)",
                    "$ref": "#/definitions/RecordRef"
                },
                "mainAddress": {
                    "$ref": "#/definitions/Address"
                },
                "name": {
                    "x-displayName": "Name",
                    "type": "string"
                },
                "nexusList": {
                    "$ref": "#/definitions/SubsidiaryNexusList"
                },
                "nonConsol": {
                    "x-displayName": "Default",
                    "type": "string"
                },
                "pageLogo": {
                    "x-displayName": "Subsidiary Logo (Pages)",
                    "$ref": "#/definitions/RecordRef"
                },
                "parent": {
                    "x-displayName": "Sub{1} of",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderAmount": {
                    "x-displayName": "Vendor Bill - Purchase Order Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "purchaseOrderQuantity": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "purchaseOrderQuantityDiff": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "receiptAmount": {
                    "x-displayName": "Vendor Bill - Item Receipt Amount Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "receiptQuantity": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Tolerance",
                    "format": "double",
                    "type": "number"
                },
                "receiptQuantityDiff": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Difference",
                    "format": "double",
                    "type": "number"
                },
                "returnAddress": {
                    "$ref": "#/definitions/Address"
                },
                "shippingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "showSubsidiaryName": {
                    "x-displayName": "Always Display Subsidiary Name",
                    "type": "boolean"
                },
                "ssnOrTin": {
                    "x-displayName": "SSN or TIN (Social Security Number, Tax ID Number)",
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "state1TaxNumber": {
                    "x-displayName": "ACN",
                    "type": "string"
                },
                "taxFiscalCalendar": {
                    "x-displayName": "Tax Fiscal Calendar",
                    "$ref": "#/definitions/RecordRef"
                },
                "tranPrefix": {
                    "x-displayName": "Document Number Prefix",
                    "type": "string"
                },
                "url": {
                    "x-displayName": "Web Site",
                    "type": "string"
                }
            },
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Subsidary"
        },
        "ExpenseReportPost": {
            "required": [
                "expenseList",
                "entity"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Expense-Report",
            "x-has-customfields": true,
            "properties": {
                "tranId": {
                    "x-displayName": "Exp. Rept. #",
                    "type": "string"
                },
                "dueDate": {
                    "x-displayName": "Date Due",
                    "format": "date-time",
                    "type": "string"
                },
                "memo": {
                    "x-displayName": "Purpose",
                    "type": "string"
                },
                "tax1Amt": {
                    "x-displayName": "GST/HST",
                    "format": "double",
                    "type": "number"
                },
                "advance": {
                    "x-displayName": "Advance To Apply",
                    "format": "double",
                    "type": "number"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/AccountingBookDetailList"
                },
                "internalId": {
                    "type": "string"
                },
                "total": {
                    "x-displayName": "Expense Total",
                    "format": "double",
                    "type": "number"
                },
                "expenseList": {
                    "$ref": "#/definitions/ExpenseReportExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "approvalStatus": {
                    "x-displayName": "Approval Status",
                    "$ref": "#/definitions/RecordRef"
                },
                "amount": {
                    "x-displayName": "Total Reimbursable Amount",
                    "format": "double",
                    "type": "number"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "nextApprover": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "accountingApproval": {
                    "x-displayName": "Accounting Approval",
                    "type": "boolean"
                },
                "externalId": {
                    "type": "string"
                },
                "tax2Amt": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number"
                },
                "supervisorApproval": {
                    "x-displayName": "Supervisor Approval",
                    "type": "boolean"
                },
                "useMultiCurrency": {
                    "x-displayName": "Use Multicurrency",
                    "type": "boolean"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "complete": {
                    "x-displayName": "Complete",
                    "type": "boolean"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "x-displayName": "Employee",
                    "$ref": "#/definitions/RecordRef"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "ExpenseReportExpenseList": {
            "required": [
                "expense"
            ],
            "properties": {
                "expense": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExpenseReportExpense"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ExpenseReportExpense": {
            "required": [
                "amount",
                "currency",
                "category"
            ],
            "properties": {
                "line": {
                    "type": "number",
                    "format": "double"
                },
                "memo": {
                    "type": "string",
                    "x-displayName": "Memo"
                },
                "tax1Amt": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "GST/HST"
                },
                "foreignAmount": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Foreign Amount"
                },
                "exchangeRate": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Exchange Rate"
                },
                "rate": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Rate"
                },
                "expMediaItem": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Attach File"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Currency"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate2": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "PST"
                },
                "taxRate1": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Tax Rate"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "amount": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Amount"
                },
                "quantity": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Quantity"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Tax Code"
                },
                "expenseDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Date"
                },
                "isBillable": {
                    "type": "boolean",
                    "x-displayName": "Billable"
                },
                "refNumber": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Ref No."
                },
                "grossAmt": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Gross Amt"
                },
                "isNonReimbursable": {
                    "type": "boolean",
                    "x-displayName": "Non-reimbursable"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "receipt": {
                    "type": "boolean",
                    "x-displayName": "Receipt"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Category"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "ExpenseReport": {
            "required": [
                "expenseList",
                "entity"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Expense-Report",
            "x-has-customfields": true,
            "properties": {
                "tranId": {
                    "x-displayName": "Exp. Rept. #",
                    "type": "string"
                },
                "dueDate": {
                    "x-displayName": "Date Due",
                    "format": "date-time",
                    "type": "string"
                },
                "memo": {
                    "x-displayName": "Purpose",
                    "type": "string"
                },
                "tax1Amt": {
                    "x-displayName": "GST/HST",
                    "format": "double",
                    "type": "number"
                },
                "advance": {
                    "x-displayName": "Advance To Apply",
                    "format": "double",
                    "type": "number"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/AccountingBookDetailList"
                },
                "internalId": {
                    "type": "string"
                },
                "total": {
                    "x-displayName": "Expense Total",
                    "format": "double",
                    "type": "number"
                },
                "expenseList": {
                    "$ref": "#/definitions/ExpenseReportExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "approvalStatus": {
                    "x-displayName": "Approval Status",
                    "$ref": "#/definitions/RecordRef"
                },
                "amount": {
                    "x-displayName": "Total Reimbursable Amount",
                    "format": "double",
                    "type": "number"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "nextApprover": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "accountingApproval": {
                    "x-displayName": "Accounting Approval",
                    "type": "boolean"
                },
                "externalId": {
                    "type": "string"
                },
                "tax2Amt": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number"
                },
                "supervisorApproval": {
                    "x-displayName": "Supervisor Approval",
                    "type": "boolean"
                },
                "useMultiCurrency": {
                    "x-displayName": "Use Multicurrency",
                    "type": "boolean"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "complete": {
                    "x-displayName": "Complete",
                    "type": "boolean"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "x-displayName": "Employee",
                    "$ref": "#/definitions/RecordRef"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "ExpenseReportPut": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Expense-Report",
            "x-has-customfields": true,
            "properties": {
                "tranId": {
                    "x-displayName": "Exp. Rept. #",
                    "type": "string"
                },
                "dueDate": {
                    "x-displayName": "Date Due",
                    "format": "date-time",
                    "type": "string"
                },
                "memo": {
                    "x-displayName": "Purpose",
                    "type": "string"
                },
                "tax1Amt": {
                    "x-displayName": "GST/HST",
                    "format": "double",
                    "type": "number"
                },
                "advance": {
                    "x-displayName": "Advance To Apply",
                    "format": "double",
                    "type": "number"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/AccountingBookDetailList"
                },
                "internalId": {
                    "type": "string"
                },
                "total": {
                    "x-displayName": "Expense Total",
                    "format": "double",
                    "type": "number"
                },
                "expenseList": {
                    "$ref": "#/definitions/ExpenseReportExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "approvalStatus": {
                    "x-displayName": "Approval Status",
                    "$ref": "#/definitions/RecordRef"
                },
                "amount": {
                    "x-displayName": "Total Reimbursable Amount",
                    "format": "double",
                    "type": "number"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "nextApprover": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "accountingApproval": {
                    "x-displayName": "Accounting Approval",
                    "type": "boolean"
                },
                "externalId": {
                    "type": "string"
                },
                "tax2Amt": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number"
                },
                "supervisorApproval": {
                    "x-displayName": "Supervisor Approval",
                    "type": "boolean"
                },
                "useMultiCurrency": {
                    "x-displayName": "Use Multicurrency",
                    "type": "boolean"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "complete": {
                    "x-displayName": "Complete",
                    "type": "boolean"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "x-displayName": "Employee",
                    "$ref": "#/definitions/RecordRef"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "ItemSource": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "Task": {
            "required": [
                "title"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": true,
            "x-vendor-objectname": "Task",
            "properties": {
                "supportCase": {
                    "x-displayName": "Support Case",
                    "$ref": "#/definitions/RecordRef"
                },
                "parent": {
                    "x-displayName": "Child Of",
                    "$ref": "#/definitions/RecordRef"
                },
                "endDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "reminderMinutes": {
                    "x-displayName": "Set up Reminder",
                    "$ref": "#/definitions/TaskReminderMinutes"
                },
                "dueDate": {
                    "x-displayName": "Due Date",
                    "format": "date-time",
                    "type": "string"
                },
                "timeRemaining": {
                    "x-displayName": "Time Remaining",
                    "$ref": "#/definitions/Duration"
                },
                "title": {
                    "x-displayName": "Title",
                    "type": "string"
                },
                "estimatedTimeOverride": {
                    "x-displayName": "Current Time Budget",
                    "$ref": "#/definitions/Duration"
                },
                "actualTime": {
                    "x-displayName": "Actual Time",
                    "$ref": "#/definitions/Duration"
                },
                "internalId": {
                    "type": "string"
                },
                "sendEmail": {
                    "x-displayName": "Send email",
                    "type": "boolean"
                },
                "percentTimeComplete": {
                    "x-displayName": "Percent Complete(Time)",
                    "format": "double",
                    "type": "number"
                },
                "timedEvent": {
                    "x-displayName": "Timed Event",
                    "type": "boolean"
                },
                "contact": {
                    "x-displayName": "Contact",
                    "$ref": "#/definitions/RecordRef"
                },
                "company": {
                    "x-displayName": "Company",
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "estimatedTime": {
                    "x-displayName": "Initial Time Budget",
                    "$ref": "#/definitions/Duration"
                },
                "owner": {
                    "x-displayName": "Created By",
                    "$ref": "#/definitions/RecordRef"
                },
                "accessLevel": {
                    "x-displayName": "Private",
                    "type": "boolean"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "reminderType": {
                    "$ref": "#/definitions/TaskReminderType"
                },
                "timeItemList": {
                    "$ref": "#/definitions/TaskTimeItemList"
                },
                "percentComplete": {
                    "x-displayName": "Percent Complete",
                    "format": "double",
                    "type": "number"
                },
                "message": {
                    "x-displayName": "Comments",
                    "type": "string"
                },
                "priority": {
                    "x-displayName": "Priority",
                    "$ref": "#/definitions/TaskPriority"
                },
                "completedDate": {
                    "x-displayName": "Date Completed",
                    "format": "date-time",
                    "type": "string"
                },
                "contactList": {
                    "$ref": "#/definitions/TaskContactList"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "milestone": {
                    "x-displayName": "Milestone",
                    "$ref": "#/definitions/RecordRef"
                },
                "assigned": {
                    "x-displayName": "Assigned To",
                    "$ref": "#/definitions/RecordRef"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "startDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "transaction": {
                    "x-displayName": "Transaction",
                    "$ref": "#/definitions/RecordRef"
                },
                "status": {
                    "x-displayName": "Status",
                    "$ref": "#/definitions/TaskStatus"
                }
            }
        },
        "UpdateTask": {
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": true,
            "x-vendor-objectname": "Task",
            "properties": {
                "supportCase": {
                    "x-displayName": "Support Case",
                    "$ref": "#/definitions/RecordRef"
                },
                "parent": {
                    "x-displayName": "Child Of",
                    "$ref": "#/definitions/RecordRef"
                },
                "endDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "reminderMinutes": {
                    "x-displayName": "Set up Reminder",
                    "$ref": "#/definitions/TaskReminderMinutes"
                },
                "dueDate": {
                    "x-displayName": "Due Date",
                    "format": "date-time",
                    "type": "string"
                },
                "timeRemaining": {
                    "x-displayName": "Time Remaining",
                    "$ref": "#/definitions/Duration"
                },
                "title": {
                    "x-displayName": "Title",
                    "type": "string"
                },
                "estimatedTimeOverride": {
                    "x-displayName": "Current Time Budget",
                    "$ref": "#/definitions/Duration"
                },
                "actualTime": {
                    "x-displayName": "Actual Time",
                    "$ref": "#/definitions/Duration"
                },
                "internalId": {
                    "type": "string"
                },
                "sendEmail": {
                    "x-displayName": "Send email",
                    "type": "boolean"
                },
                "percentTimeComplete": {
                    "x-displayName": "Percent Complete(Time)",
                    "format": "double",
                    "type": "number"
                },
                "timedEvent": {
                    "x-displayName": "Timed Event",
                    "type": "boolean"
                },
                "contact": {
                    "x-displayName": "Contact",
                    "$ref": "#/definitions/RecordRef"
                },
                "company": {
                    "x-displayName": "Company",
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "estimatedTime": {
                    "x-displayName": "Initial Time Budget",
                    "$ref": "#/definitions/Duration"
                },
                "owner": {
                    "x-displayName": "Created By",
                    "$ref": "#/definitions/RecordRef"
                },
                "accessLevel": {
                    "x-displayName": "Private",
                    "type": "boolean"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "reminderType": {
                    "$ref": "#/definitions/TaskReminderType"
                },
                "timeItemList": {
                    "$ref": "#/definitions/TaskTimeItemList"
                },
                "percentComplete": {
                    "x-displayName": "Percent Complete",
                    "format": "double",
                    "type": "number"
                },
                "message": {
                    "x-displayName": "Comments",
                    "type": "string"
                },
                "priority": {
                    "x-displayName": "Priority",
                    "$ref": "#/definitions/TaskPriority"
                },
                "completedDate": {
                    "x-displayName": "Date Completed",
                    "format": "date-time",
                    "type": "string"
                },
                "contactList": {
                    "$ref": "#/definitions/TaskContactList"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "milestone": {
                    "x-displayName": "Milestone",
                    "$ref": "#/definitions/RecordRef"
                },
                "assigned": {
                    "x-displayName": "Assigned To",
                    "$ref": "#/definitions/RecordRef"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "startDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "transaction": {
                    "x-displayName": "Transaction",
                    "$ref": "#/definitions/RecordRef"
                },
                "status": {
                    "x-displayName": "Status",
                    "$ref": "#/definitions/TaskStatus"
                }
            }
        },
        "TaskStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "TaskContactList": {
            "properties": {
                "contact": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaskContact"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "TaskContact": {
            "properties": {
                "contact": {
                    "x-displayName": "Contact",
                    "$ref": "#/definitions/RecordRef"
                },
                "company": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "TaskPriority": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "TaskTimeItemList": {
            "properties": {
                "timeItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TimeItem"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "TaskReminderMinutes": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "TaskReminderType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "TimeItemTimeType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "LandedCostDataList": {
            "x-has-customfields": false,
            "x-vendor-objectname": "LandedCostDataList",
            "properties": {
                "landedCostData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LandedCostData"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "VendorBill": {
            "properties": {
                "tranId": {
                    "type": "string"
                },
                "availableVendorCredit": {
                    "type": "number"
                },
                "landedCostsList": {
                    "$ref": "#/definitions/PurchLandedCostList"
                },
                "purchaseOrderList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "dueDate": {
                    "x-displayName": "Due Date",
                    "format": "date-time",
                    "type": "string"
                },
                "taxTotal": {
                    "type": "number"
                },
                "vatRegNum": {
                    "type": "string"
                },
                "discountAmount": {
                    "type": "number"
                },
                "memo": {
                    "type": "string"
                },
                "paymentHold": {
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string"
                },
                "currencyName": {
                    "type": "string"
                },
                "exchangeRate": {
                    "type": "number"
                },
                "terms": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "creditLimit": {
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "expenseList": {
                    "$ref": "#/definitions/VendorBillExpenseList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "approvalStatus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "landedCostPerLine": {
                    "type": "boolean"
                },
                "landedCostMethod": {
                    "$ref": "#/definitions/LandedCostMethod"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "nextApprover": {
                    "$ref": "#/definitions/RecordRef"
                },
                "userTotal": {
                    "type": "number"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "transactionNumber": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "discountDate": {
                    "type": "string",
                    "format": "date"
                },
                "postingPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "itemList": {
                    "$ref": "#/definitions/VendorBillItemList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "tax2Total": {
                    "type": "number"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "status": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "internalId"
            ],
            "required": [
                "expenseList",
                "location",
                "entity",
                "subsidiary"
            ]
        },
        "InventoryAssignmentList": {
            "properties": {
                "inventoryAssignment": {
                    "items": {
                        "$ref": "#/definitions/InventoryAssignment"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "LandedCostSummary": {
            "properties": {
                "amount": {
                    "x-displayName": "Amount",
                    "format": "double",
                    "type": "number"
                },
                "source": {
                    "x-displayName": "Source",
                    "$ref": "#/definitions/LandedCostSource"
                },
                "category": {
                    "x-displayName": "Category",
                    "$ref": "#/definitions/RecordRef"
                },
                "transaction": {
                    "x-displayName": "Transaction",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "VendorBillExpenseList": {
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorBillExpenseList",
            "properties": {
                "expense": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VendorBillExpense"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "VendorBillItemList": {
            "properties": {
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VendorBillItem"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "VendorBillItem": {
            "x-has-customfields": false,
            "x-vendor-objectname": "VendorBillItem",
            "properties": {
                "line": {
                    "format": "int32",
                    "type": "number"
                },
                "orderLine": {
                    "format": "int32",
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "tax1Amt": {
                    "format": "double",
                    "type": "number"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amortizationResidual": {
                    "type": "string"
                },
                "amortizationEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "rate": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "amortizStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "orderDoc": {
                    "format": "int32",
                    "type": "number"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate2": {
                    "format": "double",
                    "type": "number"
                },
                "taxRate1": {
                    "format": "double",
                    "type": "number"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "expirationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "landedCost": {
                    "$ref": "#/definitions/LandedCost"
                },
                "quantity": {
                    "format": "double",
                    "type": "number"
                },
                "serialNumbers": {
                    "type": "string"
                },
                "binNumbers": {
                    "type": "string"
                },
                "inventoryDetail": {
                    "$ref": "#/definitions/InventoryDetail"
                },
                "amortizationSched": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billreceiptsList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "landedCostCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorName": {
                    "type": "string"
                },
                "billVarianceStatus": {
                    "$ref": "#/definitions/TransactionBillVarianceStatus"
                },
                "isBillable": {
                    "type": "boolean"
                },
                "grossAmt": {
                    "format": "double",
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "InventoryAssignment": {
            "properties": {
                "binNumber": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Bin"
                },
                "expirationDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Exiration Date"
                },
                "internalId": {
                    "type": "string",
                    "x-displayName": "Internal ID"
                },
                "issueInventoryNumber": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Serial/Lot Number"
                },
                "quantity": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Quantity"
                },
                "quantityAvailable": {
                    "type": "number",
                    "format": "double",
                    "x-displayName": "Available"
                },
                "receiptInventoryNumber": {
                    "type": "string"
                },
                "toBinNumber": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "LandedCost": {
            "properties": {
                "landedCostDataList": {
                    "$ref": "#/definitions/LandedCostDataList"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                }
            }
        },
        "InventoryDetail": {
            "properties": {
                "customForm": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Custom Form"
                },
                "inventoryAssignmentList": {
                    "$ref": "#/definitions/InventoryAssignmentList"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                }
            }
        },
        "TransactionBillVarianceStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "PurchLandedCostList": {
            "properties": {
                "landedCost": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LandedCostSummary"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "Country": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "LandedCostMethod": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_quantity",
                        "_value",
                        "_weight",
                        "_line"
                    ]
                }
            }
        },
        "VendorBillExpense": {
            "properties": {
                "amount": {
                    "type": "number"
                },
                "line": {
                    "type": "number"
                },
                "orderLine": {
                    "type": "number"
                },
                "memo": {
                    "type": "string"
                },
                "tax1Amt": {
                    "type": "number"
                },
                "amortizationSched": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amortizationResidual": {
                    "type": "string"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isBillable": {
                    "type": "boolean"
                },
                "amortizationEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "grossAmt": {
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amortizStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "orderDoc": {
                    "type": "number"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate2": {
                    "type": "number"
                },
                "taxRate1": {
                    "type": "number"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "LandedCostData": {
            "properties": {
                "costCategory": {
                    "x-displayName": "Cost Category",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "amount": {
                    "x-displayName": "Amount",
                    "x-samplevalue": 100.01,
                    "x-sub-format": "Money",
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "LandedCostSource": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_manual",
                        "_otherTransaction",
                        "_otherTransactionExcludeTax",
                        "_thisTransaction"
                    ]
                }
            }
        },
        "FileSiteCategoryList": {
            "x-has-customfields": false,
            "x-vendor-objectname": "FileSiteCategoryList",
            "properties": {
                "siteCategory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileSiteCategory"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "TextFileEncoding": {
            "x-has-customfields": false,
            "x-vendor-objectname": "TextFileEncoding",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "MediaType": {
            "x-has-customfields": false,
            "x-vendor-objectname": "MediaType",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "FileEncoding": {
            "x-has-customfields": false,
            "x-vendor-objectname": "FileEncoding",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "FileSiteCategory": {
            "x-has-customfields": false,
            "x-vendor-objectname": "FileSiteCategory",
            "properties": {
                "isDefault": {
                    "type": "boolean"
                },
                "website": {
                    "$ref": "#/definitions/RecordRef"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "categoryDescription": {
                    "type": "string"
                }
            }
        },
        "FolderFolderType": {
            "x-has-customfields": false,
            "x-vendor-objectname": "FolderFolderType",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "Folder": {
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": false,
            "x-vendor-objectname": "Folder",
            "properties": {
                "bundleable": {
                    "type": "boolean"
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "hideInBundle": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "isOnline": {
                    "type": "boolean"
                },
                "isPrivate": {
                    "type": "boolean"
                },
                "folderType": {
                    "$ref": "#/definitions/FolderFolderType"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "group": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "FolderCreate": {
            "x-primary-key": [
                "internalId"
            ],
            "required": [
                "name"
            ],
            "x-has-customfields": false,
            "x-vendor-objectname": "Folder",
            "properties": {
                "bundleable": {
                    "type": "boolean"
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "hideInBundle": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "isOnline": {
                    "type": "boolean"
                },
                "isPrivate": {
                    "type": "boolean"
                },
                "folderType": {
                    "$ref": "#/definitions/FolderFolderType"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "group": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "FileAttachFrom": {
            "x-has-customfields": false,
            "x-vendor-objectname": "FileAttachFrom",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "File": {
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": false,
            "x-vendor-objectname": "File",
            "properties": {
                "bundleable": {
                    "type": "boolean"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "siteCategoryList": {
                    "$ref": "#/definitions/FileSiteCategoryList"
                },
                "textFileEncoding": {
                    "$ref": "#/definitions/TextFileEncoding"
                },
                "caption": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "featuredDescription": {
                    "type": "string"
                },
                "isOnline": {
                    "type": "boolean"
                },
                "isPrivate": {
                    "type": "boolean"
                },
                "urlComponent": {
                    "type": "string"
                },
                "mediaFile": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "department": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/RecordRef"
                },
                "mediaTypeName": {
                    "type": "string"
                },
                "storeDisplayThumbnail": {
                    "$ref": "#/definitions/RecordRef"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "hideInBundle": {
                    "type": "boolean"
                },
                "externalId": {
                    "type": "string"
                },
                "siteDescription": {
                    "type": "string"
                },
                "attachFrom": {
                    "$ref": "#/definitions/FileAttachFrom"
                },
                "encoding": {
                    "$ref": "#/definitions/FileEncoding"
                },
                "url": {
                    "type": "string"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "folder": {
                    "$ref": "#/definitions/RecordRef"
                },
                "altTagCaption": {
                    "type": "string"
                },
                "fileSize": {
                    "format": "double",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "_class": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "fileType": {
                    "$ref": "#/definitions/MediaType"
                }
            }
        },
        "GlobalSubscriptionStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "Bill": {
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "x-vendor-objectname": "Bill",
            "properties": {
                "billingAddress": {
                    "$ref": "#/definitions/AddressBills"
                },
                "billAddressList": {
                    "x-reference-objectname": "Address",
                    "description": "In the Vendor Select field, choose a vendor. Verify the billing address displayed in the Vendor field.",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "_class": {
                    "description": "References a value from a user defined list at Setup > Company > Classifications > Classes. This field is required when the Make Classes Mandatory preference is enabled at Setup > Accounting > Accounting Preferences. This is only available for line items on a Vendor Bill when the Allow Per-Line Classes feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item.",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "location": {
                    "x-reference-objectname": "Location",
                    "description": "References a value in a user-defined list at Setup > Company > Classifications > Locations. This is only available for line items on a Vendor Bill when the Allow Per-Line Locations feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. Note that if the Multi-Inventory feature is enabled, the Allow Per-Line Locations feature is automatically enabled. This field is required when Make Locations Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "availableVendorCredit": {
                    "x-samplevalue": 1.01,
                    "format": "double",
                    "x-displayName": "Available Vendor Credit",
                    "type": "number"
                },
                "discountAmount": {
                    "description": "A read-only field that returns the amount discounted on this bill.",
                    "x-displayName": "Discount Amount",
                    "x-samplevalue": 25.01,
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "creditLimit": {
                    "description": "This is a read-only field that returns the credit limit set for the vendor.",
                    "x-displayName": "Credit Limit",
                    "x-samplevalue": 100.11,
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "vatRegNum": {
                    "x-samplevalue": "samplevatRegNum",
                    "type": "string"
                },
                "memo": {
                    "x-samplevalue": "109-WE-4973",
                    "x-displayName": "Memo",
                    "type": "string"
                },
                "tranId": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "3011",
                    "description": "Sets the number to identify this transaction, such as the vendor's invoice number.",
                    "x-displayName": "Reference No.",
                    "type": "string"
                },
                "transactionNumber": {
                    "description": "By default, transaction lists display only the Number field in searches and reporting. If you plan to include the new Transaction Number field, be aware that this value will be the different from the value in the Number field for the twelve transaction types available through Version 2014 Release 1. For the transaction types available through previous releases, these two values will be the same. Note: The Transaction Number field is visible by default on standard NetSuite forms and invisible by default on customized forms. You can, however, customize a form to display this field.",
                    "x-samplevalue": "TransNo1",
                    "x-displayName": "Transaction Number",
                    "type": "string"
                },
                "landedCostsList": {
                    "$ref": "#/definitions/PurchLandedCostListRes"
                },
                "expenseList": {
                    "$ref": "#/definitions/VendorBillExpenseList"
                },
                "itemList": {
                    "$ref": "#/definitions/VendorBillItemList"
                },
                "paymentHold": {
                    "description": "Check the Payment Hold box to apply a payment hold on a disputed bill. When the Payment Hold box is checked, the following occurs: * The Make Payment button is not be available on the vendor bill and a vendor payment cannot be processed for that bill. * Vendor bills that have a Payment Hold enabled do not show up on the Bill Payments page. * The Electronic Payment SuiteApp does not process payments that have a payment hold.",
                    "x-samplevalue": false,
                    "x-displayName": "Payment Hold",
                    "type": "boolean"
                },
                "internalId": {
                    "x-samplevalue": "307",
                    "x-readOnly": true,
                    "type": "string"
                },
                "currencyName": {
                    "description": "A read only field that defaults to the currency associated with the customer referenced by the entity field.",
                    "x-displayName": "Currency",
                    "x-samplevalue": "USA",
                    "x-readOnly": true,
                    "type": "string"
                },
                "exchangeRate": {
                    "x-searchable": true,
                    "x-samplevalue": 1.01,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "description": "Required on Add. Defaults to the rate associated with the Vendor set in the entity field.",
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number"
                },
                "tax2Total": {
                    "x-samplevalue": 100.01,
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here.",
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number"
                },
                "taxTotal": {
                    "x-samplevalue": 100.01,
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here.",
                    "x-displayName": "GST/HST",
                    "format": "double",
                    "type": "number"
                },
                "terms": {
                    "x-reference-objectname": "Term",
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > New > Terms.",
                    "x-displayName": "Terms",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "currency": {
                    "x-reference-objectname": "Currency",
                    "description": "The transaction currency for this bill is shown here. If this bill was created from a purchase order, the currency on the originating purchase order is shown, and you cannot change the currency on the bill.",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldListRes"
                },
                "approvalStatus": {
                    "description": "The approval status of this bill shows in this field. Accept the default status or choose one of the following: * Approved &#x2013; No further review or processing is required before a payment is processed. * Pending Approval &#x2013; Someone with permission must approve the bill before a payment can be processed for it.",
                    "x-displayName": "Approval Status",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "landedCostPerLine": {
                    "description": "Check this box to enter a landed cost per line item.",
                    "x-samplevalue": true,
                    "x-displayName": "Landed Cost per Line",
                    "type": "boolean"
                },
                "landedCostMethod": {
                    "description": "Available values are: _quantity _value _weight",
                    "x-displayName": "Cost Allocation Method",
                    "$ref": "#/definitions/LandedCostMethod"
                },
                "lastModifiedDate": {
                    "description": "This is a read only field. When updating a record, this field defaults to the current system date and time.",
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">=",
                        "<=",
                        "<",
                        ">"
                    ],
                    "x-samplevalue": "2017-10-12T08:32:43Z",
                    "format": "date-time",
                    "type": "string"
                },
                "userTotal": {
                    "description": "A read-only field that returns the total amount of the transaction. check this -- in the UI, this can be entered but then is overwritten on submit.",
                    "x-readOnly": true,
                    "x-samplevalue": 111.09,
                    "x-displayName": "Amount",
                    "format": "double",
                    "type": "number"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "purchaseOrderList": {
                    "$ref": "#/definitions/RecordRefListRes"
                },
                "department": {
                    "x-reference-objectname": "Department",
                    "description": "References a value in a user-defined list at Setup > Company > Classifications > Departments. This is only available for line items on a Vendor Bill when the Allow Per-Line Departments feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. This field is required when Make Departments Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "nextApprover": {
                    "description": "This field displays the next person set to approve this bill via approval routing.",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "externalId": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "tran306",
                    "type": "string"
                },
                "subsidiary": {
                    "x-reference-objectname": "Subsidiary",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "createdDate": {
                    "description": "When adding a record, this field defaults to the current system date and time. This field cannot be overwritten. The default value is set regardless of any use default settings.",
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-10-12T08:32:43Z"
                },
                "discountDate": {
                    "description": "A read-only field that returns the last day you can pay this bill in order to receive a discount.",
                    "x-displayName": "Discount Date",
                    "x-readOnly": true,
                    "format": "date-time",
                    "x-samplevalue": "2017-10-12T08:32:43Z",
                    "type": "string"
                },
                "dueDate": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "description": "Sets the due date for the bill. Defaults to the current date.",
                    "x-displayName": "Due Date",
                    "format": "date-time",
                    "x-samplevalue": "2017-10-12T08:32:43Z",
                    "type": "string"
                },
                "postingPeriod": {
                    "x-reference-objectname": "Posting Period",
                    "description": "Required on Add when the Accounting Periods feature is enabled.",
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "tranDate": {
                    "description": "Required on Add. Defaults to the current date.",
                    "x-displayName": "Date",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "format": "date-time",
                    "x-samplevalue": "2017-10-12T08:32:43Z",
                    "type": "string"
                },
                "account": {
                    "description": "Sets the account for the bill.",
                    "x-displayName": "Account",
                    "x-reference-objectname": "Account",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "entity": {
                    "description": "Required on Add.",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "status": {
                    "description": "This is a read-only field that returns the status of the bill.",
                    "x-readOnly": true,
                    "x-displayName": "Status",
                    "x-samplevalue": "Open",
                    "enum": [
                        "Open",
                        "Paid in Full"
                    ],
                    "type": "string"
                }
            }
        },
        "BillPOST": {
            "required": [
                "location",
                "entity",
                "expenseList",
                "subsidiary"
            ],
            "x-searchable-joins": [
                "and"
            ],
            "x-searchable": true,
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Bill",
            "properties": {
                "billingAddress": {
                    "$ref": "#/definitions/AddressBills"
                },
                "billAddressList": {
                    "x-reference-objectname": "Address",
                    "description": "In the Vendor Select field, choose a vendor. Verify the billing address displayed in the Vendor field.",
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "description": "References a value from a user defined list at Setup > Company > Classifications > Classes. This field is required when the Make Classes Mandatory preference is enabled at Setup > Accounting > Accounting Preferences. This is only available for line items on a Vendor Bill when the Allow Per-Line Classes feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item.",
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "x-reference-objectname": "Location",
                    "description": "References a value in a user-defined list at Setup > Company > Classifications > Locations. This is only available for line items on a Vendor Bill when the Allow Per-Line Locations feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. Note that if the Multi-Inventory feature is enabled, the Allow Per-Line Locations feature is automatically enabled. This field is required when Make Locations Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "$ref": "#/definitions/RecordRef"
                },
                "vatRegNum": {
                    "x-samplevalue": "samplevatRegNum",
                    "type": "string"
                },
                "memo": {
                    "x-samplevalue": "109-WE-4973",
                    "x-displayName": "Memo",
                    "type": "string"
                },
                "tranId": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "3011",
                    "description": "Sets the number to identify this transaction, such as the vendor's invoice number.",
                    "x-displayName": "Reference No.",
                    "type": "string"
                },
                "landedCostsList": {
                    "$ref": "#/definitions/PurchLandedCostList"
                },
                "expenseList": {
                    "$ref": "#/definitions/VendorBillExpenseListReq"
                },
                "itemList": {
                    "$ref": "#/definitions/VendorBillItemListReq"
                },
                "internalId": {
                    "x-samplevalue": "307",
                    "x-readOnly": true,
                    "type": "string"
                },
                "paymentHold": {
                    "x-samplevalue": true,
                    "description": "Check the Payment Hold box to apply a payment hold on a disputed bill. When the Payment Hold box is checked, the following occurs: * The Make Payment button is not be available on the vendor bill and a vendor payment cannot be processed for that bill. * Vendor bills that have a Payment Hold enabled do not show up on the Bill Payments page. * The Electronic Payment SuiteApp does not process payments that have a payment hold.",
                    "x-displayName": "Payment Hold",
                    "type": "boolean"
                },
                "exchangeRate": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "x-samplevalue": 0.98,
                    "description": "Required on Add. Defaults to the rate associated with the Vendor set in the entity field.",
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number"
                },
                "tax2Total": {
                    "x-displayName": "PST",
                    "x-samplevalue": 100.01,
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here.",
                    "format": "double",
                    "type": "number"
                },
                "taxTotal": {
                    "x-samplevalue": 110.01,
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here.",
                    "x-displayName": "GST/HST",
                    "format": "double",
                    "type": "number"
                },
                "terms": {
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > New > Terms.",
                    "x-displayName": "Terms",
                    "x-reference-objectname": "Term",
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "description": "The transaction currency for this bill is shown here. If this bill was created from a purchase order, the currency on the originating purchase order is shown, and you cannot change the currency on the bill.",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "approvalStatus": {
                    "x-displayName": "Approval Status",
                    "description": "The approval status of this bill shows in this field. Accept the default status or choose one of the following: * Approved &#x2013; No further review or processing is required before a payment is processed. * Pending Approval &#x2013; Someone with permission must approve the bill before a payment can be processed for it.",
                    "$ref": "#/definitions/RecordRef"
                },
                "landedCostPerLine": {
                    "x-samplevalue": true,
                    "description": "Check this box to enter a landed cost per line item.",
                    "x-displayName": "Landed Cost per Line",
                    "type": "boolean"
                },
                "landedCostMethod": {
                    "description": "Available values are: _quantity _value _weight",
                    "x-displayName": "Cost Allocation Method",
                    "$ref": "#/definitions/LandedCostMethod"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "department": {
                    "x-reference-objectname": "Department",
                    "description": "References a value in a user-defined list at Setup > Company > Classifications > Departments. This is only available for line items on a Vendor Bill when the Allow Per-Line Departments feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. This field is required when Make Departments Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "$ref": "#/definitions/RecordRef"
                },
                "nextApprover": {
                    "description": "This field displays the next person set to approve this bill via approval routing.",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "tran306",
                    "type": "string"
                },
                "subsidiary": {
                    "x-reference-objectname": "Subsidiary",
                    "$ref": "#/definitions/RecordRef"
                },
                "dueDate": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "x-samplevalue": "2017-10-12T08:32:43Z",
                    "description": "Sets the due date for the bill. Defaults to the current date.",
                    "x-displayName": "Due Date",
                    "format": "date-time",
                    "type": "string"
                },
                "postingPeriod": {
                    "description": "Required on Add when the Accounting Periods feature is enabled.",
                    "x-reference-objectname": "Posting Period",
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "x-samplevalue": "2017-10-12T08:32:43Z",
                    "description": "Required on Add. Defaults to the current date.",
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "account": {
                    "x-displayName": "Account",
                    "description": "Sets the account for the bill.",
                    "x-reference-objectname": "Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "description": "Required on Add.",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "BillPATCH": {
            "x-searchable-joins": [
                "and"
            ],
            "x-searchable": true,
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Bill",
            "properties": {
                "billingAddress": {
                    "$ref": "#/definitions/AddressBills"
                },
                "billAddressList": {
                    "x-reference-objectname": "Address",
                    "description": "In the Vendor Select field, choose a vendor. Verify the billing address displayed in the Vendor field.",
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "description": "References a value from a user defined list at Setup > Company > Classifications > Classes. This field is required when the Make Classes Mandatory preference is enabled at Setup > Accounting > Accounting Preferences. This is only available for line items on a Vendor Bill when the Allow Per-Line Classes feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item.",
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "x-reference-objectname": "Location",
                    "description": "References a value in a user-defined list at Setup > Company > Classifications > Locations. This is only available for line items on a Vendor Bill when the Allow Per-Line Locations feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. Note that if the Multi-Inventory feature is enabled, the Allow Per-Line Locations feature is automatically enabled. This field is required when Make Locations Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "$ref": "#/definitions/RecordRef"
                },
                "vatRegNum": {
                    "x-samplevalue": "samplevatRegNum",
                    "type": "string"
                },
                "modifiedDate": {
                    "x-samplevalue": "109-WE-4973",
                    "x-displayName": "Memo",
                    "type": "string",
                    "x-searchable-names": [
                        "lastModified"
                    ]
                },
                "tranId": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-searchable-names": [
                        "tranIdentier"
                    ],
                    "x-samplevalue": "3011",
                    "description": "Sets the number to identify this transaction, such as the vendor's invoice number.",
                    "x-displayName": "Reference No.",
                    "type": "string"
                },
                "landedCostsList": {
                    "$ref": "#/definitions/PurchLandedCostList"
                },
                "expenseList": {
                    "$ref": "#/definitions/VendorBillExpenseListReq"
                },
                "itemList": {
                    "$ref": "#/definitions/VendorBillItemListReq"
                },
                "internalId": {
                    "x-samplevalue": "307",
                    "x-readOnly": true,
                    "type": "string"
                },
                "paymentHold": {
                    "x-samplevalue": true,
                    "description": "Check the Payment Hold box to apply a payment hold on a disputed bill. When the Payment Hold box is checked, the following occurs: * The Make Payment button is not be available on the vendor bill and a vendor payment cannot be processed for that bill. * Vendor bills that have a Payment Hold enabled do not show up on the Bill Payments page. * The Electronic Payment SuiteApp does not process payments that have a payment hold.",
                    "x-displayName": "Payment Hold",
                    "type": "boolean"
                },
                "exchangeRate": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "x-samplevalue": 0.98,
                    "description": "Required on Add. Defaults to the rate associated with the Vendor set in the entity field.",
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number"
                },
                "tax2Total": {
                    "x-displayName": "PST",
                    "x-samplevalue": 100.01,
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here.",
                    "format": "double",
                    "type": "number"
                },
                "taxTotal": {
                    "x-samplevalue": 110.01,
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here.",
                    "x-displayName": "GST/HST",
                    "format": "double",
                    "type": "number"
                },
                "terms": {
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > New > Terms.",
                    "x-displayName": "Terms",
                    "x-reference-objectname": "Term",
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "description": "The transaction currency for this bill is shown here. If this bill was created from a purchase order, the currency on the originating purchase order is shown, and you cannot change the currency on the bill.",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "approvalStatus": {
                    "x-displayName": "Approval Status",
                    "description": "The approval status of this bill shows in this field. Accept the default status or choose one of the following: * Approved &#x2013; No further review or processing is required before a payment is processed. * Pending Approval &#x2013; Someone with permission must approve the bill before a payment can be processed for it.",
                    "$ref": "#/definitions/RecordRef"
                },
                "landedCostPerLine": {
                    "x-samplevalue": true,
                    "description": "Check this box to enter a landed cost per line item.",
                    "x-displayName": "Landed Cost per Line",
                    "type": "boolean"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "department": {
                    "x-reference-objectname": "Department",
                    "description": "References a value in a user-defined list at Setup > Company > Classifications > Departments. This is only available for line items on a Vendor Bill when the Allow Per-Line Departments feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. This field is required when Make Departments Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "$ref": "#/definitions/RecordRef"
                },
                "nextApprover": {
                    "description": "This field displays the next person set to approve this bill via approval routing.",
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "tran306",
                    "type": "string"
                },
                "subsidiary": {
                    "x-reference-objectname": "Subsidiary",
                    "$ref": "#/definitions/RecordRef"
                },
                "dueDate": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "x-samplevalue": "2017-10-12T08:32:43Z",
                    "description": "Sets the due date for the bill. Defaults to the current date.",
                    "x-displayName": "Due Date",
                    "format": "date-time",
                    "type": "string"
                },
                "postingPeriod": {
                    "description": "Required on Add when the Accounting Periods feature is enabled.",
                    "x-displayName": "Posting Period",
                    "x-reference-objectname": "Posting Period",
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "x-samplevalue": "2017-10-12T08:32:43Z",
                    "description": "Required on Add. Defaults to the current date.",
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "account": {
                    "x-displayName": "Account",
                    "description": "Sets the account for the bill.",
                    "x-reference-objectname": "Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "description": "Required on Add.",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "JobMilestones": {
            "properties": {
                "milestoneEstComplete": {
                    "format": "date-time",
                    "type": "string"
                },
                "milestoneName": {
                    "type": "string"
                },
                "milestoneCompleted": {
                    "type": "boolean"
                },
                "milestoneComments": {
                    "type": "string"
                },
                "milestoneOrder": {
                    "type": "string"
                }
            }
        },
        "JobAddressbook": {
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "defaultBilling": {
                    "type": "boolean"
                },
                "isResidential": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "defaultShipping": {
                    "type": "boolean"
                },
                "addressbookAddress": {
                    "$ref": "#/definitions/Address"
                }
            }
        },
        "JobAddressbookList": {
            "properties": {
                "addressbook": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JobAddressbook"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "JobPercentCompleteOverride": {
            "properties": {
                "period": {
                    "$ref": "#/definitions/RecordRef"
                },
                "comments": {
                    "type": "string"
                },
                "percent": {
                    "type": "number"
                }
            }
        },
        "RecordRefResponse": {
            "x-vendor-objectname": "RecordRef",
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "internalId": {
                    "type": "string",
                    "x-samplevalue": "1"
                },
                "name": {
                    "type": "string",
                    "x-samplevalue": "Honeycomb Ltc"
                },
                "externalId": {
                    "x-samplevalue": "2",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/RecordType"
                }
            }
        },
        "RecordRef": {
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "externalId": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/RecordType"
                }
            }
        },
        "String": {
            "properties": {
                "bytes": {
                    "$ref": "#/definitions/byte"
                },
                "empty": {
                    "type": "boolean"
                }
            }
        },
        "CustomFieldList": {
            "properties": {
                "customField": {
                    "items": {
                        "$ref": "#/definitions/CustomFieldRef"
                    },
                    "type": "array"
                }
            }
        },
        "JobPlStatementList": {
            "properties": {
                "jobPlStatement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JobPlStatement"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "RecordType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "JobResources": {
            "properties": {
                "role": {
                    "$ref": "#/definitions/RecordRef"
                },
                "jobResource": {
                    "$ref": "#/definitions/RecordRef"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "Project": {
            "properties": {
                "startDateBaseline": {
                    "format": "date-time",
                    "type": "string"
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef"
                },
                "fxRate": {
                    "type": "number"
                },
                "projectedEndDateBaseline": {
                    "format": "date-time",
                    "type": "string"
                },
                "endDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "companyName": {
                    "type": "string"
                },
                "language": {
                    "$ref": "#/definitions/RecordRef"
                },
                "projectedEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "estimatedTimeOverride": {
                    "$ref": "#/definitions/Duration"
                },
                "creditCardsList": {
                    "$ref": "#/definitions/JobCreditCardsList"
                },
                "revRecForecastRule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "percentCompleteOverrideList": {
                    "$ref": "#/definitions/JobPercentCompleteOverrideList"
                },
                "estimatedGrossProfit": {
                    "type": "number"
                },
                "materializeTime": {
                    "type": "boolean"
                },
                "allowTime": {
                    "type": "boolean"
                },
                "fax": {
                    "type": "string"
                },
                "openingBalance": {
                    "type": "number"
                },
                "openingBalanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "estimatedTime": {
                    "$ref": "#/definitions/Duration"
                },
                "estimatedCost": {
                    "type": "number"
                },
                "estimatedLaborRevenue": {
                    "type": "number"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "projectExpenseType": {
                    "$ref": "#/definitions/RecordRef"
                },
                "estimatedLaborCostBaseline": {
                    "type": "number"
                },
                "phone": {
                    "type": "string"
                },
                "calculatedEndDateBaseline": {
                    "format": "date-time",
                    "type": "string"
                },
                "jobItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "globalSubscriptionStatus": {
                    "$ref": "#/definitions/GlobalSubscriptionStatus"
                },
                "altPhone": {
                    "type": "string"
                },
                "lastBaselineDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "isProductiveTime": {
                    "type": "boolean"
                },
                "allowExpenses": {
                    "type": "boolean"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "startDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "limitTimeToAssignees": {
                    "type": "boolean"
                },
                "phoneticName": {
                    "type": "string"
                },
                "jobBillingType": {
                    "$ref": "#/definitions/JobBillingType"
                },
                "estimatedLaborCost": {
                    "type": "number"
                },
                "timeRemaining": {
                    "$ref": "#/definitions/Duration"
                },
                "isUtilizedTime": {
                    "type": "boolean"
                },
                "actualTime": {
                    "$ref": "#/definitions/Duration"
                },
                "billPay": {
                    "type": "boolean"
                },
                "dateCreated": {
                    "format": "date-time",
                    "type": "string"
                },
                "percentTimeComplete": {
                    "type": "number"
                },
                "openingBalanceAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "altName": {
                    "type": "string"
                },
                "emailPreference": {
                    "$ref": "#/definitions/EmailPreference"
                },
                "allocatePayrollExpenses": {
                    "type": "boolean"
                },
                "jobResourcesList": {
                    "$ref": "#/definitions/JobResourcesList"
                },
                "jobType": {
                    "$ref": "#/definitions/RecordRef"
                },
                "allowAllResourcesForTasks": {
                    "type": "boolean"
                },
                "estimatedGrossProfitPercent": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "includeCrmTasksInTotals": {
                    "type": "boolean"
                },
                "calculatedEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "addressbookList": {
                    "$ref": "#/definitions/JobAddressbookList"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "billingSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "estimatedRevenue": {
                    "type": "number"
                },
                "externalId": {
                    "type": "string"
                },
                "isExemptTime": {
                    "type": "boolean"
                },
                "entityId": {
                    "type": "string"
                },
                "jobPrice": {
                    "type": "number"
                },
                "percentComplete": {
                    "type": "number"
                },
                "accountNumber": {
                    "type": "string"
                },
                "usePercentCompleteOverride": {
                    "type": "boolean"
                },
                "applyProjectExpenseTypeToAll": {
                    "type": "boolean"
                },
                "entityStatus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "estimateRevRecTemplate": {
                    "$ref": "#/definitions/RecordRef"
                },
                "plStatementList": {
                    "$ref": "#/definitions/JobPlStatementList"
                },
                "milestonesList": {
                    "$ref": "#/definitions/JobMilestonesList"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "workplace": {
                    "$ref": "#/definitions/RecordRef"
                },
                "defaultAddress": {
                    "type": "string"
                }
            },
            "x-primary-key": [
                "internalId"
            ],
            "required": [
                "companyName",
                "subsidiary"
            ]
        },
        "JobPercentCompleteOverrideList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "jobPercentCompleteOverride": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JobPercentCompleteOverride"
                    }
                }
            }
        },
        "byte": {},
        "JobMilestonesList": {
            "properties": {
                "milestones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JobMilestones"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "NullField": {
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "JobCreditCardsList": {
            "properties": {
                "creditCards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JobCreditCards"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmailPreference": {
            "properties": {
                "value": {
                    "enum": [
                        "_default",
                        "_hTML",
                        "_pDF"
                    ],
                    "x-samplevalue": "_default",
                    "type": "string"
                }
            }
        },
        "Duration": {
            "properties": {
                "timeSpan": {
                    "format": "double",
                    "type": "number"
                },
                "unit": {
                    "$ref": "#/definitions/DurationUnit"
                }
            }
        },
        "JobBillingType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "DurationUnit": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "JobResourcesList": {
            "properties": {
                "jobResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JobResources"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CustomFieldRef": {
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "scriptId": {
                    "type": "string"
                }
            }
        },
        "JobPlStatement": {
            "properties": {
                "costCategory": {
                    "type": "string"
                },
                "margin": {
                    "type": "number"
                },
                "revenue": {
                    "type": "number"
                },
                "cost": {
                    "type": "number"
                },
                "profit": {
                    "type": "number"
                }
            }
        },
        "JobCreditCards": {
            "properties": {
                "ccExpireDate": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "ccNumber": {
                    "type": "string"
                },
                "debitCardIssueNo": {
                    "type": "string"
                },
                "ccDefault": {
                    "type": "boolean"
                },
                "paymentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "validFrom": {
                    "x-displayName": "Valid From / Start Date (MM/YYYY)",
                    "format": "date-time",
                    "type": "string"
                },
                "ccName": {
                    "type": "string"
                },
                "ccMemo": {
                    "type": "string"
                }
            }
        },
        "RecordRefList": {
            "properties": {
                "recordRef": {
                    "items": {
                        "$ref": "#/definitions/RecordRef"
                    },
                    "type": "array"
                }
            }
        },
        "CustomField": {
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "scriptId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/RecordType"
                },
                "fieldType": {
                    "type": "string"
                }
            }
        },
        "Message": {
            "properties": {
                "cc": {
                    "type": "string"
                },
                "dateTime": {
                    "type": "string"
                },
                "incoming": {
                    "type": "boolean"
                },
                "bcc": {
                    "type": "string"
                },
                "activity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "author": {
                    "$ref": "#/definitions/RecordRef"
                },
                "subject": {
                    "type": "string"
                },
                "emailed": {
                    "type": "boolean"
                },
                "externalId": {
                    "type": "string"
                },
                "compressAttachments": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "recordName": {
                    "type": "string"
                },
                "recipient": {
                    "$ref": "#/definitions/RecordRef"
                },
                "messageDate": {
                    "type": "string"
                },
                "transaction": {
                    "$ref": "#/definitions/RecordRef"
                },
                "recordTypeName": {
                    "type": "string"
                }
            }
        },
        "Unit": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "TimeType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "TimeItem": {
            "properties": {
                "hours": {
                    "$ref": "#/definitions/Duration"
                },
                "timeType": {
                    "$ref": "#/definitions/TimeType"
                },
                "memo": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/RecordRef"
                },
                "payrollItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isBillable": {
                    "type": "boolean"
                },
                "temporaryStateJurisdiction": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isProductive": {
                    "type": "boolean"
                },
                "rate": {
                    "type": "number"
                },
                "temporaryLocalJurisdiction": {
                    "$ref": "#/definitions/RecordRef"
                },
                "price": {
                    "$ref": "#/definitions/RecordRef"
                },
                "hoursTotal": {
                    "$ref": "#/definitions/Duration"
                },
                "isUtilized": {
                    "type": "boolean"
                },
                "isExempt": {
                    "type": "boolean"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "id": {
                    "type": "number"
                },
                "caseTaskEvent": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                },
                "overrideRate": {
                    "type": "boolean"
                }
            }
        },
        "TimeItemList": {
            "properties": {
                "timeItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TimeItem"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmailEmployeesList": {
            "properties": {
                "emailEmployees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecordRef"
                    }
                }
            }
        },
        "SupportCaseEscalateTo": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "escalatee": {
                    "$ref": "#/definitions/RecordRef"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "SupportCaseEscalateToList": {
            "properties": {
                "escalateTo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SupportCaseEscalateTo"
                    }
                }
            }
        },
        "SupportCaseSolutions": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "solution": {
                    "$ref": "#/definitions/RecordRef"
                },
                "dateApplied": {
                    "type": "string",
                    "format": "date"
                }
            }
        },
        "SupportCaseSolutionsList": {
            "properties": {
                "solutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SupportCaseSolutions"
                    }
                }
            }
        },
        "Case": {
            "required": [
                "company",
                "title",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "endDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "inboundEmail": {
                    "type": "string"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "origin": {
                    "$ref": "#/definitions/RecordRef"
                },
                "title": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "lastMessageDate": {
                    "type": "string"
                },
                "solutionsList": {
                    "$ref": "#/definitions/SupportCaseSolutionsList"
                },
                "caseNumber": {
                    "type": "string"
                },
                "contact": {
                    "$ref": "#/definitions/RecordRef"
                },
                "insertSolution": {
                    "$ref": "#/definitions/RecordRef"
                },
                "company": {
                    "$ref": "#/definitions/RecordRef"
                },
                "emailForm": {
                    "type": "boolean"
                },
                "escalateToList": {
                    "$ref": "#/definitions/SupportCaseEscalateToList"
                },
                "email": {
                    "type": "string"
                },
                "helpDesk": {
                    "type": "boolean"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "incomingMessage": {
                    "type": "string"
                },
                "product": {
                    "$ref": "#/definitions/RecordRef"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "serialNumber": {
                    "$ref": "#/definitions/RecordRef"
                },
                "escalationMessage": {
                    "type": "string"
                },
                "issue": {
                    "$ref": "#/definitions/RecordRef"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "profile": {
                    "$ref": "#/definitions/RecordRef"
                },
                "module": {
                    "$ref": "#/definitions/RecordRef"
                },
                "timeItemList": {
                    "$ref": "#/definitions/TimeItemList"
                },
                "externalId": {
                    "type": "string"
                },
                "priority": {
                    "$ref": "#/definitions/RecordRef"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalOnly": {
                    "type": "boolean"
                },
                "emailEmployeesList": {
                    "$ref": "#/definitions/EmailEmployeesList"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "searchSolution": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "lastReopenedDate": {
                    "type": "string"
                },
                "assigned": {
                    "$ref": "#/definitions/RecordRef"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "outgoingMessage": {
                    "type": "string"
                },
                "newSolutionFromMsg": {
                    "type": "string"
                },
                "startDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "Account": {
            "required": [
                "companyName",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "accessRole": {
                    "$ref": "#/definitions/RecordRef"
                },
                "accountNumber": {
                    "type": "string"
                },
                "addressbookList": {
                    "$ref": "#/definitions/CustomerAddressbookList"
                },
                "aging": {
                    "type": "number"
                },
                "altEmail": {
                    "type": "string"
                },
                "altName": {
                    "type": "string"
                },
                "altPhone": {
                    "type": "string"
                },
                "balance": {
                    "type": "number"
                },
                "billPay": {
                    "type": "boolean"
                },
                "buyingReason": {
                    "$ref": "#/definitions/RecordRef"
                },
                "buyingTimeFrame": {
                    "$ref": "#/definitions/RecordRef"
                },
                "campaignCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "clickStream": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "companyName": {
                    "type": "string"
                },
                "consolAging": {
                    "type": "number"
                },
                "consolBalance": {
                    "type": "number"
                },
                "consolDaysOverdue": {
                    "type": "number"
                },
                "consolDepositBalance": {
                    "type": "number"
                },
                "consolOverdueBalance": {
                    "type": "number"
                },
                "consolUnbilledOrders": {
                    "type": "number"
                },
                "contactRolesList": {
                    "$ref": "#/definitions/ContactAccessRolesList"
                },
                "contribPct": {
                    "type": "string"
                },
                "creditCardsList": {
                    "$ref": "#/definitions/CustomerCreditCardsList"
                },
                "creditHoldOverride": {
                    "$ref": "#/definitions/CustomerCreditHoldOverride"
                },
                "creditLimit": {
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currencyList": {
                    "$ref": "#/definitions/CustomerCurrencyList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "dateCreated": {
                    "format": "date-time",
                    "type": "string"
                },
                "daysOverdue": {
                    "type": "number"
                },
                "defaultAddress": {
                    "type": "string"
                },
                "defaultOrderPriority": {
                    "type": "number"
                },
                "depositBalance": {
                    "type": "number"
                },
                "displaySymbol": {
                    "type": "string"
                },
                "downloadList": {
                    "$ref": "#/definitions/CustomerDownloadList"
                },
                "drAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "email": {
                    "type": "string"
                },
                "emailPreference": {
                    "$ref": "#/definitions/EmailPreference"
                },
                "emailTransactions": {
                    "type": "boolean"
                },
                "endDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityStatus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "estimatedBudget": {
                    "type": "number"
                },
                "externalId": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "faxTransactions": {
                    "type": "boolean"
                },
                "firstName": {
                    "type": "string"
                },
                "firstVisit": {
                    "format": "date",
                    "type": "string"
                },
                "fxAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "giveAccess": {
                    "type": "boolean"
                },
                "globalSubscriptionStatus": {
                    "$ref": "#/definitions/GlobalSubscriptionStatus"
                },
                "groupPricingList": {
                    "$ref": "#/definitions/CustomerGroupPricingList"
                },
                "homePhone": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "isBudgetApproved": {
                    "type": "boolean"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "isPerson": {
                    "type": "boolean"
                },
                "itemPricingList": {
                    "$ref": "#/definitions/CustomerItemPricingList"
                },
                "keywords": {
                    "type": "string"
                },
                "language": {
                    "$ref": "#/definitions/Language"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "lastName": {
                    "type": "string"
                },
                "lastPageVisited": {
                    "type": "string"
                },
                "lastVisit": {
                    "format": "date",
                    "type": "string"
                },
                "leadSource": {
                    "$ref": "#/definitions/RecordRef"
                },
                "middleName": {
                    "type": "string"
                },
                "mobilePhone": {
                    "type": "string"
                },
                "monthlyClosing": {
                    "$ref": "#/definitions/CustomerMonthlyClosing"
                },
                "negativeNumberFormat": {
                    "$ref": "#/definitions/CustomerNegativeNumberFormat"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "numberFormat": {
                    "$ref": "#/definitions/CustomerNumberFormat"
                },
                "openingBalance": {
                    "type": "number"
                },
                "openingBalanceAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "openingBalanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "overdueBalance": {
                    "type": "number"
                },
                "overrideCurrencyFormat": {
                    "type": "boolean"
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef"
                },
                "partner": {
                    "$ref": "#/definitions/RecordRef"
                },
                "partnersList": {
                    "$ref": "#/definitions/CustomerPartnersList"
                },
                "password": {
                    "type": "string"
                },
                "password2": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "phoneticName": {
                    "type": "string"
                },
                "prefCCProcessor": {
                    "$ref": "#/definitions/RecordRef"
                },
                "priceLevel": {
                    "$ref": "#/definitions/RecordRef"
                },
                "printOnCheckAs": {
                    "type": "string"
                },
                "printTransactions": {
                    "type": "boolean"
                },
                "receivablesAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "referrer": {
                    "type": "string"
                },
                "reminderDays": {
                    "type": "number"
                },
                "representingSubsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "requirePwdChange": {
                    "type": "boolean"
                },
                "resaleNumber": {
                    "type": "string"
                },
                "salesGroup": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesReadiness": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesRep": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesTeamList": {
                    "$ref": "#/definitions/CustomerSalesTeamList"
                },
                "salutation": {
                    "type": "string"
                },
                "sendEmail": {
                    "type": "boolean"
                },
                "shipComplete": {
                    "type": "boolean"
                },
                "shippingItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "stage": {
                    "$ref": "#/definitions/CustomerStage"
                },
                "startDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "subscriptionsList": {
                    "$ref": "#/definitions/SubscriptionsList"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "symbolPlacement": {
                    "$ref": "#/definitions/CurrencySymbolPlacement"
                },
                "syncPartnerTeams": {
                    "type": "boolean"
                },
                "taxExempt": {
                    "type": "boolean"
                },
                "taxItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxable": {
                    "type": "boolean"
                },
                "terms": {
                    "$ref": "#/definitions/RecordRef"
                },
                "territory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "thirdPartyAcct": {
                    "type": "string"
                },
                "thirdPartyCountry": {
                    "$ref": "#/definitions/Country"
                },
                "thirdPartyZipcode": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "unbilledOrders": {
                    "type": "number"
                },
                "url": {
                    "type": "string"
                },
                "vatRegNumber": {
                    "type": "string"
                },
                "visits": {
                    "type": "number"
                },
                "webLead": {
                    "type": "string"
                }
            }
        },
        "Lead": {
            "required": [
                "entityStatus",
                "companyName",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "accessRole": {
                    "$ref": "#/definitions/RecordRef"
                },
                "accountNumber": {
                    "type": "string"
                },
                "addressbookList": {
                    "$ref": "#/definitions/CustomerAddressbookList"
                },
                "aging": {
                    "type": "number"
                },
                "altEmail": {
                    "type": "string"
                },
                "altName": {
                    "type": "string"
                },
                "altPhone": {
                    "type": "string"
                },
                "balance": {
                    "type": "number"
                },
                "billPay": {
                    "type": "boolean"
                },
                "buyingReason": {
                    "$ref": "#/definitions/RecordRef"
                },
                "buyingTimeFrame": {
                    "$ref": "#/definitions/RecordRef"
                },
                "campaignCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "clickStream": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "companyName": {
                    "type": "string"
                },
                "consolAging": {
                    "type": "number"
                },
                "consolBalance": {
                    "type": "number"
                },
                "consolDaysOverdue": {
                    "type": "number"
                },
                "consolDepositBalance": {
                    "type": "number"
                },
                "consolOverdueBalance": {
                    "type": "number"
                },
                "consolUnbilledOrders": {
                    "type": "number"
                },
                "contactRolesList": {
                    "$ref": "#/definitions/ContactAccessRolesList"
                },
                "contribPct": {
                    "type": "string"
                },
                "creditCardsList": {
                    "$ref": "#/definitions/CustomerCreditCardsList"
                },
                "creditHoldOverride": {
                    "$ref": "#/definitions/CustomerCreditHoldOverride"
                },
                "creditLimit": {
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currencyList": {
                    "$ref": "#/definitions/CustomerCurrencyList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "dateCreated": {
                    "format": "date-time",
                    "type": "string"
                },
                "daysOverdue": {
                    "type": "number"
                },
                "defaultAddress": {
                    "type": "string"
                },
                "defaultOrderPriority": {
                    "type": "number"
                },
                "depositBalance": {
                    "type": "number"
                },
                "displaySymbol": {
                    "type": "string"
                },
                "downloadList": {
                    "$ref": "#/definitions/CustomerDownloadList"
                },
                "drAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "email": {
                    "type": "string"
                },
                "emailPreference": {
                    "$ref": "#/definitions/EmailPreference"
                },
                "emailTransactions": {
                    "type": "boolean"
                },
                "endDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityStatus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "estimatedBudget": {
                    "type": "number"
                },
                "externalId": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "faxTransactions": {
                    "type": "boolean"
                },
                "firstName": {
                    "type": "string"
                },
                "firstVisit": {
                    "format": "date",
                    "type": "string"
                },
                "fxAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "giveAccess": {
                    "type": "boolean"
                },
                "globalSubscriptionStatus": {
                    "$ref": "#/definitions/GlobalSubscriptionStatus"
                },
                "groupPricingList": {
                    "$ref": "#/definitions/CustomerGroupPricingList"
                },
                "homePhone": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "isBudgetApproved": {
                    "type": "boolean"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "isPerson": {
                    "type": "boolean"
                },
                "itemPricingList": {
                    "$ref": "#/definitions/CustomerItemPricingList"
                },
                "keywords": {
                    "type": "string"
                },
                "language": {
                    "$ref": "#/definitions/Language"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "lastName": {
                    "type": "string"
                },
                "lastPageVisited": {
                    "type": "string"
                },
                "lastVisit": {
                    "format": "date",
                    "type": "string"
                },
                "leadSource": {
                    "$ref": "#/definitions/RecordRef"
                },
                "middleName": {
                    "type": "string"
                },
                "mobilePhone": {
                    "type": "string"
                },
                "monthlyClosing": {
                    "$ref": "#/definitions/CustomerMonthlyClosing"
                },
                "negativeNumberFormat": {
                    "$ref": "#/definitions/CustomerNegativeNumberFormat"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "numberFormat": {
                    "$ref": "#/definitions/CustomerNumberFormat"
                },
                "openingBalance": {
                    "type": "number"
                },
                "openingBalanceAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "openingBalanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "overdueBalance": {
                    "type": "number"
                },
                "overrideCurrencyFormat": {
                    "type": "boolean"
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef"
                },
                "partner": {
                    "$ref": "#/definitions/RecordRef"
                },
                "partnersList": {
                    "$ref": "#/definitions/CustomerPartnersList"
                },
                "password": {
                    "type": "string"
                },
                "password2": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "phoneticName": {
                    "type": "string"
                },
                "prefCCProcessor": {
                    "$ref": "#/definitions/RecordRef"
                },
                "priceLevel": {
                    "$ref": "#/definitions/RecordRef"
                },
                "printOnCheckAs": {
                    "type": "string"
                },
                "printTransactions": {
                    "type": "boolean"
                },
                "receivablesAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "referrer": {
                    "type": "string"
                },
                "reminderDays": {
                    "type": "number"
                },
                "representingSubsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "requirePwdChange": {
                    "type": "boolean"
                },
                "resaleNumber": {
                    "type": "string"
                },
                "salesGroup": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesReadiness": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesRep": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesTeamList": {
                    "$ref": "#/definitions/CustomerSalesTeamList"
                },
                "salutation": {
                    "type": "string"
                },
                "sendEmail": {
                    "type": "boolean"
                },
                "shipComplete": {
                    "type": "boolean"
                },
                "shippingItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "stage": {
                    "$ref": "#/definitions/CustomerStage"
                },
                "startDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "subscriptionsList": {
                    "$ref": "#/definitions/SubscriptionsList"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "symbolPlacement": {
                    "$ref": "#/definitions/CurrencySymbolPlacement"
                },
                "syncPartnerTeams": {
                    "type": "boolean"
                },
                "taxExempt": {
                    "type": "boolean"
                },
                "taxItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxable": {
                    "type": "boolean"
                },
                "terms": {
                    "$ref": "#/definitions/RecordRef"
                },
                "territory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "thirdPartyAcct": {
                    "type": "string"
                },
                "thirdPartyCountry": {
                    "$ref": "#/definitions/Country"
                },
                "thirdPartyZipcode": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "unbilledOrders": {
                    "type": "number"
                },
                "url": {
                    "type": "string"
                },
                "vatRegNumber": {
                    "type": "string"
                },
                "visits": {
                    "type": "number"
                },
                "webLead": {
                    "type": "string"
                }
            }
        },
        "Values": {
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ShipGroupList": {
            "properties": {
                "shipGroup": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ShipGroup"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ShipGroup": {
            "properties": {
                "shippingTax2Amt": {
                    "type": "number"
                },
                "handlingTax2Amt": {
                    "type": "number"
                },
                "isFulfilled": {
                    "type": "boolean"
                },
                "handlingTaxAmt": {
                    "type": "number"
                },
                "destinationAddress": {
                    "type": "string"
                },
                "isShippingTaxable": {
                    "type": "boolean"
                },
                "sourceAddress": {
                    "type": "string"
                },
                "shippingMethod": {
                    "type": "string"
                },
                "shippingTax2Rate": {
                    "type": "string"
                },
                "shippingTaxAmt": {
                    "type": "number"
                },
                "weight": {
                    "type": "number"
                },
                "handlingTaxRate": {
                    "type": "string"
                },
                "destinationAddressRef": {
                    "$ref": "#/definitions/RecordRef"
                },
                "handlingTax2Rate": {
                    "type": "string"
                },
                "isHandlingTaxable": {
                    "type": "boolean"
                },
                "shippingRate": {
                    "type": "number"
                },
                "shippingTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "handlingRate": {
                    "type": "number"
                },
                "handlingTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "sourceAddressRef": {
                    "$ref": "#/definitions/RecordRef"
                },
                "id": {
                    "type": "number"
                },
                "shippingMethodRef": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shippingTaxRate": {
                    "type": "string"
                }
            }
        },
        "Estimate": {
            "required": [
                "itemList",
                "entity",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "discountRate": {
                    "type": "string"
                },
                "salesRep": {
                    "$ref": "#/definitions/RecordRef"
                },
                "estGrossProfitPercent": {
                    "type": "number"
                },
                "endDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "dueDate": {
                    "x-displayName": "Due Date",
                    "format": "date-time",
                    "type": "string"
                },
                "vatRegNum": {
                    "type": "string"
                },
                "taxTotal": {
                    "type": "number"
                },
                "salesTeamList": {
                    "$ref": "#/definitions/CustomerSalesTeamList"
                },
                "memo": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "subTotal": {
                    "type": "number"
                },
                "syncPartnerTeams": {
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string"
                },
                "terms": {
                    "$ref": "#/definitions/RecordRef"
                },
                "exchangeRate": {
                    "type": "number"
                },
                "fax": {
                    "type": "string"
                },
                "shipGroupList": {
                    "$ref": "#/definitions/ShipGroupList"
                },
                "toBeFaxed": {
                    "type": "boolean"
                },
                "handlingTax1Rate": {
                    "type": "number"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "shippingCost": {
                    "type": "number"
                },
                "probability": {
                    "type": "number"
                },
                "leadSource": {
                    "$ref": "#/definitions/RecordRef"
                },
                "opportunity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "trackingNumbers": {
                    "type": "string"
                },
                "contribPct": {
                    "type": "string"
                },
                "shipDate": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate": {
                    "type": "number"
                },
                "visibleToCustomer": {
                    "type": "boolean"
                },
                "toBeEmailed": {
                    "type": "boolean"
                },
                "shipMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipAddressList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecordRef"
                    }
                },
                "fob": {
                    "type": "string"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipIsResidential": {
                    "type": "boolean"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "startDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tranId": {
                    "type": "string"
                },
                "includeInForecast": {
                    "type": "boolean"
                },
                "partnersList": {
                    "$ref": "#/definitions/CustomerPartnersList"
                },
                "discountItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesGroup": {
                    "$ref": "#/definitions/RecordRef"
                },
                "title": {
                    "type": "string"
                },
                "expectedCloseDate": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                },
                "currencyName": {
                    "type": "string"
                },
                "billAddressList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Address"
                    }
                },
                "handlingCost": {
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "promoCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "email": {
                    "type": "string"
                },
                "linkedTrackingNumbers": {
                    "type": "string"
                },
                "totalCostEstimate": {
                    "type": "number"
                },
                "otherRefNum": {
                    "type": "string"
                },
                "toBePrinted": {
                    "type": "boolean"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "billingSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shippingTax2Rate": {
                    "type": "string"
                },
                "isTaxable": {
                    "type": "boolean"
                },
                "externalId": {
                    "type": "string"
                },
                "messageSel": {
                    "type": "string"
                },
                "forecastType": {
                    "$ref": "#/definitions/RecordRef"
                },
                "message": {
                    "type": "string"
                },
                "handlingTax2Rate": {
                    "type": "string"
                },
                "syncSalesTeams": {
                    "type": "boolean"
                },
                "altHandlingCost": {
                    "type": "number"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "altShippingCost": {
                    "type": "number"
                },
                "createdFrom": {
                    "$ref": "#/definitions/RecordRef"
                },
                "discountTotal": {
                    "type": "number"
                },
                "entityStatus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "estGrossProfit": {
                    "type": "number"
                },
                "shippingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "altSalesTotal": {
                    "type": "number"
                },
                "itemList": {
                    "$ref": "#/definitions/ItemList"
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "shippingTax1Rate": {
                    "type": "number"
                },
                "tax2Total": {
                    "type": "number"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "ItemList": {
            "properties": {
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Item"
                    }
                }
            }
        },
        "Item": {
            "properties": {
                "line": {
                    "type": "number"
                },
                "expectedShipDate": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "tax1Amt": {
                    "type": "number"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "isEstimate": {
                    "type": "boolean"
                },
                "rate": {
                    "type": "string"
                },
                "altSalesAmt": {
                    "type": "number"
                },
                "price": {
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityOnHand": {
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "taxRate2": {
                    "type": "number"
                },
                "taxRate1": {
                    "type": "number"
                },
                "fromJob": {
                    "type": "boolean"
                },
                "amount": {
                    "type": "number"
                },
                "quantityAvailable": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "costEstimateType": {
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "externalId": {
                    "type": "string"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecTermInMonths": {
                    "type": "number"
                },
                "costEstimate": {
                    "type": "number"
                },
                "grossAmt": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "AccountTranslationList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "translation": {
                    "items": {
                        "$ref": "#/definitions/ClassTranslation"
                    },
                    "type": "array"
                }
            }
        },
        "AccountType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "AddressBills": {
            "x-has-customfields": true,
            "properties": {
                "zip": {
                    "x-samplevalue": "98108-1226",
                    "type": "string"
                },
                "country": {
                    "$ref": "#/definitions/Country"
                },
                "addr2": {
                    "x-samplevalue": "Ste 100",
                    "type": "string"
                },
                "addr1": {
                    "x-samplevalue": "159 Broadway",
                    "type": "string"
                },
                "city": {
                    "x-samplevalue": "Menlo Park",
                    "type": "string"
                },
                "addrText": {
                    "x-displayName": "Address",
                    "x-samplevalue": "Bob Ford, CPA\n159 Broadway\nSte 100\nMenlo Park CA 94025\nUS",
                    "type": "string"
                },
                "addrPhone": {
                    "x-samplevalue": "408-555-3770",
                    "x-sub-format": "Phone",
                    "type": "string"
                },
                "internalId": {
                    "x-samplevalue": "1",
                    "x-displayName": "Internal ID",
                    "type": "string"
                },
                "addressee": {
                    "x-samplevalue": "Bob Ford, CPA",
                    "type": "string"
                },
                "attention": {
                    "x-samplevalue": "line of address",
                    "type": "string"
                },
                "override": {
                    "x-displayName": "Override",
                    "x-samplevalue": true,
                    "type": "boolean"
                },
                "state": {
                    "x-samplevalue": "WA",
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldListRes"
                }
            }
        },
        "PurchLandedCostListRes": {
            "properties": {
                "landedCost": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LandedCostSummaryRes"
                    }
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "CustomFieldListRes": {
            "properties": {
                "customField": {
                    "type": "array",
                    "items": {
                        "x-reference-objectname": "CustomFieldRef",
                        "$ref": "#/definitions/CustomFieldRefRes"
                    }
                }
            }
        },
        "RecordRefListRes": {
            "properties": {
                "recordRef": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecordRefResponse"
                    }
                }
            }
        },
        "VendorBillExpenseListReq": {
            "properties": {
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VendorBillExpenseReq"
                    }
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "VendorBillItemListReq": {
            "properties": {
                "item": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VendorBillItemReq"
                    }
                },
                "replaceAll": {
                    "x-samplevalue": false,
                    "type": "boolean"
                }
            }
        },
        "ContactAccessRolesListResponse": {
            "properties": {
                "contactRoles": {
                    "items": {
                        "$ref": "#/definitions/ContactAccessRolesResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomerCurrencyListResponse": {
            "properties": {
                "currency": {
                    "items": {
                        "$ref": "#/definitions/CustomerCurrencyResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomFieldListResponse": {
            "properties": {
                "customField": {
                    "type": "array",
                    "items": {
                        "x-reference-objectname": "CustomFieldRef",
                        "$ref": "#/definitions/CustomFieldRefResponse"
                    }
                }
            }
        },
        "SubscriptionsListResponse": {
            "properties": {
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                },
                "subscriptions": {
                    "items": {
                        "$ref": "#/definitions/SubscriptionsResponse"
                    },
                    "type": "array"
                }
            }
        },
        "CustomerCurrencyListPatch": {
            "properties": {
                "currency": {
                    "items": {
                        "$ref": "#/definitions/CustomerCurrencyPatch"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "AddressResponse": {
            "x-has-customfields": true,
            "properties": {
                "zip": {
                    "type": "string",
                    "x-samplevalue": "431605"
                },
                "country": {
                    "$ref": "#/definitions/Country"
                },
                "addr2": {
                    "x-samplevalue": "Som Road",
                    "type": "string"
                },
                "addr1": {
                    "x-samplevalue": "Zolo Stays",
                    "type": "string"
                },
                "city": {
                    "x-samplevalue": "Las Veags Nevada",
                    "type": "string"
                },
                "addr3": {
                    "x-samplevalue": "Shanky Street",
                    "type": "string"
                },
                "addrText": {
                    "x-samplevalue": "4th Prince Colin Road, LA",
                    "x-displayName": "Address",
                    "type": "string"
                },
                "addrPhone": {
                    "type": "string",
                    "x-samplevalue": "8123944123",
                    "x-sub-format": "phone"
                },
                "internalId": {
                    "x-samplevalue": "1",
                    "x-displayName": "Internal ID",
                    "type": "string"
                },
                "addressee": {
                    "x-samplevalue": "Wayne Rooney",
                    "type": "string"
                },
                "attention": {
                    "x-samplevalue": "At.",
                    "type": "string"
                },
                "override": {
                    "x-samplevalue": false,
                    "x-displayName": "Override",
                    "type": "boolean"
                },
                "state": {
                    "x-samplevalue": "California",
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldListResponse"
                }
            }
        },
        "CreateInvoiceAddress": {
            "x-has-customfields": true,
            "properties": {
                "zip": {
                    "x-samplevalue": "431605",
                    "type": "string"
                },
                "country": {
                    "$ref": "#/definitions/Country"
                },
                "addr2": {
                    "x-samplevalue": "Som Road",
                    "type": "string"
                },
                "addr1": {
                    "x-samplevalue": "Zolo Stays",
                    "type": "string"
                },
                "city": {
                    "x-samplevalue": "Pune",
                    "type": "string"
                },
                "addrText": {
                    "x-samplevalue": "4th Prince Colin Road, LA",
                    "x-displayName": "Address",
                    "type": "string"
                },
                "addrPhone": {
                    "type": "string",
                    "x-samplevalue": "8123944123",
                    "x-sub-format": "phone"
                },
                "internalId": {
                    "x-samplevalue": "1",
                    "x-displayName": "Internal ID",
                    "type": "string"
                },
                "addressee": {
                    "x-samplevalue": "Wayne Rooney",
                    "type": "string"
                },
                "attention": {
                    "x-samplevalue": "At.",
                    "type": "string"
                },
                "override": {
                    "x-samplevalue": false,
                    "x-displayName": "Override",
                    "type": "boolean"
                },
                "state": {
                    "x-samplevalue": "California",
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                }
            }
        },
        "PromotionsList": {
            "properties": {
                "promotions": {
                    "items": {
                        "$ref": "#/definitions/Promotions"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "PromotionsListResponse": {
            "properties": {
                "promotions": {
                    "items": {
                        "$ref": "#/definitions/PromotionsResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "GiftCertRedemptionListResponse": {
            "properties": {
                "giftCertRedemption": {
                    "items": {
                        "$ref": "#/definitions/GiftCertRedemptionResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "InvoicePartnersListResponse": {
            "properties": {
                "partners": {
                    "items": {
                        "$ref": "#/definitions/PartnersResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "InventoryDetailResponse": {
            "properties": {
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "inventoryAssignmentList": {
                    "$ref": "#/definitions/InventoryAssignmentListResponse"
                }
            }
        },
        "PartnersResponse": {
            "properties": {
                "contribution": {
                    "x-displayName": "Contribution %",
                    "format": "double",
                    "x-samplevalue": 1.01,
                    "type": "number"
                },
                "isPrimary": {
                    "x-samplevalue": true,
                    "x-displayName": "Primary",
                    "type": "boolean"
                },
                "partner": {
                    "x-displayName": "Partner",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "partnerRole": {
                    "x-displayName": "Partner Role",
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "TransactionShipGroupResponse": {
            "properties": {
                "destinationAddress": {
                    "type": "string",
                    "x-samplevalue": "4th Prince Colin Road, LA"
                },
                "destinationAddressRef": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "handlingRate": {
                    "type": "number",
                    "format": "double",
                    "x-samplevalue": 18.01
                },
                "handlingTax2Amt": {
                    "type": "number",
                    "format": "double",
                    "x-sub-format": "money",
                    "x-samplevalue": 180.01
                },
                "handlingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "type": "string",
                    "x-samplevalue": "18.0%"
                },
                "handlingTaxAmt": {
                    "type": "number",
                    "format": "double",
                    "x-sub-format": "money",
                    "x-samplevalue": 180.01
                },
                "handlingTaxCode": {
                    "x-displayName": "Handling Tax Code",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "handlingTaxRate": {
                    "type": "string",
                    "x-samplevalue": "18.0%"
                },
                "id": {
                    "x-displayName": "ID",
                    "type": "integer",
                    "format": "int64",
                    "x-samplevalue": 1002
                },
                "isFulfilled": {
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "isHandlingTaxable": {
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "isShippingTaxable": {
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "shippingMethod": {
                    "type": "string"
                },
                "shippingMethodRef": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "shippingRate": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 1.01
                },
                "shippingTax2Amt": {
                    "type": "number",
                    "format": "double",
                    "x-sub-format": "money",
                    "x-samplevalue": 100.01
                },
                "shippingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "type": "string",
                    "x-samplevalue": "10%"
                },
                "shippingTaxAmt": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 10.01
                },
                "shippingTaxCode": {
                    "x-displayName": "Shipping Tax Code",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "shippingTaxRate": {
                    "type": "string",
                    "x-samplevalue": "10%"
                },
                "sourceAddress": {
                    "type": "string",
                    "x-samplevalue": "4th Prince Colin Road, LA"
                },
                "sourceAddressRef": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "weight": {
                    "x-displayName": "Item Weight",
                    "type": "number",
                    "format": "double",
                    "x-samplevalue": 100.01
                }
            }
        },
        "CreateInvoiceTransactionShipGroup": {
            "properties": {
                "handlingRate": {
                    "type": "number",
                    "x-samplevalue": 4.01,
                    "format": "double"
                },
                "handlingTax2Amt": {
                    "type": "number",
                    "format": "double",
                    "x-samplevalue": 400.01,
                    "x-sub-format": "money"
                },
                "handlingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "x-samplevalue": "4.0%",
                    "type": "string"
                },
                "handlingTaxCode": {
                    "x-displayName": "Handling Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "id": {
                    "x-displayName": "ID",
                    "type": "integer",
                    "x-samplevalue": 1232,
                    "format": "int64"
                },
                "shippingRate": {
                    "format": "double",
                    "x-samplevalue": 4.01,
                    "type": "number"
                },
                "shippingTax2Amt": {
                    "type": "number",
                    "format": "double",
                    "x-samplevalue": 400.01,
                    "x-sub-format": "money"
                },
                "shippingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "x-samplevalue": "4.0%",
                    "type": "string"
                },
                "shippingTaxCode": {
                    "x-displayName": "Shipping Tax Code",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CustomerAddressbookRequest": {
            "properties": {
                "addressbookAddress": {
                    "x-displayName": "Edit",
                    "x-reference-objectname": "Address",
                    "$ref": "#/definitions/AddressCustomerRequest"
                },
                "defaultBilling": {
                    "x-displayName": "Default Billing",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "defaultShipping": {
                    "x-displayName": "Default Shipping",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "internalId": {
                    "type": "string",
                    "x-samplevalue": "1"
                },
                "isResidential": {
                    "x-displayName": "Residential Address",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "label": {
                    "x-displayName": "Label",
                    "type": "string",
                    "x-samplevalue": "SomeLabel"
                }
            }
        },
        "AccountingBookDetailResponse": {
            "properties": {
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "x-samplevalue": 2.01,
                    "type": "number"
                },
                "accountingBook": {
                    "x-displayName": "Secondary Book",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "currency": {
                    "x-displayName": "Base Currency",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "InventoryAssignmentListResponse": {
            "properties": {
                "inventoryAssignment": {
                    "items": {
                        "$ref": "#/definitions/InventoryAssignmentResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "AddressCustomerRequest": {
            "x-has-customfields": true,
            "properties": {
                "zip": {
                    "x-samplevalue": "431605",
                    "type": "string"
                },
                "country": {
                    "$ref": "#/definitions/Country"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "addr2": {
                    "x-samplevalue": "Som Road",
                    "type": "string"
                },
                "addr1": {
                    "x-samplevalue": "Zolo Stays",
                    "type": "string"
                },
                "city": {
                    "x-samplevalue": "Pune",
                    "type": "string"
                },
                "addrPhone": {
                    "type": "string",
                    "x-samplevalue": "8123944123",
                    "x-sub-format": "phone"
                },
                "internalId": {
                    "x-samplevalue": "1",
                    "x-displayName": "Internal ID",
                    "type": "string"
                },
                "addressee": {
                    "x-samplevalue": "Wayne Rooney",
                    "type": "string"
                },
                "attention": {
                    "x-samplevalue": "At.",
                    "type": "string"
                },
                "override": {
                    "x-samplevalue": false,
                    "x-displayName": "Override",
                    "type": "boolean"
                },
                "state": {
                    "x-samplevalue": "California",
                    "type": "string"
                }
            }
        },
        "LandedCostSummaryRes": {
            "properties": {
                "amount": {
                    "x-samplevalue": 100.01,
                    "x-displayName": "Amount",
                    "format": "double",
                    "type": "number"
                },
                "source": {
                    "description": "Available values are: _manual _otherTransaction _otherTransactionExcludeTax _thisTransaction",
                    "x-displayName": "Source",
                    "$ref": "#/definitions/LandedCostSource"
                },
                "category": {
                    "x-displayName": "Category",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "transaction": {
                    "x-displayName": "Transaction",
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "CustomFieldRefRes": {
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "scriptId": {
                    "type": "string"
                }
            }
        },
        "VendorBillExpenseReq": {
            "x-has-customfields": true,
            "required": [
                "account",
                "amount"
            ],
            "properties": {
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "amortizationEndDate": {
                    "description": "Sets the end date for an amortization period.",
                    "x-displayName": "Amort. End Date",
                    "format": "date-time",
                    "x-samplevalue": "2017-12-16T08:00:00Z",
                    "type": "string"
                },
                "amortizStartDate": {
                    "description": "Sets the start date for an amortization period.",
                    "x-displayName": "Amort. Start Date",
                    "format": "date-time",
                    "x-samplevalue": "2017-12-16T08:00:00Z",
                    "type": "string"
                },
                "amortizationResidual": {
                    "description": "Sets an amount not to be recognized.",
                    "x-displayName": "Residual",
                    "x-samplevalue": "2.00",
                    "type": "string"
                },
                "memo": {
                    "x-displayName": "Memo",
                    "x-samplevalue": "Sample Memo",
                    "type": "string"
                },
                "line": {
                    "format": "int64",
                    "x-samplevalue": 1,
                    "type": "integer"
                },
                "orderDoc": {
                    "format": "int64",
                    "x-samplevalue": 1,
                    "type": "integer"
                },
                "orderLine": {
                    "x-displayName": "Order Line",
                    "x-samplevalue": 1,
                    "format": "int64",
                    "type": "integer"
                },
                "amount": {
                    "description": "Sets the amount for this line.",
                    "x-displayName": "Amount",
                    "x-samplevalue": 100.01,
                    "format": "double",
                    "type": "number"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "x-samplevalue": 100.01,
                    "format": "double",
                    "type": "number"
                },
                "tax1Amt": {
                    "x-displayName": "GST/HST",
                    "x-samplevalue": 200.01,
                    "format": "double",
                    "type": "number"
                },
                "taxRate1": {
                    "x-displayName": "GST/HST",
                    "format": "double",
                    "x-samplevalue": 200.01,
                    "type": "number"
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "x-samplevalue": 200.01,
                    "type": "number"
                },
                "isBillable": {
                    "description": "If set to TRUE, this expense will be billed back to the customer set in expCustomer.",
                    "x-displayName": "Billable",
                    "x-samplevalue": true,
                    "type": "boolean"
                },
                "account": {
                    "description": "Sets the account for the bill.",
                    "x-displayName": "Account",
                    "x-reference-objectname": "Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "amortizationSched": {
                    "description": "References a value in a user-defined list at Lists > Accounting > Amortization Schedules.",
                    "x-displayName": "Amort. Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "_class": {
                    "description": "References a value from a user defined list at Setup > Company > Classifications > Classes. This field is required when the Make Classes Mandatory preference is enabled at Setup > Accounting > Accounting Preferences. This is only available for line items on a Vendor Bill when the Allow Per-Line Classes feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item.",
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "description": "References an existing customer record.",
                    "x-reference-objectname": "Customer",
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "description": "References a value in a user-defined list at Setup > Company > Classifications > Departments. This is only available for line items on a Vendor Bill when the Allow Per-Line Departments feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. This field is required when Make Departments Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "x-reference-objectname": "Department",
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "description": "References a value in a user-defined list at Setup > Company > Classifications > Locations. This is only available for line items on a Vendor Bill when the Allow Per-Line Locations feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. Note that if the Multi-Inventory feature is enabled, the Allow Per-Line Locations feature is automatically enabled. This field is required when Make Locations Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "x-reference-objectname": "Location",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "VendorBillItemReq": {
            "x-has-customfields": true,
            "properties": {
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "amortizationEndDate": {
                    "description": "Sets the end date for an amortization period.",
                    "x-samplevalue": "2015-12-16T08:00:00Z",
                    "x-displayName": "Amort. End Date",
                    "format": "date-time",
                    "type": "string"
                },
                "amortizStartDate": {
                    "description": "Sets the start date for an amortization period.",
                    "x-samplevalue": "2016-12-16T08:00:00Z",
                    "x-displayName": "Amort. Start Date",
                    "format": "date-time",
                    "type": "string"
                },
                "expirationDate": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "x-samplevalue": "2017-12-16T08:00:00Z",
                    "type": "string"
                },
                "amortizationResidual": {
                    "description": "Sets an amount not to be recognized.",
                    "x-displayName": "Residual",
                    "x-samplevalue": "90.00",
                    "type": "string"
                },
                "binNumbers": {
                    "x-displayName": "Bin Numbers",
                    "x-samplevalue": "111",
                    "type": "string"
                },
                "rate": {
                    "type": "string",
                    "x-readOnly": true,
                    "x-samplevalue": "25",
                    "description": "A read-only field except when the priceLevel is set to Custom."
                },
                "description": {
                    "x-samplevalue": "sample description",
                    "description": "Sets the description for the item. Defaults to the description as provided in the items record.",
                    "type": "string"
                },
                "serialNumbers": {
                    "description": "A comma deliminated list of serial or LOT numbers. If entering serial numbers there must be a number for each item. Lot numbers must be entered in a format of LOT#(Quantity). For example, to enter a quantity of 100 items as Lot number ABC1234, enter ABC1234(100).",
                    "x-samplevalue": "ABC1234(100)",
                    "x-displayName": "Serial/Lot Numbers",
                    "type": "string"
                },
                "line": {
                    "description": "References a line in an existing list. If set on an update with replaceAll set to TRUE, the current list is replaced with the item list submitted but the line referenced is simply updated with the new information provided. If set on an updated with replaceAll set to FALSE, the line referenced is updated with the new information provided and existing items in the list remain as they were.",
                    "x-samplevalue": 1,
                    "format": "int64",
                    "type": "integer"
                },
                "orderDoc": {
                    "x-samplevalue": 1,
                    "format": "int64",
                    "type": "integer"
                },
                "orderLine": {
                    "x-displayName": "{1}",
                    "x-samplevalue": 1,
                    "format": "int64",
                    "type": "integer"
                },
                "grossAmt": {
                    "x-samplevalue": 100.01,
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number"
                },
                "amount": {
                    "x-samplevalue": 100.01,
                    "description": "This is a read-only field that sets the amount for this line.",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number"
                },
                "quantity": {
                    "description": "Sets the number of items. Defaults to one.",
                    "x-samplevalue": 2,
                    "default": 1,
                    "format": "double",
                    "type": "number"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "x-samplevalue": 100.01,
                    "format": "double",
                    "type": "number"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "x-samplevalue": 100.01,
                    "format": "double",
                    "type": "number"
                },
                "taxRate2": {
                    "format": "double",
                    "x-samplevalue": 100.01,
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "amortizationSched": {
                    "description": "References a value in a user-defined list at Lists > Accounting > Amortization Schedules.",
                    "x-displayName": "Amort. Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "billreceiptsList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "_class": {
                    "description": "References a value from a user defined list at Setup > Company > Classifications > Classes. This field is required when the Make Classes Mandatory preference is enabled at Setup > Accounting > Accounting Preferences. This is only available for line items on a Vendor Bill when the Allow Per-Line Classes feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item.",
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "description": "References an existing customer record.",
                    "x-reference-objectname": "Customer",
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "description": "References a value from a user defined list at Setup > Company > Departments. This is only available for line items on a Vendor Bill when the Allow Per-Line Departments feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. This field is required when Make Departments Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "x-reference-objectname": "Department",
                    "$ref": "#/definitions/RecordRef"
                },
                "item": {
                    "description": "References a value in a user-defined list at Lists > Accounting > Items.",
                    "$ref": "#/definitions/RecordRef"
                },
                "landedCostCategory": {
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > New > Landed Cost Category.",
                    "x-displayName": "Landed Cost Category",
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "description": "References a value in a user-defined list at Setup > Company > Classifications > Locations. This is only available for line items on a Vendor Bill when the Allow Per-Line Locations feature is enabled at Setup > Accounting > Accounting Preferences and you are using a custom form that has been modified to use this field at the line item. Note that if the Multi-Inventory feature is enabled, the Allow Per-Line Locations feature is automatically enabled. This field is required when Make Locations Mandatory is enabled at Setup > Accounting > Accounting Preferences.",
                    "x-reference-objectname": "Location",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxCode": {
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "units": {
                    "description": "This is a reference to a unit of measure already set up at Lists > Accounting > Units of Measure.",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "ContactAccessRolesResponse": {
            "properties": {
                "contact": {
                    "x-displayName": "Contact",
                    "x-reference-objectname": "Contact",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "email": {
                    "x-displayName": "{1} Email",
                    "type": "string",
                    "x-sub-format": "Email",
                    "x-samplevalue": "anc@gma.com"
                },
                "giveAccess": {
                    "x-displayName": "Login Access",
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "password": {
                    "x-displayName": "Password",
                    "type": "string",
                    "x-samplevalue": "anc@12321"
                },
                "password2": {
                    "x-displayName": "Confirm Password",
                    "type": "string",
                    "x-samplevalue": "anc@12321"
                },
                "role": {
                    "x-displayName": "Role",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "sendEmail": {
                    "x-displayName": "Send Notification Email",
                    "type": "boolean",
                    "x-samplevalue": false
                }
            }
        },
        "CustomFieldRefResponse": {
            "properties": {
                "internalId": {
                    "x-samplevalue": "1",
                    "type": "string"
                },
                "scriptId": {
                    "x-samplevalue": "1",
                    "type": "string"
                }
            }
        },
        "SubscriptionsResponse": {
            "properties": {
                "lastModifiedDate": {
                    "x-displayName": "Last Modified",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-12-16T08:00:00Z"
                },
                "subscribed": {
                    "x-samplevalue": true,
                    "x-displayName": "Subscribed",
                    "type": "boolean"
                },
                "subscription": {
                    "x-displayName": "{Subscription}",
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "CustomerCurrencyPatch": {
            "properties": {
                "currency": {
                    "x-displayName": "Currency",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "displaySymbol": {
                    "x-displayName": "Symbol",
                    "type": "string",
                    "x-samplevalue": "$"
                },
                "overrideCurrencyFormat": {
                    "x-displayName": "Override Currency Format{:override default currency format}",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "symbolPlacement": {
                    "x-reference-objectname": "SymbolPlacement",
                    "x-displayName": "Symbol Placement{:where to put the currency symbol, i.e. before or after number}",
                    "$ref": "#/definitions/CurrencySymbolPlacement"
                }
            }
        },
        "Promotions": {
            "properties": {
                "couponCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "promoCode": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "PromotionsResponse": {
            "properties": {
                "couponCode": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "promoCode": {
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "GiftCertRedemptionResponse": {
            "properties": {
                "authCode": {
                    "x-displayName": "Gift Certificate",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "authCodeAmtRemaining": {
                    "x-displayName": "Available Credit",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "x-sub-format": "money"
                },
                "authCodeApplied": {
                    "x-displayName": "Amount Applied",
                    "format": "double",
                    "x-samplevalue": 10.01,
                    "type": "number"
                },
                "giftCertAvailable": {
                    "format": "double",
                    "x-samplevalue": 10.01,
                    "type": "number"
                }
            }
        },
        "InventoryAssignmentResponse": {
            "properties": {
                "binNumber": {
                    "x-displayName": "Bin",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "expirationDate": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-31T12:30:00+05:30"
                },
                "internalId": {
                    "x-displayName": "Internal ID",
                    "type": "string",
                    "x-samplevalue": "12323"
                },
                "issueInventoryNumber": {
                    "x-displayName": "Serial/Lot Number",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "quantity": {
                    "x-displayName": "Quantity",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "quantityAvailable": {
                    "x-displayName": "Available",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "receiptInventoryNumber": {
                    "type": "string",
                    "x-samplevalue": "1000"
                },
                "toBinNumber": {
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "AvsMatchCode": {
            "properties": {
                "value": {
                    "type": "string",
                    "x-samplevalue": "_n",
                    "enum": [
                        "_n",
                        "_x",
                        "_y"
                    ]
                }
            }
        },
        "CategoryList": {
            "properties": {
                "category": {
                    "items": {
                        "$ref": "#/definitions/RecordRef"
                    },
                    "type": "array"
                }
            }
        },
        "ClassTranslation": {
            "properties": {
                "language": {
                    "type": "string",
                    "x-displayname": "Language"
                },
                "locale": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "x-displayname": "Name"
                }
            }
        },
        "ConsolidatedRate": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "Contact": {
            "required": [
                "firstName",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "addressbookList": {
                    "$ref": "#/definitions/ContactAddressbookList"
                },
                "altEmail": {
                    "type": "string"
                },
                "assistant": {
                    "$ref": "#/definitions/RecordRef"
                },
                "assistantPhone": {
                    "type": "string"
                },
                "billPay": {
                    "type": "boolean"
                },
                "categoryList": {
                    "$ref": "#/definitions/CategoryList"
                },
                "comments": {
                    "type": "string"
                },
                "company": {
                    "$ref": "#/definitions/RecordRef"
                },
                "contactSource": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "dateCreated": {
                    "format": "date-time",
                    "type": "string"
                },
                "defaultAddress": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "globalSubscriptionStatus": {
                    "$ref": "#/definitions/GlobalSubscriptionStatus"
                },
                "homePhone": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "isPrivate": {
                    "type": "boolean"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "lastName": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                },
                "mobilePhone": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "officePhone": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "phoneticName": {
                    "type": "string"
                },
                "salutation": {
                    "type": "string"
                },
                "subscriptionsList": {
                    "$ref": "#/definitions/SubscriptionsList"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "supervisor": {
                    "$ref": "#/definitions/RecordRef"
                },
                "supervisorPhone": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "ContactAccessRoles": {
            "properties": {
                "contact": {
                    "$ref": "#/definitions/RecordRef"
                },
                "email": {
                    "type": "string"
                },
                "giveAccess": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                },
                "password2": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/RecordRef"
                },
                "sendEmail": {
                    "type": "boolean"
                }
            }
        },
        "ContactAccessRolesList": {
            "properties": {
                "contactRoles": {
                    "items": {
                        "$ref": "#/definitions/ContactAccessRoles"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ContactAddressbook": {
            "properties": {
                "addressbookAddress": {
                    "$ref": "#/definitions/Address"
                },
                "defaultBilling": {
                    "type": "boolean"
                },
                "defaultShipping": {
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "ContactAddressbookList": {
            "properties": {
                "addressbook": {
                    "items": {
                        "$ref": "#/definitions/ContactAddressbook"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CreditTerm": {
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "dateDriven": {
                    "type": "boolean"
                },
                "dayDiscountExpires": {
                    "type": "number"
                },
                "dayOfMonthNetDue": {
                    "type": "number"
                },
                "daysUntilExpiry": {
                    "type": "number"
                },
                "daysUntilNetDue": {
                    "type": "number"
                },
                "discountPercent": {
                    "type": "number"
                },
                "discountPercentDateDriven": {
                    "type": "number"
                },
                "dueNextMonthIfWithinDays": {
                    "type": "number"
                },
                "externalId": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "preferred": {
                    "type": "boolean"
                }
            }
        },
        "CurrencySymbolPlacement": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "Customer": {
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Customer",
            "x-searchable-joins": [
                "and"
            ],
            "x-searchable": true,
            "properties": {
                "accessRole": {
                    "x-displayName": "Role",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in a user-defined list at Setup > Users/Roles > Manage Roles. This value sets the role assigned to this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "accountNumber": {
                    "x-displayName": "Account",
                    "type": "string",
                    "description": "Assigned account number for this customer. Required when ..."
                },
                "addressbookList": {
                    "$ref": "#/definitions/CustomerAddressbookList"
                },
                "aging": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here with the balance totals for each aging period."
                },
                "aging1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "aging2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "aging3": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "aging4": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "alcoholRecipientType": {
                    "$ref": "#/definitions/AlcoholRecipientType",
                    "description": "FedEx requires that all packages containing alcohol are declared with the intended recipient type on the shipping note. This preference sets the default type for this customer."
                },
                "altEmail": {
                    "x-displayName": "Alt. Email",
                    "type": "string",
                    "x-sub-format": "Email",
                    "x-samplevalue": "buffon@gmail.com",
                    "description": "Enter an alternative email address for this person."
                },
                "altName": {
                    "type": "string",
                    "x-samplevalue": "BUffon",
                    "description": "This is the name of this person or company."
                },
                "altPhone": {
                    "x-displayName": "Alt. Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-samplevalue": "32432412341",
                    "description": "Phone numbers can be entered in the following formats: 99..."
                },
                "balance": {
                    "x-displayName": "Balance",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01,
                    "description": "Customer's current accounts receivable balance. This field is returned in an advanced search only. It is not returned when using the CustomerSearchBasic search object. Note that in your advanced search you must set the BodyFieldsOnly flag to false. This field is a read-only field. NetSuite converts the balance of all transactions in foreign currencies to your preferred currency using the exchange rate for the current date."
                },
                "billPay": {
                    "x-displayName": "Enable Online Bill Pay",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "When enabled, the companyName, phone, accountNumber field..."
                },
                "buyingReason": {
                    "x-displayName": "Buying Reason",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Choose the prospect or customer's reason for buying from your company. You can create additional options for this field at <_TABNAME=LIST_CRMOTHERLIST_> > <_TASKCATEGORY=LIST_CRMOTHERLIST_> > CRM Lists."
                },
                "buyingTimeFrame": {
                    "x-displayName": "Buying Time Frame",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the time frame for the prospect or customer to purchase. You can create additional options for this field at <_TABNAME=LIST_CRMOTHERLIST_> > <_TASKCATEGORY=LIST_CRMOTHERLIST_> > CRM Lists."
                },
                "campaignCategory": {
                    "x-displayName": "Campaign Category",
                    "x-reference-objectname": "CampaignCategory",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in a user defined list at Setup > Marketing > Campaign Categories. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "category": {
                    "x-displayName": "Category",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in a user defined list at Setup > Acco..."
                },
                "clickStream": {
                    "x-displayName": "Click-Stream (1st Visit)",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "HOME",
                    "description": "Read-only field that returns the click stream for this customer on first visit."
                },
                "comments": {
                    "x-displayName": "Comments",
                    "type": "string",
                    "x-samplevalue": "Good customer",
                    "description": "Enter any other information you wish to track for this customer."
                },
                "companyName": {
                    "x-displayName": "Company Name",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-conditional-required": "Required when billPay is enabled",
                    "x-samplevalue": "Rom31a",
                    "description": "The name of the customer. Required when billPay is enable..."
                },
                "consolAging": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging3": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging4": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The current accounts receivable balance due for the customer-subcustomer hierarchy this customer is a part of is shown here."
                },
                "consolDaysOverdue": {
                    "format": "int32",
                    "type": "integer",
                    "x-samplevalue": 10,
                    "description": "This field shows the number of days overdue the consolidated overdue balance is."
                },
                "consolDepositBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "This field displays the total amount of unapplied deposits for the customer-subcustomer hierarchy this customer is a member of. Deposits are recorded in the general ledger, as a liability, when the customer makes an advance payment before delivery of goods or services. A deposit balance exists until the goods or services are delivered. Deposits do not affect the customer's accounts receivable balance."
                },
                "consolOverdueBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "This field shows the consolidated total owed for open transactions for this customer-subcustomer hierarchy that are past their due date based on the invoice terms. Note: For open transactions that do not have a due date, the transaction date is used as the due date to calculate this total."
                },
                "consolUnbilledOrders": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 0.01,
                    "description": "This field displays the total amount of orders that have been entered but not yet billed for the customer-subcustomer hierarchy this customer is a part of. If you have enabled the preference Customer Credit Limit Includes Orders, then this total is included in credit limit calculations. Set this preference at <_TABNAME=ADMI_ACCTSETUP_> > <_TASKCATEGORY=ADMI_ACCTSETUP_> > Set Up Accounting > General."
                },
                "contactRolesList": {
                    "$ref": "#/definitions/ContactAccessRolesListResponse"
                },
                "contribPct": {
                    "type": "string",
                    "x-samplevalue": "Conrri"
                },
                "creditCardsList": {
                    "$ref": "#/definitions/CustomerCreditCardsListResponse"
                },
                "creditHoldOverride": {
                    "x-displayName": "Hold",
                    "x-readOnly": true,
                    "$ref": "#/definitions/CustomerCreditHoldOverride",
                    "description": "This is a read-only field. Possible values include _auto, _on, and _off."
                },
                "creditLimit": {
                    "x-displayName": "Credit Limit",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000000.01,
                    "description": "A credit limit for this customer. If set, and depending on preferences, a warning is generated when this customer's limit is exceeded during a transaction addition."
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in a user-defined list at Lists > Acco..."
                },
                "currencyList": {
                    "$ref": "#/definitions/CustomerCurrencyListResponse"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldListResponse"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing custom form for this record type. ..."
                },
                "dateCreated": {
                    "x-displayName": "Date Created",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2015-11-20T08:51:34.497Z",
                    "description": "When adding a record, this field defaults to the current system date and time. This field cannot be overwritten. Note: In search, this field respects search criteria down to the second."
                },
                "daysOverdue": {
                    "x-displayName": "Days",
                    "format": "int32",
                    "type": "integer",
                    "x-samplevalue": 2,
                    "description": "The number of days overdue this balance is overdue is shown here."
                },
                "defaultAddress": {
                    "x-displayName": "Address",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "La French de National, Garde de Lyon",
                    "description": "Read-only field that returns the default Billing address ..."
                },
                "defaultOrderPriority": {
                    "x-displayName": "Default Order Priority",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 1,
                    "description": "Enter a number to designate the priority for this customer."
                },
                "depositBalance": {
                    "x-displayName": "Deposit Balance",
                    "x-readOnly": true,
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "x-samplevalue": 0.01,
                    "description": "This field is returned in an advanced search only. It is not returned when using the CustomerSearchBasic search object. Note that in your advanced search you must set the BodyFieldsOnly flag to false. This field is a read-only field"
                },
                "displaySymbol": {
                    "x-displayName": "Currency Symbol",
                    "type": "string",
                    "x-samplevalue": "$",
                    "description": "Enter a currency symbol and text to use for this currency. Include spaces if you want to separate the symbol from the currency value. For example, $ USD or $CAD. Use the Symbol Placement field to select where the symbol appears."
                },
                "downloadList": {
                    "$ref": "#/definitions/CustomerDownloadListResponse"
                },
                "drAccount": {
                    "x-displayName": "Deferred Revenue Reclassification Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the deferred revenue account to use by default to post revenue reclassification amounts generated by revenue reclassification journal entries for this customer. You can override this account on a sales order for this customer."
                },
                "email": {
                    "x-displayName": "{1} Email",
                    "type": "string",
                    "x-sub-format": "Email",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "buggon@gmail.com"
                },
                "emailPreference": {
                    "x-displayName": "Email Preference",
                    "$ref": "#/definitions/EmailPreference",
                    "description": "Reference to a value in a system list. Values: _PDF, _HTM..."
                },
                "emailTransactions": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email &#x2013; Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print &#x2013; Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax &#x2013; Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup > Company > Preferences > Printing, Fax,& Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists > Mass Updates > Mass Updates > General and click Customer."
                },
                "endDate": {
                    "x-displayName": "End Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.497Z",
                    "description": "Projected end date for this customer (used in the case of..."
                },
                "entityId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "somename5",
                    "description": "The name of the customer record. Required on add and upda..."
                },
                "entityStatus": {
                    "x-displayName": "Status",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in the status list defined at Setup > ..."
                },
                "estimatedBudget": {
                    "x-displayName": "Estimated Budget",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 2000000.1,
                    "description": "Enter the estimated budget the prospect or customer has for this opportunity."
                },
                "externalId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "somename5"
                },
                "fax": {
                    "x-displayName": "Fax",
                    "type": "string",
                    "x-samplevalue": "123213123",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "Sets the fax number for the customer."
                },
                "faxTransactions": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email &#x2013; Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print &#x2013; Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax &#x2013; Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup > Company > Preferences > Printing, Fax,& Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists > Mass Updates > Mass Updates > General and click Customer."
                },
                "firstName": {
                    "x-displayName": "First Name",
                    "type": "string",
                    "x-conditional-required": "Required when the isPerson field is set as TRUE.",
                    "x-samplevalue": "1Gi31g",
                    "description": "Required when the isPerson field is set as TRUE designati..."
                },
                "firstVisit": {
                    "x-displayName": "First Visit",
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.496Z",
                    "description": "Read-only field that returns the date the customer first ..."
                },
                "fxAccount": {
                    "x-displayName": "Foreign Currency Adjustment Revenue Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the revenue account to use by default to post foreign currency adjustments that result when exchange rates are different for billing and revenue postings for this customer. You must select an income account. You can override this account on a sales order for this customer."
                },
                "giveAccess": {
                    "x-displayName": "Login Access",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Enables access to your NetSuite account for the customer...."
                },
                "globalSubscriptionStatus": {
                    "$ref": "#/definitions/GlobalSubscriptionStatus",
                    "description": "Email recipients can have one of four subscription statuses: * Confirmed Opt-In - When an email recipient has indicated that they want to receive your campaign and bulk merge email, they are assigned this subscription status. Only a recipient can set his or her subscription status to Confirmed Opt-In. * Soft Opt-In - Recipients with this status can receive opt-in messages that enable them to confirm whether or not they want to receive your email campaigns as well as bulk email. You can set a recipient&#x2019;s status to Soft Opt-In manually or through a mass update. * Soft Opt-Out - Recipients with this status cannot receive campaign or bulk email messages but can receive opt-in messages. You can change this subscription status to Soft Opt-In manually or through a mass update. * Confirmed Opt-Out - Only the recipient can set their subscription status to Confirmed Opt-Out. Recipients with this status cannot receive email campaigns, bulk email, or opt-in messages. Recipients with this status can only opt in again through the Customer Center or by clicking the link in an email message they have received prior to opting out."
                },
                "groupPricingList": {
                    "$ref": "#/definitions/CustomerGroupPricingListResponse"
                },
                "homePhone": {
                    "x-displayName": "Home Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-samplevalue": "12312321321",
                    "description": "Only settable when isPerson is set to TRUE defining this ..."
                },
                "image": {
                    "x-displayName": "Image",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an image file that has already been uploaded t..."
                },
                "internalId": {
                    "type": "string",
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "789878"
                },
                "isBudgetApproved": {
                    "x-displayName": "Budget Approved",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box if the customer's budget has been approved."
                },
                "isInactive": {
                    "type": "boolean",
                    "default": false,
                    "x-samplevalue": true,
                    "description": "This field is false by default."
                },
                "isPerson": {
                    "x-displayName": "Company",
                    "type": "boolean",
                    "default": true,
                    "x-samplevalue": true,
                    "description": "By default, this is set to True which specifies the type ..."
                },
                "itemPricingList": {
                    "$ref": "#/definitions/CustomerItemPricingListResponse"
                },
                "keywords": {
                    "x-displayName": "Search Engine Keywords (1st Visit)",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "Digita1l Cameras",
                    "description": "This is a read-only field that returns the search engine ..."
                },
                "language": {
                    "x-displayName": "Language",
                    "$ref": "#/definitions/Language",
                    "description": "References a value in the Language system list."
                },
                "lastModifiedDate": {
                    "x-displayName": "Last Modified Date",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "x-samplevalue": "2017-11-20T08:51:34.497Z"
                },
                "lastName": {
                    "x-displayName": "Last Name",
                    "type": "string",
                    "x-conditional-required": "Required when the isPerson field is set as TRUE designating this customer as an Individual.",
                    "x-samplevalue": "Buffon",
                    "description": "Required when the isPerson field is set as TRUE designating this customer as an Individual."
                },
                "lastPageVisited": {
                    "x-displayName": "Last Page Visited",
                    "type": "string",
                    "x-samplevalue": "10d1",
                    "description": "This field displays the last page this customer viewed on his or her most recent visit to your Web site."
                },
                "lastVisit": {
                    "x-displayName": "Last Visit",
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.497Z",
                    "description": "Read-only field that returns the date the customer first visited the account website."
                },
                "leadSource": {
                    "x-displayName": "Lead Source",
                    "x-reference-objectname": "LeadSource",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "If the Marketing Automation feature is not enabled, references a value in a user-defined list created by going to Setup > Sales > CRM Lists. Sets how this customer was referred to the organization. For details on how to modify this list via Web services, see &#xfffd;LeadSource&#xfffd; in the Records Guide. (Note: If the Marketing Automation feature is enabled, the lead source list originates from your list of campaigns.) In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "middleName": {
                    "type": "string",
                    "x-samplevalue": "PirloDel",
                    "description": "Only settable when isPerson is set to TRUE defining this customer as an individual."
                },
                "mobilePhone": {
                    "x-displayName": "Mobile Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-samplevalue": "123123213312",
                    "description": "Only settable when isPerson is set to TRUE defining this customer as an individual."
                },
                "monthlyClosing": {
                    "x-displayName": "Closing Date",
                    "$ref": "#/definitions/CustomerMonthlyClosing"
                },
                "negativeNumberFormat": {
                    "x-displayName": "Negative Number Format",
                    "$ref": "#/definitions/CustomerNegativeNumberFormat",
                    "description": "Select the customer&#x2019;s negative number format preference, if any. The format controls whether the negative number is preceded by the minus sign (-) or is enclosed in parentheses ( )."
                },
                "numberFormat": {
                    "x-displayName": "Number Format",
                    "$ref": "#/definitions/CustomerNumberFormat",
                    "description": "Select the customer&#x2019;s positive number format preference, if any. The format controls the thousands separator and decimals display."
                },
                "openingBalance": {
                    "x-displayName": "Opening Balance",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000.1,
                    "description": "Enter the opening balance of this customer's account."
                },
                "openingBalanceAccount": {
                    "x-displayName": "{1} Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the account this opening balance is applied to."
                },
                "openingBalanceDate": {
                    "x-displayName": "{1} Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.497Z",
                    "description": "Enter the date of the balance entered in the Opening Balance field."
                },
                "overdueBalance": {
                    "x-displayName": "Overdue",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 0.1,
                    "description": "This field is returned in an advanced search only. It is not returned when using the CustomerSearchBasic search object. Note that in your advanced search you must set the BodyFieldsOnly flag to false. This field is a read-only field. NetSuite converts the overdue balance of all transactions in foreign currencies to your preferred currency using the exchange rate for the current date."
                },
                "overrideCurrencyFormat": {
                    "x-displayName": "Override Currency Format",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box to customize the currency format."
                },
                "parent": {
                    "x-displayName": "Child Of",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "If this customer is subcustomer of another customer or a smaller entity of another customer, select the larger parent customer here. If you select a parent customer in this field, this record will show indented under the parent customer in the Customers list."
                },
                "partner": {
                    "x-displayName": "Partner",
                    "x-reference-objectname": "Partner",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a partner record. This value sets the partner responsible for referring this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "partnersList": {
                    "$ref": "#/definitions/CustomerPartnersListResponse"
                },
                "password": {
                    "x-displayName": "Password",
                    "type": "string",
                    "x-samplevalue": "fads1234567",
                    "description": "Sets the password assigned to allow this customer access to NetSuite. As of Version 2014 Release 1, the password must be at least 6 characters long. See the topic NetSuite Password Requirements in the NetSuite Help Center for more information."
                },
                "password2": {
                    "x-displayName": "Confirm Password",
                    "type": "string",
                    "x-samplevalue": "fads1234567",
                    "description": "Sets the password confirmation field."
                },
                "phone": {
                    "x-displayName": "Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "123213213312"
                },
                "phoneticName": {
                    "type": "string",
                    "x-samplevalue": "Pirlo",
                    "description": "Enter the furigana character you want to use to sort this record."
                },
                "prefCCProcessor": {
                    "x-displayName": "Preferred Credit Card Processor",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a record at Setup > Company > Credit Card Processors. Sets the credit card processor used to process orders. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "priceLevel": {
                    "x-displayName": "Price Level",
                    "x-reference-objectname": "PriceLevel",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > Price Level. This value sets the price level for selling to this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "printOnCheckAs": {
                    "x-displayName": "Print As",
                    "type": "string",
                    "x-samplevalue": "Pirlfo",
                    "description": "What you enter here prints on the Pay to the Order of line of a check instead of what you entered in the Customer field."
                },
                "printTransactions": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email &#x2013; Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print &#x2013; Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax &#x2013; Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup > Company > Preferences > Printing, Fax,& Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists > Mass Updates > Mass Updates > General and click Customer."
                },
                "receivablesAccount": {
                    "x-displayName": "Default Receivables Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Choose the A/R account to use by default on receivables transactions for this customer. If you select Use System Preference, the account selected at <_TABNAME=ADMI_ACCTSETUP_> > <_TASKCATEGORY=ADMI_ACCTSETUP_> > Accounting Preferences > Items/Transactions in the Default Receivables Account field is used as this customer's default."
                },
                "referrer": {
                    "x-displayName": "Referrer (1st Visit",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "Pirlo",
                    "description": "Read-only field that returns the site that referred the customer to the NetSuite account website."
                },
                "reminderDays": {
                    "x-displayName": "Reminder Days",
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 1,
                    "description": "Sets the number of days before the end date that a reminder should be sent for renewing a customer's contract or project."
                },
                "representingSubsidiary": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Indicates that this entity is an intercompany customer. Select the subsidiary this customer represents as a buyer in intercompany transactions."
                },
                "requirePwdChange": {
                    "x-displayName": "Require Password Change On Next Login",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "This field is only settable on Add. If set to TRUE, the customer is required to change the default password assign on the first login attempt."
                },
                "resaleNumber": {
                    "x-displayName": "Resale Number",
                    "type": "string",
                    "x-samplevalue": "31231",
                    "description": "Customer's tax license number for cases where you do not collect sales tax from this customer because the merchandise will be resold."
                },
                "salesGroup": {
                    "x-displayName": "Choose Team",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "When team selling is enabled, this references a user defined sales team group at Lists > Relationships > Groups. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "salesReadiness": {
                    "x-displayName": "Sales Readiness",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Choose how close the prospect or customer is to purchasing. You can create additional options for this field at <_TABNAME=LIST_CRMOTHERLIST_> > <_TASKCATEGORY=LIST_CRMOTHERLIST_> > CRM Lists."
                },
                "salesRep": {
                    "x-displayName": "Sales Rep",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an employee record. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "salesTeamList": {
                    "$ref": "#/definitions/CustomerSalesTeamListResponse"
                },
                "salutation": {
                    "x-displayName": "Mr./Ms...",
                    "type": "string",
                    "x-samplevalue": "Mr.",
                    "description": "Enter the title of this person, such as Mr., Mrs., Ms., Dr., Rev., etc."
                },
                "sendEmail": {
                    "x-displayName": "Send Notification Email",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "If true, the customer is automatically notified via e-mail when new access to NetSuite is provided."
                },
                "shipComplete": {
                    "x-displayName": "Ship Complete",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box if you only want to ship orders to this customer when they are completely fulfilled."
                },
                "shippingItem": {
                    "x-displayName": "Shipping Item",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in a user-defined list at Lists > Accounting > Shipping Items. This value sets the default shipping method for this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "stage": {
                    "$ref": "#/definitions/CustomerStage",
                    "description": "This is a read only field that references a value in a system list. Possible values include LEAD, PROSPECT or CUSTOMER. This value refers to the stage of customer that is being created and are the values that should be submitted as the internal ID values when performing a search. NetSuite automatically updates the customer stage when certain customer status (entityStatus field) changes occur. For more information, see the section Understanding Customer Stages in the SuiteTalk (Web Services) Records Guide."
                },
                "startDate": {
                    "x-displayName": "Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "2017-11-20T13:30:00+05:30",
                    "description": "Enter the date this person or company became a customer, lead or prospect. If this person or company has a contract with you, enter the start date of the contract. If you enter an estimate or an opportunity for this customer, this field will be updated with the date of that transaction."
                },
                "subscriptionsList": {
                    "$ref": "#/definitions/SubscriptionsListResponse"
                },
                "subsidiary": {
                    "x-reference-objectname": "Subsidiary",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the subsidiary to associate with this entity or job. You cannot enter transactions for this entity or job unless a subsidiary is assigned. If you select this entity on a transaction, the transaction is associated with this subsidiary. The entity is able to access only information associated with this subsidiary. Note: Once a transaction has posted for the entity or job, you are not able to change the subsidiary selected on the entity or job record."
                },
                "symbolPlacement": {
                    "x-displayName": "Symbol Placement",
                    "$ref": "#/definitions/CurrencySymbolPlacement",
                    "description": "Select whether the symbol appears before or after the number."
                },
                "syncPartnerTeams": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box if you want to update this customer's transactions to reflect the changes you make to the partner team."
                },
                "taxExempt": {
                    "x-displayName": "PST Exempt",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "taxItem": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in a user-defined list at Setup > Accounting > Taxes > Tax Codes. This value provides the standard tax rate associated with this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "taxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "True indicates that this customer pays sales tax according to the rate defined in the tax Item field. False indicates that this customer does not pay sales tax, but only if Tax Item field is empty."
                },
                "terms": {
                    "x-displayName": "Terms",
                    "x-reference-objectname": "Term",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > Term. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "territory": {
                    "x-displayName": "Territory",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References a value in a user-defined list at Setup > Sales > Sales Management > Sales Territories. This value sets the sales territory this customer belongs in. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "thirdPartyAcct": {
                    "type": "string",
                    "x-samplevalue": "2132132",
                    "description": "Enter this customer&#x2019;s FedEx&#xae; or UPS&#xae; account number in the 3rd Party Billing Account Number field. This account number is used if you select Consignee Billing on item fulfillments using UPS or select Bill Recipient on item fulfillments using FedEx."
                },
                "thirdPartyCountry": {
                    "$ref": "#/definitions/Country",
                    "description": "Select the country associated with the customer&#x2019;s UPS or FedEx account number."
                },
                "thirdPartyZipcode": {
                    "type": "string",
                    "x-samplevalue": "123123",
                    "description": "Enter the zip code associated with the customer&#x2019;s UPS or FedEx account number."
                },
                "title": {
                    "x-displayName": "Job Title",
                    "type": "string",
                    "x-samplevalue": "SE",
                    "description": "Enter the job title for this person's position at his or her company."
                },
                "unbilledOrders": {
                    "x-displayName": "Unbilled Orders",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 0.1,
                    "description": "This field displays the total amount of orders that have been entered but not yet billed. If you have enabled the preference Customer Credit Limit Includes Orders, then this total is included in credit limit calculations. Set this preference at <_TABNAME=ADMI_ACCTSETUP_> > <_TASKCATEGORY=ADMI_ACCTSETUP_> > Set Up Accounting > General. If you use the Multiple Currencies feature, the amount in this field is shown in the customer's currency."
                },
                "url": {
                    "x-displayName": "URL",
                    "type": "string",
                    "x-samplevalue": "http://www.netsuite.com",
                    "x-sub-format": "Url",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "Sets the URL associated with the customer."
                },
                "vatRegNumber": {
                    "x-displayName": "VAT Registration Number",
                    "type": "string",
                    "x-samplevalue": "123213",
                    "description": "For the UK edition only. Note that this field is not validated when submitted via Web services."
                },
                "visits": {
                    "x-displayName": "Number of Visits",
                    "format": "int32",
                    "type": "integer",
                    "x-samplevalue": 10,
                    "description": "This field displays the total number of visits this customer has made to your Web site. A new visit is counted after the customer leaves your site and returns."
                },
                "webLead": {
                    "x-displayName": "Web Lead",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "Yes",
                    "description": "This is a read-only hidden field that defines whether a customer registered via a NetSuite website. It returns a string of either Yes or No."
                }
            }
        },
        "CustomerPATCH": {
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-searchable-joins": [
                "and"
            ],
            "x-searchable": true,
            "x-vendor-objectname": "Customer",
            "properties": {
                "accessRole": {
                    "x-displayName": "Role",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Users/Roles > Manage Roles. This value sets the role assigned to this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "addressbookList": {
                    "$ref": "#/definitions/CustomerAddressbookListRequest"
                },
                "aging": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here with the balance totals for each aging period."
                },
                "aging1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "aging2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "aging3": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "aging4": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "alcoholRecipientType": {
                    "$ref": "#/definitions/AlcoholRecipientType",
                    "description": "FedEx requires that all packages containing alcohol are declared with the intended recipient type on the shipping note. This preference sets the default type for this customer."
                },
                "altEmail": {
                    "x-displayName": "Alt. Email",
                    "type": "string",
                    "x-samplevalue": "buffon@gmail.com",
                    "description": "Enter an alternative email address for this person."
                },
                "altName": {
                    "type": "string",
                    "x-samplevalue": "BUffon",
                    "description": "This is the name of this person or company."
                },
                "balance": {
                    "x-displayName": "Balance",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000.01,
                    "description": "Customer's current accounts receivable balance. This field is returned in an advanced search only. It is not returned when using the CustomerSearchBasic search object. Note that in your advanced search you must set the BodyFieldsOnly flag to false. This field is a read-only field. NetSuite converts the balance of all transactions in foreign currencies to your preferred currency using the exchange rate for the current date."
                },
                "billPay": {
                    "x-displayName": "Enable Online Bill Pay",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "When enabled, the companyName, phone, accountNumber field..."
                },
                "buyingReason": {
                    "x-displayName": "Buying Reason",
                    "x-readOnly": true,
                    "$ref": "#/definitions/RecordRef",
                    "description": "Choose the prospect or customer's reason for buying from your company. You can create additional options for this field at <_TABNAME=LIST_CRMOTHERLIST_> > <_TASKCATEGORY=LIST_CRMOTHERLIST_> > CRM Lists."
                },
                "buyingTimeFrame": {
                    "x-displayName": "Buying Time Frame",
                    "x-readOnly": true,
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the time frame for the prospect or customer to purchase. You can create additional options for this field at <_TABNAME=LIST_CRMOTHERLIST_> > <_TASKCATEGORY=LIST_CRMOTHERLIST_> > CRM Lists."
                },
                "campaignCategory": {
                    "x-displayName": "Campaign Category",
                    "x-readOnly": true,
                    "x-reference-objectname": "CampaignCategory",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user defined list at Setup > Marketing > Campaign Categories. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "category": {
                    "x-displayName": "Category",
                    "x-readOnly": true,
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user defined list at Setup > Acco..."
                },
                "clickStream": {
                    "x-displayName": "Click-Stream (1st Visit)",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "HOME",
                    "description": "Read-only field that returns the click stream for this customer on first visit."
                },
                "comments": {
                    "x-displayName": "Comments",
                    "type": "string",
                    "x-samplevalue": "Good customer",
                    "description": "Enter any other information you wish to track for this customer."
                },
                "companyName": {
                    "x-displayName": "Company Name",
                    "type": "string",
                    "x-conditional-required": "Required when billPay is enabled",
                    "x-samplevalue": "Gajas Soft",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "The name of the customer. Required when billPay is enable..."
                },
                "consolAging": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging3": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging4": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "contactRolesList": {
                    "$ref": "#/definitions/ContactAccessRolesList"
                },
                "contribPct": {
                    "type": "string",
                    "x-samplevalue": "Conrri"
                },
                "creditCardsList": {
                    "$ref": "#/definitions/CustomerCreditCardsList"
                },
                "creditHoldOverride": {
                    "x-displayName": "Hold",
                    "x-readOnly": true,
                    "$ref": "#/definitions/CustomerCreditHoldOverride",
                    "description": "This is a read-only field. Possible values include _auto, _on, and _off."
                },
                "creditLimit": {
                    "x-displayName": "Credit Limit",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000000.01,
                    "description": "A credit limit for this customer. If set, and depending on preferences, a warning is generated when this customer's limit is exceeded during a transaction addition."
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Lists > Acco..."
                },
                "currencyList": {
                    "$ref": "#/definitions/CustomerCurrencyListPatch"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an existing custom form for this record type. ..."
                },
                "defaultOrderPriority": {
                    "x-displayName": "Default Order Priority",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 1,
                    "description": "Enter a number to designate the priority for this customer."
                },
                "depositBalance": {
                    "x-displayName": "Deposit Balance",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 0.01,
                    "description": "This field is returned in an advanced search only. It is not returned when using the CustomerSearchBasic search object. Note that in your advanced search you must set the BodyFieldsOnly flag to false. This field is a read-only field"
                },
                "displaySymbol": {
                    "x-displayName": "Currency Symbol",
                    "type": "string",
                    "x-samplevalue": "$",
                    "description": "Enter a currency symbol and text to use for this currency. Include spaces if you want to separate the symbol from the currency value. For example, $ USD or $CAD. Use the Symbol Placement field to select where the symbol appears."
                },
                "downloadList": {
                    "$ref": "#/definitions/CustomerDownloadList"
                },
                "drAccount": {
                    "x-displayName": "Deferred Revenue Reclassification Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the deferred revenue account to use by default to post revenue reclassification amounts generated by revenue reclassification journal entries for this customer. You can override this account on a sales order for this customer."
                },
                "email": {
                    "x-displayName": "{1} Email",
                    "type": "string",
                    "x-sub-format": "Email",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "gbuffon@gmail.com"
                },
                "emailPreference": {
                    "x-displayName": "Email Preference",
                    "$ref": "#/definitions/EmailPreference",
                    "description": "Reference to a value in a system list. Values: _PDF, _HTM..."
                },
                "emailTransactions": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email &#x2013; Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print &#x2013; Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax &#x2013; Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup > Company > Preferences > Printing, Fax,& Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists > Mass Updates > Mass Updates > General and click Customer."
                },
                "entityId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "somename5",
                    "description": "The name of the customer record. Required on add and upda..."
                },
                "entityStatus": {
                    "x-displayName": "Status",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in the status list defined at Setup > ..."
                },
                "externalId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "somename5"
                },
                "fax": {
                    "x-displayName": "Fax",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "123213123",
                    "description": "Sets the fax number for the customer."
                },
                "faxTransactions": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email &#x2013; Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print &#x2013; Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax &#x2013; Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup > Company > Preferences > Printing, Fax,& Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists > Mass Updates > Mass Updates > General and click Customer."
                },
                "firstName": {
                    "x-displayName": "First Name",
                    "type": "string",
                    "x-conditional-required": "Required when the isPerson field is set as TRUE.",
                    "x-samplevalue": "Frenchesco",
                    "description": "Required when the isPerson field is set as TRUE designati..."
                },
                "firstVisit": {
                    "x-displayName": "First Visit",
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.496Z",
                    "description": "Read-only field that returns the date the customer first ..."
                },
                "fxAccount": {
                    "x-displayName": "Foreign Currency Adjustment Revenue Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the revenue account to use by default to post foreign currency adjustments that result when exchange rates are different for billing and revenue postings for this customer. You must select an income account. You can override this account on a sales order for this customer."
                },
                "giveAccess": {
                    "x-displayName": "Login Access",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Enables access to your NetSuite account for the customer...."
                },
                "globalSubscriptionStatus": {
                    "$ref": "#/definitions/GlobalSubscriptionStatus",
                    "description": "Email recipients can have one of four subscription statuses: * Confirmed Opt-In - When an email recipient has indicated that they want to receive your campaign and bulk merge email, they are assigned this subscription status. Only a recipient can set his or her subscription status to Confirmed Opt-In. * Soft Opt-In - Recipients with this status can receive opt-in messages that enable them to confirm whether or not they want to receive your email campaigns as well as bulk email. You can set a recipient&#x2019;s status to Soft Opt-In manually or through a mass update. * Soft Opt-Out - Recipients with this status cannot receive campaign or bulk email messages but can receive opt-in messages. You can change this subscription status to Soft Opt-In manually or through a mass update. * Confirmed Opt-Out - Only the recipient can set their subscription status to Confirmed Opt-Out. Recipients with this status cannot receive email campaigns, bulk email, or opt-in messages. Recipients with this status can only opt in again through the Customer Center or by clicking the link in an email message they have received prior to opting out."
                },
                "groupPricingList": {
                    "$ref": "#/definitions/CustomerGroupPricingList"
                },
                "homePhone": {
                    "x-displayName": "Home Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-samplevalue": "12312321321",
                    "description": "Only settable when isPerson is set to TRUE defining this ..."
                },
                "image": {
                    "x-displayName": "Image",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an image file that has already been uploaded t..."
                },
                "internalId": {
                    "type": "string",
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "789878"
                },
                "isInactive": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "This field is false by default."
                },
                "isPerson": {
                    "x-displayName": "Company",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "By default, this is set to True which specifies the type ..."
                },
                "itemPricingList": {
                    "$ref": "#/definitions/CustomerItemPricingListRequest"
                },
                "keywords": {
                    "x-displayName": "Search Engine Keywords (1st Visit)",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "Digita1l Cameras",
                    "description": "This is a read-only field that returns the search engine ..."
                },
                "language": {
                    "x-displayName": "Language",
                    "$ref": "#/definitions/Language",
                    "description": "References a value in the Language system list."
                },
                "lastName": {
                    "x-displayName": "Last Name",
                    "type": "string",
                    "x-conditional-required": "Required when the isPerson field is set as TRUE designating this customer as an Individual.",
                    "x-samplevalue": "Buffon",
                    "description": "Required when the isPerson field is set as TRUE designating this customer as an Individual."
                },
                "lastVisit": {
                    "x-displayName": "Last Visit",
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.497Z",
                    "description": "Read-only field that returns the date the customer first visited the account website."
                },
                "leadSource": {
                    "x-displayName": "Lead Source",
                    "x-reference-objectname": "LeadSource",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If the Marketing Automation feature is not enabled, references a value in a user-defined list created by going to Setup > Sales > CRM Lists. Sets how this customer was referred to the organization. For details on how to modify this list via Web services, see &#xfffd;LeadSource&#xfffd; in the Records Guide. (Note: If the Marketing Automation feature is enabled, the lead source list originates from your list of campaigns.) In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "middleName": {
                    "type": "string",
                    "x-samplevalue": "Pizzaro",
                    "description": "Only settable when isPerson is set to TRUE defining this customer as an individual."
                },
                "mobilePhone": {
                    "x-displayName": "Mobile Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-samplevalue": "123123213312",
                    "description": "Only settable when isPerson is set to TRUE defining this customer as an individual."
                },
                "monthlyClosing": {
                    "x-displayName": "Closing Date",
                    "$ref": "#/definitions/CustomerMonthlyClosing"
                },
                "negativeNumberFormat": {
                    "x-displayName": "Negative Number Format",
                    "$ref": "#/definitions/CustomerNegativeNumberFormat",
                    "description": "Select the customer&#x2019;s negative number format preference, if any. The format controls whether the negative number is preceded by the minus sign (-) or is enclosed in parentheses ( )."
                },
                "numberFormat": {
                    "x-displayName": "Number Format",
                    "$ref": "#/definitions/CustomerNumberFormat",
                    "description": "Select the customer&#x2019;s positive number format preference, if any. The format controls the thousands separator and decimals display."
                },
                "openingBalance": {
                    "x-displayName": "Opening Balance",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000.1,
                    "description": "Enter the opening balance of this customer's account."
                },
                "openingBalanceAccount": {
                    "x-displayName": "{1} Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the account this opening balance is applied to."
                },
                "openingBalanceDate": {
                    "x-displayName": "{1} Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.497Z",
                    "description": "Enter the date of the balance entered in the Opening Balance field."
                },
                "overdueBalance": {
                    "x-displayName": "Overdue",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 0.1,
                    "description": "This field is returned in an advanced search only. It is not returned when using the CustomerSearchBasic search object. Note that in your advanced search you must set the BodyFieldsOnly flag to false. This field is a read-only field. NetSuite converts the overdue balance of all transactions in foreign currencies to your preferred currency using the exchange rate for the current date."
                },
                "overrideCurrencyFormat": {
                    "x-displayName": "Override Currency Format",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box to customize the currency format."
                },
                "parent": {
                    "x-displayName": "Child Of",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If this customer is subcustomer of another customer or a smaller entity of another customer, select the larger parent customer here. If you select a parent customer in this field, this record will show indented under the parent customer in the Customers list."
                },
                "partner": {
                    "x-displayName": "Partner",
                    "x-reference-objectname": "Partner",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a partner record. This value sets the partner responsible for referring this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "partnersList": {
                    "$ref": "#/definitions/CustomerPartnersList"
                },
                "password": {
                    "x-displayName": "Password",
                    "type": "string",
                    "x-samplevalue": "ds1234567",
                    "description": "Sets the password assigned to allow this customer access to NetSuite. As of Version 2014 Release 1, the password must be at least 6 characters long. See the topic NetSuite Password Requirements in the NetSuite Help Center for more information."
                },
                "password2": {
                    "x-displayName": "Confirm Password",
                    "type": "string",
                    "x-samplevalue": "ds1234567",
                    "description": "Sets the password confirmation field."
                },
                "phone": {
                    "x-displayName": "Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-samplevalue": "123213213312"
                },
                "phoneticName": {
                    "type": "string",
                    "x-samplevalue": "Pierlo",
                    "description": "Enter the furigana character you want to use to sort this record."
                },
                "prefCCProcessor": {
                    "x-displayName": "Preferred Credit Card Processor",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a record at Setup > Company > Credit Card Processors. Sets the credit card processor used to process orders. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "priceLevel": {
                    "x-displayName": "Price Level",
                    "x-reference-objectname": "PriceLevel",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > Price Level. This value sets the price level for selling to this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "receivablesAccount": {
                    "x-displayName": "Default Receivables Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Choose the A/R account to use by default on receivables transactions for this customer. If you select Use System Preference, the account selected at <_TABNAME=ADMI_ACCTSETUP_> > <_TASKCATEGORY=ADMI_ACCTSETUP_> > Accounting Preferences > Items/Transactions in the Default Receivables Account field is used as this customer's default."
                },
                "representingSubsidiary": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Indicates that this entity is an intercompany customer. Select the subsidiary this customer represents as a buyer in intercompany transactions."
                },
                "requirePwdChange": {
                    "x-displayName": "Require Password Change On Next Login",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "This field is only settable on Add. If set to TRUE, the customer is required to change the default password assign on the first login attempt."
                },
                "salesGroup": {
                    "x-displayName": "Choose Team",
                    "$ref": "#/definitions/RecordRef",
                    "description": "When team selling is enabled, this references a user defined sales team group at Lists > Relationships > Groups. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "salesRep": {
                    "x-displayName": "Sales Rep",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an employee record. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "salesTeamList": {
                    "$ref": "#/definitions/CustomerSalesTeamList"
                },
                "salutation": {
                    "enum": [
                        "Mr.",
                        "Mrs.",
                        "Ms.",
                        "Dr.",
                        "Rev."
                    ],
                    "x-displayName": "Mr./Ms...",
                    "type": "string",
                    "x-samplevalue": "Mr.",
                    "description": "Enter the title of this person, such as Mr., Mrs., Ms., Dr., Rev., etc."
                },
                "sendEmail": {
                    "x-displayName": "Send Notification Email",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "If true, the customer is automatically notified via e-mail when new access to NetSuite is provided."
                },
                "shipComplete": {
                    "x-displayName": "Ship Complete",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box if you only want to ship orders to this customer when they are completely fulfilled."
                },
                "shippingItem": {
                    "x-displayName": "Shipping Item",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Lists > Accounting > Shipping Items. This value sets the default shipping method for this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "stage": {
                    "$ref": "#/definitions/CustomerStage",
                    "description": "This is a read only field that references a value in a system list. Possible values include LEAD, PROSPECT or CUSTOMER. This value refers to the stage of customer that is being created and are the values that should be submitted as the internal ID values when performing a search. NetSuite automatically updates the customer stage when certain customer status (entityStatus field) changes occur. For more information, see the section Understanding Customer Stages in the SuiteTalk (Web Services) Records Guide."
                },
                "startDate": {
                    "x-displayName": "Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "x-samplevalue": "2017-11-20T13:30:00+05:30",
                    "description": "Enter the date this person or company became a customer, lead or prospect. If this person or company has a contract with you, enter the start date of the contract. If you enter an estimate or an opportunity for this customer, this field will be updated with the date of that transaction."
                },
                "subscriptionsList": {
                    "$ref": "#/definitions/SubscriptionsList"
                },
                "subsidiary": {
                    "x-reference-objectname": "Subsidiary",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the subsidiary to associate with this entity or job. You cannot enter transactions for this entity or job unless a subsidiary is assigned. If you select this entity on a transaction, the transaction is associated with this subsidiary. The entity is able to access only information associated with this subsidiary. Note: Once a transaction has posted for the entity or job, you are not able to change the subsidiary selected on the entity or job record."
                },
                "symbolPlacement": {
                    "x-displayName": "Symbol Placement",
                    "$ref": "#/definitions/CurrencySymbolPlacement",
                    "description": "Select whether the symbol appears before or after the number."
                },
                "syncPartnerTeams": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box if you want to update this customer's transactions to reflect the changes you make to the partner team."
                },
                "taxItem": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Accounting > Taxes > Tax Codes. This value provides the standard tax rate associated with this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "taxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "True indicates that this customer pays sales tax according to the rate defined in the tax Item field. False indicates that this customer does not pay sales tax, but only if Tax Item field is empty."
                },
                "terms": {
                    "x-displayName": "Terms",
                    "x-reference-objectname": "Term",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > Term. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "territory": {
                    "x-displayName": "Territory",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Sales > Sales Management > Sales Territories. This value sets the sales territory this customer belongs in. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "thirdPartyAcct": {
                    "type": "string",
                    "x-samplevalue": "2132132",
                    "description": "Enter this customer&#x2019;s FedEx&#xae; or UPS&#xae; account number in the 3rd Party Billing Account Number field. This account number is used if you select Consignee Billing on item fulfillments using UPS or select Bill Recipient on item fulfillments using FedEx."
                },
                "thirdPartyCountry": {
                    "$ref": "#/definitions/Country",
                    "description": "Select the country associated with the customer&#x2019;s UPS or FedEx account number."
                },
                "thirdPartyZipcode": {
                    "type": "string",
                    "x-samplevalue": "123123",
                    "description": "Enter the zip code associated with the customer&#x2019;s UPS or FedEx account number."
                },
                "title": {
                    "x-displayName": "Job Title",
                    "type": "string",
                    "x-samplevalue": "SE",
                    "description": "Enter the job title for this person's position at his or her company."
                },
                "vatRegNumber": {
                    "x-displayName": "VAT Registration Number",
                    "type": "string",
                    "x-samplevalue": "123213",
                    "description": "For the UK edition only. Note that this field is not validated when submitted via Web services."
                },
                "webLead": {
                    "x-displayName": "Web Lead",
                    "x-readOnly": true,
                    "x-hidden": true,
                    "type": "string",
                    "x-samplevalue": "Yes",
                    "description": "This is a read-only hidden field that defines whether a customer registered via a NetSuite website. It returns a string of either Yes or No."
                }
            }
        },
        "CustomerPOST": {
            "x-has-customfields": true,
            "required": [
                "companyName",
                "lastName",
                "firstName"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-searchable-joins": [
                "and"
            ],
            "x-searchable": true,
            "x-vendor-objectname": "Customer",
            "properties": {
                "accessRole": {
                    "x-displayName": "Role",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Users/Roles > Manage Roles. This value sets the role assigned to this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "addressbookList": {
                    "$ref": "#/definitions/CustomerAddressbookListRequest"
                },
                "aging": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here with the balance totals for each aging period."
                },
                "aging1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "aging2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "aging3": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "aging4": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue A/R balance is shown here."
                },
                "alcoholRecipientType": {
                    "$ref": "#/definitions/AlcoholRecipientType",
                    "description": "FedEx requires that all packages containing alcohol are declared with the intended recipient type on the shipping note. This preference sets the default type for this customer."
                },
                "altEmail": {
                    "x-displayName": "Alt. Email",
                    "type": "string",
                    "x-samplevalue": "buffon@gmail.com",
                    "description": "Enter an alternative email address for this person."
                },
                "altName": {
                    "type": "string",
                    "x-samplevalue": "BUffon",
                    "description": "This is the name of this person or company."
                },
                "balance": {
                    "x-displayName": "Balance",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000.01,
                    "description": "Customer's current accounts receivable balance. This field is returned in an advanced search only. It is not returned when using the CustomerSearchBasic search object. Note that in your advanced search you must set the BodyFieldsOnly flag to false. This field is a read-only field. NetSuite converts the balance of all transactions in foreign currencies to your preferred currency using the exchange rate for the current date."
                },
                "billPay": {
                    "x-displayName": "Enable Online Bill Pay",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "When enabled, the companyName, phone, accountNumber field..."
                },
                "buyingReason": {
                    "x-displayName": "Buying Reason",
                    "x-readOnly": true,
                    "$ref": "#/definitions/RecordRef",
                    "description": "Choose the prospect or customer's reason for buying from your company. You can create additional options for this field at <_TABNAME=LIST_CRMOTHERLIST_> > <_TASKCATEGORY=LIST_CRMOTHERLIST_> > CRM Lists."
                },
                "buyingTimeFrame": {
                    "x-displayName": "Buying Time Frame",
                    "x-readOnly": true,
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the time frame for the prospect or customer to purchase. You can create additional options for this field at <_TABNAME=LIST_CRMOTHERLIST_> > <_TASKCATEGORY=LIST_CRMOTHERLIST_> > CRM Lists."
                },
                "campaignCategory": {
                    "x-displayName": "Campaign Category",
                    "x-readOnly": true,
                    "x-reference-objectname": "CampaignCategory",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user defined list at Setup > Marketing > Campaign Categories. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "category": {
                    "x-displayName": "Category",
                    "x-readOnly": true,
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user defined list at Setup > Acco..."
                },
                "clickStream": {
                    "x-displayName": "Click-Stream (1st Visit)",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "HOME",
                    "description": "Read-only field that returns the click stream for this customer on first visit."
                },
                "comments": {
                    "x-displayName": "Comments",
                    "type": "string",
                    "x-samplevalue": "Good customer",
                    "description": "Enter any other information you wish to track for this customer."
                },
                "companyName": {
                    "x-displayName": "Company Name",
                    "type": "string",
                    "x-conditional-required": "Required when billPay is enabled",
                    "x-samplevalue": "Gajas Soft",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "The name of the customer. Required when billPay is enable..."
                },
                "consolAging": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging3": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolAging4": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The overdue consolidated A/R balance is shown here with the balance totals for each aging period. These totals include the balance from all the customers and subcustomers in this hierarchy."
                },
                "consolBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "The current accounts receivable balance due for the customer-subcustomer hierarchy this customer is a part of is shown here."
                },
                "consolDaysOverdue": {
                    "format": "int32",
                    "type": "integer",
                    "x-samplevalue": 10,
                    "description": "This field shows the number of days overdue the consolidated overdue balance is."
                },
                "consolDepositBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 10.01,
                    "description": "This field displays the total amount of unapplied deposits for the customer-subcustomer hierarchy this customer is a member of. Deposits are recorded in the general ledger, as a liability, when the customer makes an advance payment before delivery of goods or services. A deposit balance exists until the goods or services are delivered. Deposits do not affect the customer's accounts receivable balance."
                },
                "consolOverdueBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 10.01,
                    "description": "This field shows the consolidated total owed for open transactions for this customer-subcustomer hierarchy that are past their due date based on the invoice terms. Note: For open transactions that do not have a due date, the transaction date is used as the due date to calculate this total."
                },
                "consolUnbilledOrders": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 0.01,
                    "description": "This field displays the total amount of orders that have been entered but not yet billed for the customer-subcustomer hierarchy this customer is a part of. If you have enabled the preference Customer Credit Limit Includes Orders, then this total is included in credit limit calculations. Set this preference at <_TABNAME=ADMI_ACCTSETUP_> > <_TASKCATEGORY=ADMI_ACCTSETUP_> > Set Up Accounting > General."
                },
                "contactRolesList": {
                    "$ref": "#/definitions/ContactAccessRolesList"
                },
                "contribPct": {
                    "type": "string",
                    "x-samplevalue": "Conrri"
                },
                "creditCardsList": {
                    "$ref": "#/definitions/CustomerCreditCardsList"
                },
                "creditHoldOverride": {
                    "x-displayName": "Hold",
                    "x-readOnly": true,
                    "$ref": "#/definitions/CustomerCreditHoldOverride",
                    "description": "This is a read-only field. Possible values include _auto, _on, and _off."
                },
                "creditLimit": {
                    "x-displayName": "Credit Limit",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000000.01,
                    "description": "A credit limit for this customer. If set, and depending on preferences, a warning is generated when this customer's limit is exceeded during a transaction addition."
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Lists > Acco..."
                },
                "currencyList": {
                    "$ref": "#/definitions/CustomerCurrencyList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an existing custom form for this record type. ..."
                },
                "daysOverdue": {
                    "x-displayName": "Days",
                    "format": "int32",
                    "type": "integer",
                    "x-samplevalue": 1,
                    "description": "The number of days overdue this balance is overdue is shown here."
                },
                "defaultOrderPriority": {
                    "x-displayName": "Default Order Priority",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 1,
                    "description": "Enter a number to designate the priority for this customer."
                },
                "depositBalance": {
                    "x-displayName": "Deposit Balance",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 0.01,
                    "description": "This field is returned in an advanced search only. It is not returned when using the CustomerSearchBasic search object. Note that in your advanced search you must set the BodyFieldsOnly flag to false. This field is a read-only field"
                },
                "displaySymbol": {
                    "x-displayName": "Currency Symbol",
                    "type": "string",
                    "x-samplevalue": "$",
                    "description": "Enter a currency symbol and text to use for this currency. Include spaces if you want to separate the symbol from the currency value. For example, $ USD or $CAD. Use the Symbol Placement field to select where the symbol appears."
                },
                "downloadList": {
                    "$ref": "#/definitions/CustomerDownloadList"
                },
                "drAccount": {
                    "x-displayName": "Deferred Revenue Reclassification Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the deferred revenue account to use by default to post revenue reclassification amounts generated by revenue reclassification journal entries for this customer. You can override this account on a sales order for this customer."
                },
                "email": {
                    "x-displayName": "{1} Email",
                    "type": "string",
                    "x-sub-format": "Email",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "gbuffon@gmail.com"
                },
                "emailPreference": {
                    "x-displayName": "Email Preference",
                    "$ref": "#/definitions/EmailPreference",
                    "description": "Reference to a value in a system list. Values: _PDF, _HTM..."
                },
                "emailTransactions": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email &#x2013; Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print &#x2013; Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax &#x2013; Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup > Company > Preferences > Printing, Fax,& Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists > Mass Updates > Mass Updates > General and click Customer."
                },
                "entityId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "somename5",
                    "description": "The name of the customer record. Required on add and upda..."
                },
                "entityStatus": {
                    "x-displayName": "Status",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in the status list defined at Setup > ..."
                },
                "externalId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "somename5"
                },
                "fax": {
                    "x-displayName": "Fax",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "123213123",
                    "description": "Sets the fax number for the customer."
                },
                "faxTransactions": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email &#x2013; Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print &#x2013; Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax &#x2013; Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup > Company > Preferences > Printing, Fax,& Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists > Mass Updates > Mass Updates > General and click Customer."
                },
                "firstName": {
                    "x-displayName": "First Name",
                    "type": "string",
                    "x-conditional-required": "Required when the isPerson field is set as TRUE.",
                    "x-samplevalue": "Frenchesco",
                    "description": "Required when the isPerson field is set as TRUE designati..."
                },
                "firstVisit": {
                    "x-displayName": "First Visit",
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.496Z",
                    "description": "Read-only field that returns the date the customer first ..."
                },
                "fxAccount": {
                    "x-displayName": "Foreign Currency Adjustment Revenue Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the revenue account to use by default to post foreign currency adjustments that result when exchange rates are different for billing and revenue postings for this customer. You must select an income account. You can override this account on a sales order for this customer."
                },
                "giveAccess": {
                    "x-displayName": "Login Access",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Enables access to your NetSuite account for the customer...."
                },
                "globalSubscriptionStatus": {
                    "$ref": "#/definitions/GlobalSubscriptionStatus",
                    "description": "Email recipients can have one of four subscription statuses: * Confirmed Opt-In - When an email recipient has indicated that they want to receive your campaign and bulk merge email, they are assigned this subscription status. Only a recipient can set his or her subscription status to Confirmed Opt-In. * Soft Opt-In - Recipients with this status can receive opt-in messages that enable them to confirm whether or not they want to receive your email campaigns as well as bulk email. You can set a recipient&#x2019;s status to Soft Opt-In manually or through a mass update. * Soft Opt-Out - Recipients with this status cannot receive campaign or bulk email messages but can receive opt-in messages. You can change this subscription status to Soft Opt-In manually or through a mass update. * Confirmed Opt-Out - Only the recipient can set their subscription status to Confirmed Opt-Out. Recipients with this status cannot receive email campaigns, bulk email, or opt-in messages. Recipients with this status can only opt in again through the Customer Center or by clicking the link in an email message they have received prior to opting out."
                },
                "groupPricingList": {
                    "$ref": "#/definitions/CustomerGroupPricingList"
                },
                "homePhone": {
                    "x-displayName": "Home Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-samplevalue": "12312321321",
                    "description": "Only settable when isPerson is set to TRUE defining this ..."
                },
                "image": {
                    "x-displayName": "Image",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an image file that has already been uploaded t..."
                },
                "internalId": {
                    "type": "string",
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "789878"
                },
                "isInactive": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "This field is false by default."
                },
                "isPerson": {
                    "x-displayName": "Company",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "By default, this is set to True which specifies the type ..."
                },
                "itemPricingList": {
                    "$ref": "#/definitions/CustomerItemPricingListRequest"
                },
                "keywords": {
                    "x-displayName": "Search Engine Keywords (1st Visit)",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "Digita1l Cameras",
                    "description": "This is a read-only field that returns the search engine ..."
                },
                "language": {
                    "x-displayName": "Language",
                    "$ref": "#/definitions/Language",
                    "description": "References a value in the Language system list."
                },
                "lastName": {
                    "x-displayName": "Last Name",
                    "type": "string",
                    "x-conditional-required": "Required when the isPerson field is set as TRUE designating this customer as an Individual.",
                    "x-samplevalue": "Buffon",
                    "description": "Required when the isPerson field is set as TRUE designating this customer as an Individual."
                },
                "lastPageVisited": {
                    "x-displayName": "Last Page Visited",
                    "type": "string",
                    "x-samplevalue": "10d1",
                    "description": "This field displays the last page this customer viewed on his or her most recent visit to your Web site."
                },
                "lastVisit": {
                    "x-displayName": "Last Visit",
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.497Z",
                    "description": "Read-only field that returns the date the customer first visited the account website."
                },
                "leadSource": {
                    "x-displayName": "Lead Source",
                    "x-reference-objectname": "LeadSource",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If the Marketing Automation feature is not enabled, references a value in a user-defined list created by going to Setup > Sales > CRM Lists. Sets how this customer was referred to the organization. For details on how to modify this list via Web services, see &#xfffd;LeadSource&#xfffd; in the Records Guide. (Note: If the Marketing Automation feature is enabled, the lead source list originates from your list of campaigns.) In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "middleName": {
                    "type": "string",
                    "x-samplevalue": "Pizzaro",
                    "description": "Only settable when isPerson is set to TRUE defining this customer as an individual."
                },
                "mobilePhone": {
                    "x-displayName": "Mobile Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-samplevalue": "123123213312",
                    "description": "Only settable when isPerson is set to TRUE defining this customer as an individual."
                },
                "monthlyClosing": {
                    "x-displayName": "Closing Date",
                    "$ref": "#/definitions/CustomerMonthlyClosing"
                },
                "negativeNumberFormat": {
                    "x-displayName": "Negative Number Format",
                    "$ref": "#/definitions/CustomerNegativeNumberFormat",
                    "description": "Select the customer&#x2019;s negative number format preference, if any. The format controls whether the negative number is preceded by the minus sign (-) or is enclosed in parentheses ( )."
                },
                "numberFormat": {
                    "x-displayName": "Number Format",
                    "$ref": "#/definitions/CustomerNumberFormat",
                    "description": "Select the customer&#x2019;s positive number format preference, if any. The format controls the thousands separator and decimals display."
                },
                "openingBalance": {
                    "x-displayName": "Opening Balance",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000.1,
                    "description": "Enter the opening balance of this customer's account."
                },
                "openingBalanceAccount": {
                    "x-displayName": "{1} Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the account this opening balance is applied to."
                },
                "openingBalanceDate": {
                    "x-displayName": "{1} Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2017-11-20T08:51:34.497Z",
                    "description": "Enter the date of the balance entered in the Opening Balance field."
                },
                "overdueBalance": {
                    "x-displayName": "Overdue",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 0.1,
                    "description": "This field is returned in an advanced search only. It is not returned when using the CustomerSearchBasic search object. Note that in your advanced search you must set the BodyFieldsOnly flag to false. This field is a read-only field. NetSuite converts the overdue balance of all transactions in foreign currencies to your preferred currency using the exchange rate for the current date."
                },
                "overrideCurrencyFormat": {
                    "x-displayName": "Override Currency Format",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box to customize the currency format."
                },
                "parent": {
                    "x-displayName": "Child Of",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If this customer is subcustomer of another customer or a smaller entity of another customer, select the larger parent customer here. If you select a parent customer in this field, this record will show indented under the parent customer in the Customers list."
                },
                "partner": {
                    "x-displayName": "Partner",
                    "x-reference-objectname": "Partner",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a partner record. This value sets the partner responsible for referring this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "partnersList": {
                    "$ref": "#/definitions/CustomerPartnersList"
                },
                "password": {
                    "x-displayName": "Password",
                    "type": "string",
                    "x-samplevalue": "ds1234567",
                    "description": "Sets the password assigned to allow this customer access to NetSuite. As of Version 2014 Release 1, the password must be at least 6 characters long. See the topic NetSuite Password Requirements in the NetSuite Help Center for more information."
                },
                "password2": {
                    "x-displayName": "Confirm Password",
                    "type": "string",
                    "x-samplevalue": "ds1234567",
                    "description": "Sets the password confirmation field."
                },
                "phone": {
                    "x-displayName": "Phone",
                    "type": "string",
                    "x-sub-format": "Phone",
                    "x-samplevalue": "123213213312"
                },
                "phoneticName": {
                    "type": "string",
                    "x-samplevalue": "Pierlo",
                    "description": "Enter the furigana character you want to use to sort this record."
                },
                "prefCCProcessor": {
                    "x-displayName": "Preferred Credit Card Processor",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a record at Setup > Company > Credit Card Processors. Sets the credit card processor used to process orders. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "priceLevel": {
                    "x-displayName": "Price Level",
                    "x-reference-objectname": "PriceLevel",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > Price Level. This value sets the price level for selling to this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "receivablesAccount": {
                    "x-displayName": "Default Receivables Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Choose the A/R account to use by default on receivables transactions for this customer. If you select Use System Preference, the account selected at <_TABNAME=ADMI_ACCTSETUP_> > <_TASKCATEGORY=ADMI_ACCTSETUP_> > Accounting Preferences > Items/Transactions in the Default Receivables Account field is used as this customer's default."
                },
                "referrer": {
                    "x-displayName": "Referrer (1st Visit",
                    "x-readOnly": true,
                    "type": "string",
                    "x-samplevalue": "Zidane",
                    "description": "Read-only field that returns the site that referred the customer to the NetSuite account website."
                },
                "representingSubsidiary": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Indicates that this entity is an intercompany customer. Select the subsidiary this customer represents as a buyer in intercompany transactions."
                },
                "requirePwdChange": {
                    "x-displayName": "Require Password Change On Next Login",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "This field is only settable on Add. If set to TRUE, the customer is required to change the default password assign on the first login attempt."
                },
                "salesGroup": {
                    "x-displayName": "Choose Team",
                    "$ref": "#/definitions/RecordRef",
                    "description": "When team selling is enabled, this references a user defined sales team group at Lists > Relationships > Groups. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "salesRep": {
                    "x-displayName": "Sales Rep",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an employee record. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "salesTeamList": {
                    "$ref": "#/definitions/CustomerSalesTeamList"
                },
                "salutation": {
                    "enum": [
                        "Mr.",
                        "Mrs.",
                        "Ms.",
                        "Dr.",
                        "Rev."
                    ],
                    "x-displayName": "Mr./Ms...",
                    "type": "string",
                    "x-samplevalue": "Mr.",
                    "description": "Enter the title of this person, such as Mr., Mrs., Ms., Dr., Rev., etc."
                },
                "sendEmail": {
                    "x-displayName": "Send Notification Email",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "If true, the customer is automatically notified via e-mail when new access to NetSuite is provided."
                },
                "shipComplete": {
                    "x-displayName": "Ship Complete",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box if you only want to ship orders to this customer when they are completely fulfilled."
                },
                "shippingItem": {
                    "x-displayName": "Shipping Item",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Lists > Accounting > Shipping Items. This value sets the default shipping method for this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "stage": {
                    "$ref": "#/definitions/CustomerStage",
                    "description": "This is a read only field that references a value in a system list. Possible values include LEAD, PROSPECT or CUSTOMER. This value refers to the stage of customer that is being created and are the values that should be submitted as the internal ID values when performing a search. NetSuite automatically updates the customer stage when certain customer status (entityStatus field) changes occur. For more information, see the section Understanding Customer Stages in the SuiteTalk (Web Services) Records Guide."
                },
                "startDate": {
                    "x-displayName": "Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "x-samplevalue": "2017-11-20T13:30:00+05:30",
                    "description": "Enter the date this person or company became a customer, lead or prospect. If this person or company has a contract with you, enter the start date of the contract. If you enter an estimate or an opportunity for this customer, this field will be updated with the date of that transaction."
                },
                "subscriptionsList": {
                    "$ref": "#/definitions/SubscriptionsList"
                },
                "subsidiary": {
                    "x-reference-objectname": "Subsidiary",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the subsidiary to associate with this entity or job. You cannot enter transactions for this entity or job unless a subsidiary is assigned. If you select this entity on a transaction, the transaction is associated with this subsidiary. The entity is able to access only information associated with this subsidiary. Note: Once a transaction has posted for the entity or job, you are not able to change the subsidiary selected on the entity or job record."
                },
                "symbolPlacement": {
                    "x-displayName": "Symbol Placement",
                    "$ref": "#/definitions/CurrencySymbolPlacement",
                    "description": "Select whether the symbol appears before or after the number."
                },
                "syncPartnerTeams": {
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Check this box if you want to update this customer's transactions to reflect the changes you make to the partner team."
                },
                "taxItem": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Accounting > Taxes > Tax Codes. This value provides the standard tax rate associated with this customer. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "taxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "True indicates that this customer pays sales tax according to the rate defined in the tax Item field. False indicates that this customer does not pay sales tax, but only if Tax Item field is empty."
                },
                "terms": {
                    "x-displayName": "Terms",
                    "x-reference-objectname": "Term",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > Term. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "territory": {
                    "x-displayName": "Territory",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value in a user-defined list at Setup > Sales > Sales Management > Sales Territories. This value sets the sales territory this customer belongs in. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide."
                },
                "thirdPartyAcct": {
                    "type": "string",
                    "x-samplevalue": "2132132",
                    "description": "Enter this customer&#x2019;s FedEx&#xae; or UPS&#xae; account number in the 3rd Party Billing Account Number field. This account number is used if you select Consignee Billing on item fulfillments using UPS or select Bill Recipient on item fulfillments using FedEx."
                },
                "thirdPartyCountry": {
                    "$ref": "#/definitions/Country",
                    "description": "Select the country associated with the customer&#x2019;s UPS or FedEx account number."
                },
                "thirdPartyZipcode": {
                    "type": "string",
                    "x-samplevalue": "123123",
                    "description": "Enter the zip code associated with the customer&#x2019;s UPS or FedEx account number."
                },
                "title": {
                    "x-displayName": "Job Title",
                    "type": "string",
                    "x-samplevalue": "SE",
                    "description": "Enter the job title for this person's position at his or her company."
                },
                "unbilledOrders": {
                    "x-displayName": "Unbilled Orders",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 0.1,
                    "description": "This field displays the total amount of orders that have been entered but not yet billed. If you have enabled the preference Customer Credit Limit Includes Orders, then this total is included in credit limit calculations. Set this preference at <_TABNAME=ADMI_ACCTSETUP_> > <_TASKCATEGORY=ADMI_ACCTSETUP_> > Set Up Accounting > General. If you use the Multiple Currencies feature, the amount in this field is shown in the customer's currency."
                },
                "vatRegNumber": {
                    "x-displayName": "VAT Registration Number",
                    "type": "string",
                    "x-samplevalue": "123213",
                    "description": "For the UK edition only. Note that this field is not validated when submitted via Web services."
                },
                "visits": {
                    "x-displayName": "Number of Visits",
                    "format": "int32",
                    "type": "integer",
                    "x-samplevalue": 10,
                    "description": "This field displays the total number of visits this customer has made to your Web site. A new visit is counted after the customer leaves your site and returns."
                },
                "webLead": {
                    "x-displayName": "Web Lead",
                    "x-readOnly": true,
                    "x-hidden": true,
                    "type": "string",
                    "x-samplevalue": "Yes",
                    "description": "This is a read-only hidden field that defines whether a customer registered via a NetSuite website. It returns a string of either Yes or No."
                }
            }
        },
        "CustomerAddressbook": {
            "properties": {
                "addressbookAddress": {
                    "x-displayName": "Edit",
                    "x-reference-objectname": "Address",
                    "$ref": "#/definitions/AddressResponse"
                },
                "defaultBilling": {
                    "x-samplevalue": true,
                    "x-displayName": "Default Billing",
                    "type": "boolean"
                },
                "defaultShipping": {
                    "x-samplevalue": true,
                    "x-displayName": "Default Shipping",
                    "type": "boolean"
                },
                "internalId": {
                    "x-samplevalue": "1",
                    "type": "string"
                },
                "isResidential": {
                    "x-samplevalue": true,
                    "x-displayName": "Residential Address",
                    "type": "boolean"
                },
                "label": {
                    "x-displayName": "Label",
                    "x-samplevalue": "Label",
                    "type": "string"
                }
            }
        },
        "CustomerAddressbookListRequest": {
            "properties": {
                "addressbook": {
                    "items": {
                        "x-reference-objectname": "CustomerAddressbook",
                        "$ref": "#/definitions/CustomerAddressbookRequest"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomerAddressbookList": {
            "properties": {
                "addressbook": {
                    "items": {
                        "x-reference-objectname": "CustomerAddressbook",
                        "$ref": "#/definitions/CustomerAddressbook"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "CustomerCreditCardsResponse": {
            "properties": {
                "cardState": {
                    "x-displayName": "Card State",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "ccDefault": {
                    "x-displayName": "Default Credit Card",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "ccExpireDate": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "11/2028"
                },
                "ccMemo": {
                    "x-displayName": "Memo",
                    "type": "string",
                    "x-samplevalue": "Description memo"
                },
                "ccName": {
                    "x-displayName": "Cardholder Name",
                    "type": "string",
                    "x-samplevalue": "Bastian Schweinsteiger"
                },
                "ccNumber": {
                    "x-displayName": "Credit Card Number",
                    "type": "string",
                    "x-samplevalue": "0987654241234567"
                },
                "debitcardIssueNo": {
                    "x-displayName": "Issue No.",
                    "type": "string",
                    "x-samplevalue": "0987654241234567"
                },
                "internalId": {
                    "x-displayName": "ID",
                    "type": "string",
                    "x-samplevalue": "213123"
                },
                "paymentMethod": {
                    "x-displayName": "Credit Card Type",
                    "x-reference-objectname": "PaymentMethod",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "stateFrom": {
                    "x-displayName": "State From",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "11/2016"
                },
                "validfrom": {
                    "x-displayName": "Valid From / Start Date (MM/YYYY)",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "11/2016"
                }
            }
        },
        "CustomerCreditCards": {
            "properties": {
                "cardState": {
                    "x-displayName": "Card State",
                    "$ref": "#/definitions/RecordRef"
                },
                "ccDefault": {
                    "x-displayName": "Default Credit Card",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "ccExpireDate": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "11/2028"
                },
                "ccMemo": {
                    "x-displayName": "Memo",
                    "type": "string",
                    "x-samplevalue": "Description memo"
                },
                "ccName": {
                    "x-displayName": "Cardholder Name",
                    "type": "string",
                    "x-samplevalue": "Bastian Schweinsteiger"
                },
                "ccNumber": {
                    "x-displayName": "Credit Card Number",
                    "type": "string",
                    "x-samplevalue": "0987654241234567"
                },
                "debitcardIssueNo": {
                    "x-displayName": "Issue No.",
                    "type": "string",
                    "x-samplevalue": "0987654241234567"
                },
                "internalId": {
                    "x-displayName": "ID",
                    "type": "string",
                    "x-samplevalue": "213123"
                },
                "paymentMethod": {
                    "x-displayName": "Credit Card Type",
                    "x-reference-objectname": "PaymentMethod",
                    "$ref": "#/definitions/RecordRef"
                },
                "stateFrom": {
                    "x-displayName": "State From",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "11/2016"
                },
                "validfrom": {
                    "x-displayName": "Valid From / Start Date (MM/YYYY)",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "11/2016"
                }
            }
        },
        "CustomerCreditCardsListResponse": {
            "properties": {
                "creditCards": {
                    "items": {
                        "$ref": "#/definitions/CustomerCreditCardsResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomerCreditCardsList": {
            "properties": {
                "creditCards": {
                    "items": {
                        "$ref": "#/definitions/CustomerCreditCards"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "AlcoholRecipientType": {
            "properties": {
                "value": {
                    "x-samplevalue": "_consumer",
                    "enum": [
                        "_consumer",
                        "_licensee"
                    ],
                    "type": "string"
                }
            }
        },
        "CustomerCreditHoldOverride": {
            "properties": {
                "value": {
                    "x-samplevalue": "_auto",
                    "enum": [
                        "_auto",
                        "_on",
                        "_off"
                    ],
                    "type": "string"
                }
            }
        },
        "CustomerCurrencyResponse": {
            "properties": {
                "balance": {
                    "x-displayName": "Balance",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "consolBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "x-samplevalue": 100.01
                },
                "consolDepositBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "consolOverdueBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "consolUnbilledOrders": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 100.01
                },
                "currency": {
                    "x-displayName": "Currency",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "depositBalance": {
                    "x-displayName": "Deposit Balance",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "x-samplevalue": 100.01
                },
                "displaySymbol": {
                    "x-displayName": "Symbol",
                    "type": "string",
                    "x-samplevalue": "$"
                },
                "overdueBalance": {
                    "x-displayName": "Overdue Balance",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "overrideCurrencyFormat": {
                    "x-displayName": "Override Currency Format{:override default currency format}",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "symbolPlacement": {
                    "x-reference-objectname": "SymbolPlacement",
                    "x-displayName": "Symbol Placement{:where to put the currency symbol, i.e. before or after number}",
                    "$ref": "#/definitions/CurrencySymbolPlacement"
                },
                "unbilledOrders": {
                    "x-displayName": "Unbilled Orders",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 100.01
                }
            }
        },
        "CustomerCurrency": {
            "properties": {
                "balance": {
                    "x-displayName": "Balance",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "consolBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "consolDepositBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "consolOverdueBalance": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "consolUnbilledOrders": {
                    "x-displayName": "Consolidated",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 100.01
                },
                "currency": {
                    "x-displayName": "Currency",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "depositBalance": {
                    "x-displayName": "Deposit Balance",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "x-samplevalue": 100.01
                },
                "displaySymbol": {
                    "x-displayName": "Symbol",
                    "type": "string",
                    "x-samplevalue": "$"
                },
                "overdueBalance": {
                    "x-displayName": "Overdue Balance",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "overrideCurrencyFormat": {
                    "x-displayName": "Override Currency Format{:override default currency format}",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "symbolPlacement": {
                    "x-reference-objectname": "SymbolPlacement",
                    "x-displayName": "Symbol Placement{:where to put the currency symbol, i.e. before or after number}",
                    "$ref": "#/definitions/CurrencySymbolPlacement"
                },
                "unbilledOrders": {
                    "x-displayName": "Unbilled Orders",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 100.01
                }
            }
        },
        "CustomerCurrencyList": {
            "properties": {
                "currency": {
                    "items": {
                        "$ref": "#/definitions/CustomerCurrency"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomerDownloadResponse": {
            "properties": {
                "expiration": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "type": "string",
                    "description": "Sets the date this file will no longer be available for download by the customer.",
                    "x-samplevalue": "2024-12-15T13:30:00+05:30"
                },
                "file": {
                    "x-displayName": "Attach File",
                    "x-reference-objectname": "File",
                    "description": "References an existing file in the system.",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "licenseCode": {
                    "x-displayName": "License Code",
                    "type": "string",
                    "description": "Sets a license code which is then automatically emailed to the customer at the time of download.",
                    "x-samplevalue": "1234213"
                },
                "remainingDownloads": {
                    "x-displayName": "Remaining Downloads",
                    "format": "int64",
                    "description": "Sets the allowable number of downloads.",
                    "type": "integer",
                    "x-samplevalue": 5
                }
            }
        },
        "CustomerDownloadListResponse": {
            "properties": {
                "download": {
                    "items": {
                        "$ref": "#/definitions/CustomerDownloadResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomerDownload": {
            "properties": {
                "expiration": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "description": "Sets the date this file will no longer be available for download by the customer.",
                    "type": "string",
                    "x-samplevalue": "2024-12-15T13:30:00+05:30"
                },
                "file": {
                    "x-displayName": "Attach File",
                    "x-reference-objectname": "File",
                    "description": "\tReferences an existing file in the system.",
                    "$ref": "#/definitions/RecordRef"
                },
                "licenseCode": {
                    "x-displayName": "License Code",
                    "description": "Sets a license code which is then automatically emailed to the customer at the time of download.",
                    "type": "string",
                    "x-samplevalue": "1234213"
                },
                "remainingDownloads": {
                    "x-displayName": "Remaining Downloads",
                    "description": "Sets the allowable number of downloads.",
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 5
                }
            }
        },
        "CustomerDownloadList": {
            "properties": {
                "download": {
                    "items": {
                        "$ref": "#/definitions/CustomerDownload"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomerGroupPricingResponse": {
            "properties": {
                "group": {
                    "x-displayName": "Pricing Group",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "level": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "CustomerGroupPricingListResponse": {
            "properties": {
                "groupPricing": {
                    "items": {
                        "$ref": "#/definitions/CustomerGroupPricingResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "CustomerGroupPricing": {
            "properties": {
                "group": {
                    "x-displayName": "Pricing Group",
                    "$ref": "#/definitions/RecordRef"
                },
                "level": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CustomerGroupPricingList": {
            "properties": {
                "groupPricing": {
                    "items": {
                        "$ref": "#/definitions/CustomerGroupPricing"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "CustomerItemPricingRequest": {
            "properties": {
                "currency": {
                    "x-displayName": "Currency",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "item": {
                    "x-displayName": "Item",
                    "$ref": "#/definitions/RecordRef"
                },
                "level": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CustomerItemPricingResponse": {
            "properties": {
                "currency": {
                    "x-displayName": "Currency",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "item": {
                    "x-displayName": "Item",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "level": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "price": {
                    "x-displayName": "Unit Price",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 10.1
                }
            }
        },
        "CustomerItemPricing": {
            "properties": {
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "item": {
                    "x-displayName": "Item",
                    "$ref": "#/definitions/RecordRef"
                },
                "level": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRef"
                },
                "price": {
                    "x-displayName": "Unit Price",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 10.1
                }
            }
        },
        "CustomerItemPricingListRequest": {
            "properties": {
                "itemPricing": {
                    "items": {
                        "$ref": "#/definitions/CustomerItemPricingRequest"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "CustomerItemPricingListResponse": {
            "properties": {
                "itemPricing": {
                    "items": {
                        "$ref": "#/definitions/CustomerItemPricingResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "CustomerItemPricingList": {
            "properties": {
                "itemPricing": {
                    "items": {
                        "$ref": "#/definitions/CustomerItemPricing"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "CustomerMonthlyClosing": {
            "properties": {
                "value": {
                    "x-samplevalue": "_endOfTheMonth",
                    "enum": [
                        "_one",
                        "_five",
                        "_ten",
                        "_fifteen",
                        "_twenty",
                        "_twentyFive",
                        "_endOfTheMonth"
                    ],
                    "type": "string"
                }
            }
        },
        "CustomerNegativeNumberFormat": {
            "properties": {
                "value": {
                    "x-samplevalue": "_bracketSurrounded",
                    "enum": [
                        "_bracketSurrounded",
                        "_minusSigned"
                    ],
                    "type": "string"
                }
            }
        },
        "CustomerNumberFormat": {
            "properties": {
                "value": {
                    "x-samplevalue": "_spaceAsDigitGroupSeparatorAndDecimalComma",
                    "enum": [
                        "_spaceAsDigitGroupSeparatorAndDecimalComma",
                        "_spaceAsDigitGroupSeparatorAndDecimalPoint",
                        "_commaAsDigitGroupSeparatorAndDecimalPoint",
                        "_pointAsDigitGroupSeparatorAndDecimalComma",
                        "_apostropheAsDigitGroupSeparatorAndDecimalComma",
                        "_apostropheAsDigitGroupSeparatorAndDecimalPoint"
                    ],
                    "type": "string"
                }
            }
        },
        "CustomerPartnersListResponse": {
            "properties": {
                "partners": {
                    "items": {
                        "$ref": "#/definitions/PartnersResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "CustomerPartnersList": {
            "properties": {
                "partners": {
                    "items": {
                        "$ref": "#/definitions/Partners"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "CustomerPaymentApply": {
            "properties": {
                "amount": {
                    "x-displayName": "Payment",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000.01
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "applyDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "type": "string",
                    "x-samplevalue": "USA",
                    "description": "References a value in a user-defined list at Lists > Accounting > Currencies. (Note that the Multiple Currencies feature must be enabled before you can set currency values.)"
                },
                "disc": {
                    "x-displayName": "Disc. Taken",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 200.01
                },
                "discAmt": {
                    "x-displayName": "Disc. Avail.",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "discDate": {
                    "x-displayName": "Disc. Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer",
                    "description": "This field is required and must reference the internal ID of the invoice the customer payment will be applied to."
                },
                "due": {
                    "x-displayName": "Amt. Due",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "job": {
                    "type": "string",
                    "x-samplevalue": "SE"
                },
                "line": {
                    "format": "int64",
                    "type": "integer"
                },
                "refNum": {
                    "x-displayName": "Ref No.",
                    "type": "string",
                    "x-samplevalue": "INV03090415"
                },
                "total": {
                    "x-displayName": "Orig. Amt.",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "Money",
                    "x-samplevalue": 140.01
                },
                "type": {
                    "x-displayName": "Type",
                    "type": "string",
                    "x-samplevalue": "Invoice"
                }
            }
        },
        "CustomerPaymentApplyList": {
            "properties": {
                "apply": {
                    "items": {
                        "$ref": "#/definitions/CustomerPaymentApply"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomerPaymentCredit": {
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Credit",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1000.01
                },
                "appliedTo": {
                    "type": "string",
                    "x-displayName": "Applied To",
                    "x-samplevalue": "ACS"
                },
                "apply": {
                    "type": "boolean",
                    "x-displayName": "Apply",
                    "x-samplevalue": true
                },
                "creditDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Date",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "currency": {
                    "type": "string",
                    "x-displayName": "Currency",
                    "x-samplevalue": "USA",
                    "description": "References a value in a user-defined list at Lists > Accounting > Currencies. (Note that the Multiple Currencies feature must be enabled before you can set currency values.)"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 409,
                    "description": "This field is required and must reference the internal ID of the invoice the customer payment will be applied to."
                },
                "due": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Amount Remaining",
                    "x-sub-format": "Money",
                    "x-samplevalue": 0.01
                },
                "line": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "refNum": {
                    "type": "string",
                    "x-displayName": "Ref No.",
                    "x-samplevalue": "INV03090415"
                },
                "total": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Orig. Amt.",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "type": {
                    "type": "string",
                    "x-displayName": "Type",
                    "x-samplevalue": "Invoice"
                }
            }
        },
        "CustomerPaymentCreditList": {
            "properties": {
                "credit": {
                    "items": {
                        "$ref": "#/definitions/CustomerPaymentCredit"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomerPaymentDeposit": {
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Payment",
                    "x-samplevalue": 1000.01
                },
                "apply": {
                    "type": "boolean",
                    "x-displayName": "Apply",
                    "x-samplevalue": true
                },
                "currency": {
                    "type": "string",
                    "x-displayName": "Currency",
                    "x-samplevalue": "USA",
                    "description": "References a value in a user-defined list at Lists > Accounting > Currencies. (Note that the Multiple Currencies feature must be enabled before you can set currency values.)"
                },
                "depositDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Date",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 409,
                    "description": "This field is required and must reference the internal ID of the invoice the customer payment will be applied to."
                },
                "line": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "refNum": {
                    "type": "string",
                    "x-displayName": "Ref No.",
                    "x-samplevalue": "INF200321"
                },
                "remaining": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Amount Remaining",
                    "x-samplevalue": 0.01
                },
                "total": {
                    "format": "double",
                    "type": "number",
                    "x-displayName": "Orig. Amt.",
                    "x-samplevalue": 40000.01
                }
            }
        },
        "CustomerPaymentDepositList": {
            "properties": {
                "deposit": {
                    "items": {
                        "$ref": "#/definitions/CustomerPaymentDeposit"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CustomerSalesTeamResponse": {
            "properties": {
                "contribution": {
                    "x-samplevalue": 2.01,
                    "description": "Defines the contribution this employee made towards the sale.",
                    "x-displayName": "Contribution %",
                    "format": "double",
                    "type": "number"
                },
                "employee": {
                    "x-displayName": "Employee",
                    "description": "References an existing employee record in the system. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide.",
                    "x-reference-objectname": "Employee",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "isPrimary": {
                    "x-samplevalue": true,
                    "description": "If set to TRUE, this employee is set as the primary contact. Only one employee per customer record can be set as primary. When updating and a new employee is designated as primary, this field will automatically be set to FALSE for the previous employee designated as primary.",
                    "x-displayName": "Primary",
                    "type": "boolean"
                },
                "salesRole": {
                    "x-displayName": "Sales Role",
                    "x-reference-objectname": "SalesRole",
                    "description": "Sets the role as defined in a user defined list. This list can be modified via web services using the SalesRole record. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide.",
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "CustomerSalesTeamListResponse": {
            "properties": {
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                },
                "salesTeam": {
                    "items": {
                        "$ref": "#/definitions/CustomerSalesTeamResponse"
                    },
                    "type": "array"
                }
            }
        },
        "CustomerSalesTeamList": {
            "properties": {
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                },
                "salesTeam": {
                    "items": {
                        "$ref": "#/definitions/CustomerSalesTeam"
                    },
                    "type": "array"
                }
            }
        },
        "CustomerSalesTeam": {
            "properties": {
                "contribution": {
                    "x-samplevalue": 2.01,
                    "description": "Defines the contribution this employee made towards the sale.",
                    "x-displayName": "Contribution %",
                    "format": "double",
                    "type": "number"
                },
                "employee": {
                    "x-displayName": "Employee",
                    "description": "References an existing employee record in the system. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide.",
                    "x-reference-objectname": "Employee",
                    "$ref": "#/definitions/RecordRef"
                },
                "isPrimary": {
                    "x-samplevalue": true,
                    "description": "If set toTRUE, this employee is set as the primary contact. Only one employee per customer record can be set as primary. When updating and a new employee is designated as primary, this field will automatically be set to FALSE for the previous employee designated as primary.",
                    "x-displayName": "Primary",
                    "type": "boolean"
                },
                "salesRole": {
                    "x-displayName": "Sales Role",
                    "description": "\tSets the role as defined in a user defined list. This list can be modified via web services using the SalesRole record. In order to retrieve a list of available values for this field, use the GetSelectValue operation. For more information, see getSelectValue of the Platform Guide.",
                    "x-reference-objectname": "SalesRole",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "CustomerStage": {
            "properties": {
                "value": {
                    "x-samplevalue": "_customer",
                    "enum": [
                        "_customer",
                        "_lead",
                        "_prospect"
                    ],
                    "type": "string"
                }
            }
        },
        "Employee": {
            "required": [
                "firstName",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "IPAddressRule": {
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "accountNumber": {
                    "type": "string"
                },
                "accruedTimeList": {
                    "$ref": "#/definitions/EmployeeAccruedTimeList"
                },
                "addressbookList": {
                    "$ref": "#/definitions/EmployeeAddressbookList"
                },
                "adpId": {
                    "type": "string"
                },
                "altName": {
                    "type": "string"
                },
                "approvalLimit": {
                    "type": "number"
                },
                "approver": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billPay": {
                    "type": "boolean"
                },
                "billingClass": {
                    "$ref": "#/definitions/RecordRef"
                },
                "birthDate": {
                    "format": "date",
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "commissionPaymentPreference": {
                    "$ref": "#/definitions/EmployeeCommissionPaymentPreference"
                },
                "companyContributionList": {
                    "$ref": "#/definitions/EmployeeCompanyContributionList"
                },
                "concurrentWebServicesUser": {
                    "type": "boolean"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "dateCreated": {
                    "format": "date-time",
                    "type": "string"
                },
                "deductionList": {
                    "$ref": "#/definitions/EmployeeDeductionList"
                },
                "defaultAddress": {
                    "type": "string"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "directDeposit": {
                    "type": "boolean"
                },
                "directDepositList": {
                    "$ref": "#/definitions/EmployeeDirectDepositList"
                },
                "earningList": {
                    "$ref": "#/definitions/EmployeeEarningList"
                },
                "eligibleForCommission": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "emergencyContactList": {
                    "$ref": "#/definitions/EmployeeEmergencyContactList"
                },
                "employeeStatus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "employeeType": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entityId": {
                    "type": "string"
                },
                "ethnicity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "expenseLimit": {
                    "type": "number"
                },
                "externalId": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/Gender"
                },
                "giveAccess": {
                    "type": "boolean"
                },
                "globalSubscriptionStatus": {
                    "$ref": "#/definitions/GlobalSubscriptionStatus"
                },
                "hasOfflineAccess": {
                    "type": "boolean"
                },
                "hireDate": {
                    "format": "date",
                    "type": "string"
                },
                "homePhone": {
                    "type": "string"
                },
                "hrEducationList": {
                    "$ref": "#/definitions/EmployeeHrEducationList"
                },
                "image": {
                    "$ref": "#/definitions/RecordRef"
                },
                "inheritIPRules": {
                    "type": "boolean"
                },
                "initials": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "isJobResource": {
                    "type": "boolean"
                },
                "isSalesRep": {
                    "type": "boolean"
                },
                "isSupportRep": {
                    "type": "boolean"
                },
                "jobDescription": {
                    "type": "string"
                },
                "laborCost": {
                    "type": "number"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "lastName": {
                    "type": "string"
                },
                "lastPaidDate": {
                    "format": "date",
                    "type": "string"
                },
                "lastReviewDate": {
                    "format": "date",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "maritalStatus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "middleName": {
                    "type": "string"
                },
                "mobilePhone": {
                    "type": "string"
                },
                "nextReviewDate": {
                    "format": "date",
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "officePhone": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "password2": {
                    "type": "string"
                },
                "payFrequency": {
                    "$ref": "#/definitions/EmployeePayFrequency"
                },
                "phone": {
                    "type": "string"
                },
                "phoneticName": {
                    "type": "string"
                },
                "purchaseOrderApprovalLimit": {
                    "type": "number"
                },
                "purchaseOrderApprover": {
                    "$ref": "#/definitions/RecordRef"
                },
                "purchaseOrderLimit": {
                    "type": "number"
                },
                "releaseDate": {
                    "format": "date",
                    "type": "string"
                },
                "requirePwdChange": {
                    "type": "boolean"
                },
                "rolesList": {
                    "$ref": "#/definitions/EmployeeRolesList"
                },
                "salesRole": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salutation": {
                    "type": "string"
                },
                "sendEmail": {
                    "type": "boolean"
                },
                "socialSecurityNumber": {
                    "type": "string"
                },
                "subscriptionsList": {
                    "$ref": "#/definitions/EmployeeSubscriptionsList"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "supervisor": {
                    "$ref": "#/definitions/RecordRef"
                },
                "template": {
                    "$ref": "#/definitions/RecordRef"
                },
                "timeApprover": {
                    "$ref": "#/definitions/RecordRef"
                },
                "title": {
                    "type": "string"
                },
                "usePerquest": {
                    "type": "boolean"
                },
                "useTimeData": {
                    "$ref": "#/definitions/EmployeeUseTimeData"
                },
                "workCalendar": {
                    "$ref": "#/definitions/RecordRef"
                },
                "workplace": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "EmployeeAccruedTime": {
            "properties": {
                "accrualMethod": {
                    "$ref": "#/definitions/EmployeeAccruedTimeAccrualMethod"
                },
                "accrualRate": {
                    "type": "number"
                },
                "accruedHours": {
                    "type": "number"
                },
                "effectiveDate": {
                    "format": "date",
                    "type": "string"
                },
                "expirationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "inactive": {
                    "type": "boolean"
                },
                "maximumAccruedHours": {
                    "type": "number"
                },
                "monetaryRate": {
                    "type": "number"
                },
                "payrollItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "resetAccruedHoursAtYearEnd": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeAccruedTimeAccrualMethod": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "EmployeeAccruedTimeList": {
            "properties": {
                "employeeAccruedTime": {
                    "items": {
                        "$ref": "#/definitions/EmployeeAccruedTime"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeAddressbook": {
            "properties": {
                "addressbookAddress": {
                    "$ref": "#/definitions/Address"
                },
                "defaultBilling": {
                    "type": "boolean"
                },
                "defaultShipping": {
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "EmployeeAddressbookList": {
            "properties": {
                "addressbook": {
                    "items": {
                        "$ref": "#/definitions/EmployeeAddressbook"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeCommissionPaymentPreference": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "EmployeeCompanyContribution": {
            "properties": {
                "effectiveDate": {
                    "format": "date",
                    "type": "string"
                },
                "expirationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "inactive": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "number"
                },
                "payrollItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "rate": {
                    "type": "string"
                }
            }
        },
        "EmployeeCompanyContributionList": {
            "properties": {
                "employeeCompanyContribution": {
                    "items": {
                        "$ref": "#/definitions/EmployeeCompanyContribution"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeDeduction": {
            "properties": {
                "effectiveDate": {
                    "format": "date",
                    "type": "string"
                },
                "expirationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "inactive": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "number"
                },
                "payrollItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "rate": {
                    "type": "string"
                }
            }
        },
        "EmployeeDeductionList": {
            "properties": {
                "employeeDeduction": {
                    "items": {
                        "$ref": "#/definitions/EmployeeDeduction"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeDirectDeposit": {
            "properties": {
                "accountPrenoted": {
                    "type": "boolean"
                },
                "accountStatus": {
                    "$ref": "#/definitions/EmployeeDirectDepositAccountStatus"
                },
                "amount": {
                    "type": "number"
                },
                "bankAccountNumber": {
                    "type": "string"
                },
                "bankId": {
                    "type": "string"
                },
                "bankName": {
                    "type": "string"
                },
                "bankNumber": {
                    "type": "string"
                },
                "bankRoutingNumber": {
                    "type": "string"
                },
                "id": {
                    "type": "number"
                },
                "inactive": {
                    "type": "boolean"
                },
                "netAccount": {
                    "type": "boolean"
                },
                "savingsAccount": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeDirectDepositAccountStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "EmployeeDirectDepositList": {
            "properties": {
                "employeeDirectDeposit": {
                    "items": {
                        "$ref": "#/definitions/EmployeeDirectDeposit"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeEarning": {
            "properties": {
                "defaultEarning": {
                    "type": "boolean"
                },
                "defaultHours": {
                    "type": "number"
                },
                "effectiveDate": {
                    "format": "date",
                    "type": "string"
                },
                "expirationDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "inactive": {
                    "type": "boolean"
                },
                "payRate": {
                    "type": "string"
                },
                "payrollItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "primaryEarning": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeEarningList": {
            "properties": {
                "employeeEarning": {
                    "items": {
                        "$ref": "#/definitions/EmployeeEarning"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeEmergencyContact": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "contact": {
                    "type": "string"
                },
                "id": {
                    "type": "number"
                },
                "phone": {
                    "type": "string"
                },
                "relationship": {
                    "type": "string"
                }
            }
        },
        "EmployeeEmergencyContactList": {
            "properties": {
                "employeeEmergencyContact": {
                    "items": {
                        "$ref": "#/definitions/EmployeeEmergencyContact"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmployeeHrEducation": {
            "properties": {
                "degree": {
                    "type": "string"
                },
                "degreeDate": {
                    "format": "date",
                    "type": "string"
                },
                "education": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "EmployeeHrEducationList": {
            "properties": {
                "employeeHrEducation": {
                    "items": {
                        "$ref": "#/definitions/EmployeeHrEducation"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "EmployeePayFrequency": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "EmployeeRoles": {
            "properties": {
                "selectedRole": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "EmployeeRolesList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "roles": {
                    "items": {
                        "$ref": "#/definitions/EmployeeRoles"
                    },
                    "type": "array"
                }
            }
        },
        "EmployeeSubscriptions": {
            "properties": {
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "subscribed": {
                    "type": "string"
                },
                "subscription": {
                    "type": "string"
                }
            }
        },
        "EmployeeSubscriptionsList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "subscriptions": {
                    "items": {
                        "$ref": "#/definitions/EmployeeSubscriptions"
                    },
                    "type": "array"
                }
            }
        },
        "EmployeeUseTimeData": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "Gender": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "GiftCertRedemption": {
            "properties": {
                "authCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "authCodeAmtRemaining": {
                    "type": "number"
                },
                "authCodeApplied": {
                    "type": "number"
                },
                "giftCertAvailable": {
                    "type": "number"
                }
            }
        },
        "GiftCertRedemptionList": {
            "properties": {
                "giftCertRedemption": {
                    "items": {
                        "$ref": "#/definitions/GiftCertRedemption"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "HazmatPackingGroup": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_i",
                        "_ii",
                        "_iii"
                    ],
                    "x-sub-format": "enum"
                }
            }
        },
        "IntercoStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "InventoryItemBinNumberResponse": {
            "properties": {
                "onHand": {
                    "x-displayName": "On Hand",
                    "type": "string"
                },
                "onHandAvail": {
                    "type": "string"
                },
                "preferredBin": {
                    "x-displayName": "Preferred (per Location)",
                    "type": "boolean"
                },
                "binNumber": {
                    "x-displayName": "Bin Number",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "InventoryItemBinNumber": {
            "properties": {
                "onHand": {
                    "x-displayName": "On Hand",
                    "type": "string"
                },
                "onHandAvail": {
                    "type": "string"
                },
                "preferredBin": {
                    "x-displayName": "Preferred (per Location)",
                    "type": "boolean"
                },
                "binNumber": {
                    "x-displayName": "Bin Number",
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "InventoryItemBinNumberList": {
            "properties": {
                "binNumber": {
                    "items": {
                        "$ref": "#/definitions/InventoryItemBinNumber"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "InventoryItemFraudRisk": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_high",
                        "_low",
                        "_medium"
                    ]
                }
            }
        },
        "InventoryItemLocationsResponse": {
            "properties": {
                "alternateDemandSourceItem": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "averageCostMli": {
                    "x-displayName": "Average Cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "backwardConsumptionDays": {
                    "x-displayName": "Backward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "buildTime": {
                    "x-displayName": "Work Order Lead Time",
                    "format": "double",
                    "type": "number"
                },
                "cost": {
                    "x-displayName": "Standard Cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "costingLotSize": {
                    "x-displayName": "Costing Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "defaultReturnCost": {
                    "x-displayName": "Default Return Cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "demandSource": {
                    "x-displayName": "Demand Source",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "demandTimeFence": {
                    "x-displayName": "Demand Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "fixedLotSize": {
                    "x-displayName": "Fixed Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "forwardConsumptionDays": {
                    "x-displayName": "Forward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "inventoryCostTemplate": {
                    "x-displayName": "Inventory Cost Template",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "invtClassification": {
                    "x-displayName": "Classification",
                    "$ref": "#/definitions/ItemInvtClassification"
                },
                "invtCountInterval": {
                    "x-displayName": "Count Interval",
                    "format": "int64",
                    "type": "integer"
                },
                "isWip": {
                    "x-displayName": "WIP",
                    "type": "boolean"
                },
                "locationAllowStorePickup": {
                    "type": "boolean"
                },
                "lastInvtCountDate": {
                    "x-displayName": "Last Count Date",
                    "format": "date-time",
                    "type": "string",
                    "x-sub-format": "Date Time - ISO 8601 UTC"
                },
                "lastPurchasePriceMli": {
                    "x-displayName": "Last Purchase Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "leadTime": {
                    "x-displayName": "Lead Time",
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "type": "string",
                    "x-readOnly": true,
                    "x-name": true,
                    "description": "A read-only field that returns the locations as defined in Setup > Company > Classifications > Locations."
                },
                "locationId": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "Location",
                    "description": "Sets the location you are setting this line item for. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "nextInvtCountDate": {
                    "x-displayName": "Next Count Date",
                    "format": "date-time",
                    "type": "string",
                    "x-sub-format": "Date Time - ISO 8601 UTC"
                },
                "onHandValueMli": {
                    "x-displayName": "Value",
                    "format": "double",
                    "x-readOnly": true,
                    "x-sub-format": "Money",
                    "description": "A read-only field that returns the result of Quantity on Hand multiplied by Purchase Price.",
                    "type": "number"
                },
                "periodicLotSizeDays": {
                    "x-displayName": "Periods of Supply Increment",
                    "format": "int64",
                    "type": "integer"
                },
                "periodicLotSizeType": {
                    "x-displayName": "Periods of Supply Type",
                    "$ref": "#/definitions/PeriodicLotSizeType"
                },
                "preferredStockLevel": {
                    "x-displayName": "Preferred Stock Level",
                    "format": "double",
                    "description": "Enter the quantity you prefer to maintain in inventory. NetSuite uses this information to calculate how many items to replenish on the Order Items page.",
                    "type": "number"
                },
                "quantityAvailable": {
                    "x-displayName": "Quantity Available",
                    "format": "double",
                    "type": "number"
                },
                "quantityBackOrdered": {
                    "x-displayName": "Quantity Back Ordered",
                    "format": "double",
                    "x-readOnly": true,
                    "description": "A read-only field that returns the Quantitiy Back Ordered.",
                    "type": "number"
                },
                "quantityCommitted": {
                    "x-displayName": "Quantity Committed",
                    "format": "double",
                    "x-readOnly": true,
                    "description": "\tA read-only field that returns the Quantitiy Committed.",
                    "type": "number"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "description": "Sets the quantity on hand for this item. This is settable only on an add. Otherwise this is a read-only field that provides the known quantity on hand based on items received.",
                    "type": "number"
                },
                "quantityOnOrder": {
                    "x-displayName": "Quantity On Order",
                    "format": "double",
                    "x-readOnly": true,
                    "description": "A read-only field that returns the Quantitiy on Order.",
                    "type": "number"
                },
                "reorderPoint": {
                    "x-displayName": "Reorder Point",
                    "format": "double",
                    "description": "Sets the minimum quantity that when reached triggers a warning to reorder or rebuild this item.",
                    "type": "number"
                },
                "rescheduleInDays": {
                    "x-displayName": "Reschedule In Days",
                    "format": "int64",
                    "type": "integer"
                },
                "rescheduleOutDays": {
                    "x-displayName": "Reschedule Out Days",
                    "format": "int64",
                    "type": "integer"
                },
                "safetyStockLevel": {
                    "x-displayName": "Safety Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "supplyLotSizingMethod": {
                    "x-displayName": "Lot Sizing Method",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "supplyReplenishmentMethod": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "supplyTimeFence": {
                    "x-displayName": "Planning Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "supplyType": {
                    "x-displayName": "Supply Type",
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "InventoryItemLocations": {
            "properties": {
                "alternateDemandSourceItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "averageCostMli": {
                    "x-displayName": "Average Cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "backwardConsumptionDays": {
                    "x-displayName": "Backward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "buildTime": {
                    "x-displayName": "Work Order Lead Time",
                    "format": "double",
                    "type": "number"
                },
                "cost": {
                    "x-displayName": "Standard Cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "costingLotSize": {
                    "x-displayName": "Costing Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "defaultReturnCost": {
                    "x-displayName": "Default Return Cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "demandSource": {
                    "x-displayName": "Demand Source",
                    "$ref": "#/definitions/RecordRef"
                },
                "demandTimeFence": {
                    "x-displayName": "Demand Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "fixedLotSize": {
                    "x-displayName": "Fixed Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "forwardConsumptionDays": {
                    "x-displayName": "Forward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "inventoryCostTemplate": {
                    "x-displayName": "Inventory Cost Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "invtClassification": {
                    "x-displayName": "Classification",
                    "$ref": "#/definitions/ItemInvtClassification"
                },
                "invtCountInterval": {
                    "x-displayName": "Count Interval",
                    "format": "int64",
                    "type": "integer"
                },
                "isWip": {
                    "x-displayName": "WIP",
                    "type": "boolean"
                },
                "locationAllowStorePickup": {
                    "type": "boolean"
                },
                "lastInvtCountDate": {
                    "x-displayName": "Last Count Date",
                    "format": "date-time",
                    "type": "string",
                    "x-sub-format": "Date Time - ISO 8601 UTC"
                },
                "lastPurchasePriceMli": {
                    "x-displayName": "Last Purchase Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "leadTime": {
                    "x-displayName": "Lead Time",
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "type": "string",
                    "x-readOnly": true,
                    "x-name": true,
                    "description": "A read-only field that returns the locations as defined in Setup > Company > Classifications > Locations."
                },
                "locationId": {
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Location",
                    "description": "Sets the location you are setting this line item for. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "nextInvtCountDate": {
                    "x-displayName": "Next Count Date",
                    "format": "date-time",
                    "type": "string",
                    "x-sub-format": "Date Time - ISO 8601 UTC"
                },
                "onHandValueMli": {
                    "x-displayName": "Value",
                    "format": "double",
                    "x-readOnly": true,
                    "x-sub-format": "Money",
                    "description": "A read-only field that returns the result of Quantity on Hand multiplied by Purchase Price.",
                    "type": "number"
                },
                "periodicLotSizeDays": {
                    "x-displayName": "Periods of Supply Increment",
                    "format": "int64",
                    "type": "integer"
                },
                "periodicLotSizeType": {
                    "x-displayName": "Periods of Supply Type",
                    "$ref": "#/definitions/PeriodicLotSizeType"
                },
                "preferredStockLevel": {
                    "x-displayName": "Preferred Stock Level",
                    "format": "double",
                    "description": "Enter the quantity you prefer to maintain in inventory. NetSuite uses this information to calculate how many items to replenish on the Order Items page.",
                    "type": "number"
                },
                "quantityAvailable": {
                    "x-displayName": "Quantity Available",
                    "format": "double",
                    "type": "number"
                },
                "quantityBackOrdered": {
                    "x-displayName": "Quantity Back Ordered",
                    "format": "double",
                    "x-readOnly": true,
                    "description": "A read-only field that returns the Quantitiy Back Ordered.",
                    "type": "number"
                },
                "quantityCommitted": {
                    "x-displayName": "Quantity Committed",
                    "format": "double",
                    "x-readOnly": true,
                    "description": "\tA read-only field that returns the Quantitiy Committed.",
                    "type": "number"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "description": "Sets the quantity on hand for this item. This is settable only on an add. Otherwise this is a read-only field that provides the known quantity on hand based on items received.",
                    "type": "number"
                },
                "quantityOnOrder": {
                    "x-displayName": "Quantity On Order",
                    "format": "double",
                    "x-readOnly": true,
                    "description": "A read-only field that returns the Quantitiy on Order.",
                    "type": "number"
                },
                "reorderPoint": {
                    "x-displayName": "Reorder Point",
                    "format": "double",
                    "description": "Sets the minimum quantity that when reached triggers a warning to reorder or rebuild this item.",
                    "type": "number"
                },
                "rescheduleInDays": {
                    "x-displayName": "Reschedule In Days",
                    "format": "int64",
                    "type": "integer"
                },
                "rescheduleOutDays": {
                    "x-displayName": "Reschedule Out Days",
                    "format": "int64",
                    "type": "integer"
                },
                "safetyStockLevel": {
                    "x-displayName": "Safety Stock Level",
                    "format": "double",
                    "type": "number"
                },
                "supplyLotSizingMethod": {
                    "x-displayName": "Lot Sizing Method",
                    "$ref": "#/definitions/RecordRef"
                },
                "supplyReplenishmentMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "supplyTimeFence": {
                    "x-displayName": "Planning Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "supplyType": {
                    "x-displayName": "Supply Type",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "InventoryItemLocationsListResponse": {
            "properties": {
                "locations": {
                    "items": {
                        "$ref": "#/definitions/InventoryItemLocationsResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "InventoryItemLocationsList": {
            "properties": {
                "locations": {
                    "items": {
                        "$ref": "#/definitions/InventoryItemLocations"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "UpdateInvoice": {
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": true,
            "x-vendor-objectname": "Invoice",
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Account",
                    "description": "Select the Accounts Receivable account that will be affected by this transaction. </P Click New to set up a new account. For details on accounts, go to <_TABNAME=LIST_ACCOUNT_> > <_TASKCATEGORY=LIST_ACCOUNT_> > Chart of Accounts."
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/AccountingBookDetailList"
                },
                "approvalStatus": {
                    "x-displayName": "Approval Status",
                    "$ref": "#/definitions/RecordRef"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the appropriate billing address for this transaction. * Select New to enter a new billing address to be used for this transaction and saved with the associated entity record. * Select Custom to enter a new billing address to be used for this transaction only (and not saved with the associated entity record). * Click the Edit icon to modify an existing billing address."
                },
                "billingAccount": {
                    "x-displayName": "Billing Account",
                    "x-reference-objectname": "BillingAccount",
                    "$ref": "#/definitions/RecordRef"
                },
                "billingAddress": {
                    "$ref": "#/definitions/CreateInvoiceAddress"
                },
                "billingSchedule": {
                    "x-reference-objectname": "BillingSchedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "contribPct": {
                    "type": "string"
                },
                "createdFrom": {
                    "x-displayName": "Created From",
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field shows the sales order this invoice is created from. Click the link to open the sales order."
                },
                "currency": {
                    "x-displayName": "Currency",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you do not use the Multi-Currency Customers feature, the currency of the customer you are creating this transaction for is shown here. If you use the Multi-Currency Customers feature, select the transaction currency you want to create this transaction in. This customer's primary currency is selected by default. If you have already selected items on this transaction, selecting a new currency refreshes them to show the price in the new currency (except for items you entered custom prices for) and recalculates tax and gross profit."
                },
                "currencyName": {
                    "x-displayName": "Currency",
                    "type": "string",
                    "description": "This customer's currency is shown in this field. All currency amounts on this transaction are shown in this currency.",
                    "x-samplevalue": "USA"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you customized an invoice form, select it here, or click New to customize a new invoice form."
                },
                "deferredRevenue": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 0,
                    "x-sub-format": "money",
                    "description": "Deferred Revenue: amount of revenue deferred on this transaction"
                },
                "department": {
                    "x-reference-objectname": "Department",
                    "$ref": "#/definitions/RecordRef"
                },
                "discountItem": {
                    "x-displayName": "Discount",
                    "x-reference-objectname": "DiscountItem",
                    "$ref": "#/definitions/RecordRef",
                    "description": "You can select a discount for this invoice. NetSuite fills the Rate and Discount Total fields based on the discount you choose. Leave this field blank if you do not want to apply a discount to this transaction. To create new discount items, go to <_TABNAME=LIST_ITEM_> > <_TASKCATEGORY=LIST_ITEM_> Items and click New. On the New Item page, click Discount."
                },
                "discountRate": {
                    "x-displayName": "Rate",
                    "type": "string",
                    "x-samplevalue": "-10.00%",
                    "description": "NetSuite enters the rate for the discount item you selected. You can change the discount rate for this cash refund. Enter the discount as a dollar amount like 10.00, or as a percentage like 10%."
                },
                "dueDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">=",
                        "<=",
                        ">",
                        "<"
                    ],
                    "description": "Type or pick the due date for this invoice. If you do not assign a due date, this invoice will not appear on aging reports.",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "email": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-sub-format": "email",
                    "x-samplevalue": "bsharp@christyscatering.com"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the customer for this invoice. Click New to set up a new customer. Go to <_TABNAME=LIST_CUSTJOB_> > <_TASKCATEGORY=LIST_CUSTJOB_> > Customers for details about existing customers."
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "The currency's exchange rate is shown in this field. You can edit the exchange rate for this transaction only, or you can update the currency record with the exchange rate you enter here.",
                    "x-samplevalue": 1.01
                },
                "excludeCommission": {
                    "x-displayName": "Exclude Commissions",
                    "type": "boolean",
                    "description": "Check this option to exclude this transaction and its subordinate transactions from inclusion in all commission calculations.",
                    "x-samplevalue": true
                },
                "expCostDiscAmount": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 11.01,
                    "x-sub-format": "money",
                    "description": "The rate you enter automatically appears here. If you entered a percentage in the Rate field, NetSuite multiplies the discount or markup percentage by the total amount of line items you select."
                },
                "expCostDiscPrint": {
                    "type": "boolean",
                    "description": "Check this box if you added a discount or markup and want to print it on the invoice.",
                    "x-samplevalue": true
                },
                "expCostDiscRate": {
                    "type": "string",
                    "x-samplevalue": "-10.00%",
                    "description": "The rate for the discount or markup item you selected automatically appears here. If you want, enter a new rate. Rates can be entered as dollar amounts and percentages."
                },
                "expCostDiscTax1Amt": {
                    "format": "double",
                    "x-samplevalue": 1,
                    "x-sub-format": "money",
                    "type": "number"
                },
                "expCostDiscTaxable": {
                    "type": "boolean",
                    "description": "Check this box if the expenses you are billing are taxable.",
                    "x-samplevalue": true
                },
                "expCostDiscount": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you want to add a discount or markup to the cost of the expenses you are billing, select it from the list. To see a list of your discounts or markups, go to Lists > Items and select Discount or Markup from the dropdown list at the bottom of the page. To create a new discount or markup, go to Lists > New Item and click Discount or Markup."
                },
                "expCostList": {
                    "$ref": "#/definitions/CreateInvoiceExpCostList"
                },
                "expCostTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "expCostTaxRate1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "NetSuite inserts the GST rate based on the tax code you assigned to this expense. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "expCostTaxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "NetSuite inserts the PST rate based on the tax code you assigned to this expense. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "externalId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "tran2021"
                },
                "fax": {
                    "x-samplevalue": "(415) 6543-1001",
                    "type": "string"
                },
                "giftCertApplied": {
                    "format": "double",
                    "x-samplevalue": 20.01,
                    "type": "number"
                },
                "giftCertRedemptionList": {
                    "$ref": "#/definitions/GiftCertRedemptionList"
                },
                "handlingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "x-samplevalue": "7.00%",
                    "type": "string"
                },
                "handlingTaxCode": {
                    "x-displayName": "Handling Tax Code",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the tax code that determines the tax for handling charges."
                },
                "internalId": {
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "type": "string",
                    "x-samplevalue": "242"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "itemCostDiscPrint": {
                    "type": "boolean",
                    "description": "Check this box if you added a discount or markup and want to print it on the invoice.",
                    "x-samplevalue": true
                },
                "itemCostDiscRate": {
                    "type": "string",
                    "x-samplevalue": "-7.00%",
                    "description": "The rate for the discount or markup item you selected automatically appears here. If you want, enter a new rate. Rates can be entered as dollar amounts and percentages."
                },
                "itemCostDiscTax1Amt": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "x-sub-format": "money"
                },
                "itemCostDiscTaxable": {
                    "type": "boolean",
                    "description": "Check this box if you want the discount or markup you entered to be applied before taxes.",
                    "x-samplevalue": true
                },
                "itemCostDiscount": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you want to add a discount or markup to the cost of the items you are billing, select it from the list. To see a list of your discounts or markups, go to Lists > Items and select Discount or Markup from the dropdown list at the bottom of the page. To create a new discount or markup, go to Lists > New Item and click Discount or Markup."
                },
                "itemCostList": {
                    "$ref": "#/definitions/CreateInvoiceItemCostList"
                },
                "itemCostTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "itemCostTaxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 7.01,
                    "description": "NetSuite inserts the PST rate based on the tax code you assigned to this item. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "itemList": {
                    "$ref": "#/definitions/CreateInvoiceItemList"
                },
                "job": {
                    "x-reference-objectname": "Job",
                    "$ref": "#/definitions/RecordRef"
                },
                "leadSource": {
                    "x-displayName": "Lead Source",
                    "x-reference-objectname": "LeadSource",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the lead source associated with this transaction. If you use the Marketing Automation feature, select the campaign you want to associate with this transaction's revenue."
                },
                "location": {
                    "x-reference-objectname": "Location",
                    "$ref": "#/definitions/RecordRef"
                },
                "message": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "The text of the customer message you select in the Select Message field appears here. You can edit the message or enter a new customer message for only this transaction.",
                    "x-samplevalue": "We appreciate your prompt payment."
                },
                "messageSel": {
                    "x-displayName": "Select Message",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select a customer message to appear on this form. For example, you may add Thank you for your business! Choose from the list of existing customer messages stored in Accounting Lists. The text of the selected message appears in the Customer Message field. In this field, you can optionally edit the message or enter a new customer message for only this transaction. To add messages to appear in the Select Message field, go to <_TABNAME=LIST_ACCOUNTINGOTHERLIST_> > <_TASKCATEGORY=LIST_ACCOUNTINGOTHERLIST_> > Accounting Lists > New, and click Customer Message."
                },
                "nextApprover": {
                    "$ref": "#/definitions/RecordRef"
                },
                "onCreditHold": {
                    "type": "string",
                    "x-samplevalue": "100"
                },
                "opportunity": {
                    "x-displayName": "Opportunity",
                    "x-reference-objectname": "Opportunity",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you are entering this transaction for an opportunity, select the opportunity. You can create opportunity records at <_TABNAME=EDIT_TRAN_OPPRTNTY_> > <_TASKCATEGORY=TRAN_OPPRTNTY_> > Create Opportunities."
                },
                "otherRefNum": {
                    "type": "string",
                    "description": "To make it easy for your customers to locate this invoice in their own records, enter their purchase order number here.",
                    "x-samplevalue": "6489"
                },
                "partner": {
                    "x-displayName": "Partner",
                    "x-reference-objectname": "Partner",
                    "$ref": "#/definitions/RecordRef",
                    "description": "The partner associated with this customer appears in the Partner field. You can change the partner for this transaction."
                },
                "partnersList": {
                    "x-reference-objectname": "PartnerList",
                    "$ref": "#/definitions/InvoicePartnersList"
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the period you want to post this invoice to. If a period is closed, you cannot post to that period."
                },
                "promoCode": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you want to apply a multiple-use coupon code to this transaction, select the promotion here. If you want to apply a single-use coupon code, enter the code in the Coupon Code field. The promotion for that coupon code is shown here. Customers associated with a partner can only use coupon codes from that partner's promotions. If you select a promotion associated with a partner, this transaction is attributed to that partner for reporting purposes. You can choose to have a promotion selected by default at <_TABNAME=TRAN_CAMPAIGNSETUP_> > <_TASKCATEGORY=TRAN_CAMPAIGNSETUP_> > Marketing Preferences in the Default Promotion Code on Sales Transactions field. Create new promotion codes at <_TABNAME=LIST_REFERRALCODE_> > <_TASKCATEGORY=LIST_REFERRALCODE_> > Promotions > New."
                },
                "promotionsList": {
                    "$ref": "#/definitions/PromotionsList"
                },
                "recognizedRevenue": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 20000000.01,
                    "description": "Recognized Revenue: cumulative amount of revenue recognized for this transaction"
                },
                "revRecEndDate": {
                    "x-displayName": "Rev. Rec. End Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2030-10-30T05:28:05.001Z"
                },
                "revRecOnRevCommitment": {
                    "type": "boolean",
                    "description": "Check this check box to create a Revenue Commitment or Revenue Commitment Reversal. * On a Sales Order, the Revenue Commitment replaces an invoice * On a Return Authorization, the Revenue Commitment Reversal replaces a credit memo. NetSuite creates all applicable Revenue Recognition schedules the Revenue Commitment or Revenue Commitment Reversal.",
                    "x-samplevalue": true
                },
                "revRecSchedule": {
                    "x-displayName": "Rev. Rec. Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecStartDate": {
                    "x-displayName": "Rev. Rec. Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-30T05:28:05.001Z"
                },
                "revenueStatus": {
                    "$ref": "#/definitions/RevenueStatus",
                    "description": "The possible values for this field are: 1. Pending: indicates that no recognition has occurred. All revenue is still deferred. 2. In Progress: indicates that some recognition has occurred. 3. Completed: indicates that all recognition has occurred. No deferred revenue remains."
                },
                "salesGroup": {
                    "x-displayName": "Choose Team",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select a sales team to associate with this transaction. To create a sales team, go to <_TABNAME=EDIT_CRMGROUP_> > <_TASKCATEGORY=EDIT_CRMGROUP_> > New > Select Sales Team Members."
                },
                "salesRep": {
                    "x-displayName": "Sales Rep",
                    "$ref": "#/definitions/RecordRef",
                    "description": "NetSuite inserts the sales representative associated with this company on the customer record at Lists > Customers. If a different sales rep is assigned to this transaction, select that sales rep here. To add additional sales reps to this list, go to Lists > New Employee."
                },
                "salesTeamList": {
                    "$ref": "#/definitions/InvoiceSalesTeamList"
                },
                "shipAddressList": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the appropriate shipping address for this transaction. * Select New to enter a new shipping address to be used for this transaction and saved with the associated entity record. * Select Custom to enter a new shipping address to be used for this transaction only (and not saved with the associated entity record). * Click the Edit icon to edit an existing shipping address."
                },
                "shipGroupList": {
                    "$ref": "#/definitions/CreateInvoiceShipGroupList"
                },
                "shipIsResidential": {
                    "x-displayName": "Shipping address is residential",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "shipMethod": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select a shipping method for this order. If you automatically charge for shipping, the shipping amount is entered in the shipping costs field. To automatically charge for shipping, go to <_TABNAME=ADMI_SHIPPING_> > <_TASKCATEGORY=ADMI_SHIPPING_> > Shipping. Check the Charge for Shipping box and click Save. You must also set up the charge details of your shipping items. To add or edit shipping items, go to <_TABNAME=LIST_SHIPITEM_> > <_TASKCATEGORY=LIST_SHIPITEM_> > Shipping Items."
                },
                "shippingAddress": {
                    "$ref": "#/definitions/CreateInvoiceAddress"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 2400.01,
                    "x-sub-format": "money",
                    "description": "The shipping cost automatically calculates depending on the shipping method you select in the Ship Via field above. To change the cost of a shipping method, go to <_TABNAME=LIST_SHIPITEM_> > <_TASKCATEGORY=LIST_SHIPITEM_> > Shipping Items and select the shipping method you want to change. If you use UPS Real-Time rates, shipments over 150lbs are broken up into shipments less than or equal to 150lbs for charging."
                },
                "shippingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "x-samplevalue": "7.00%",
                    "type": "string"
                },
                "shippingTaxCode": {
                    "x-displayName": "Shipping Tax Code",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the tax code that determines the tax charged for shipping."
                },
                "status": {
                    "x-displayName": "Status",
                    "type": "string",
                    "x-samplevalue": "Open"
                },
                "subsidiary": {
                    "x-reference-objectname": "Subsidiary",
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field displays the subsidiary associated with this transaction."
                },
                "syncPartnerTeams": {
                    "type": "boolean",
                    "description": "Check this box if you want to update the sales team on the customer's record with changes you make here.",
                    "x-samplevalue": true
                },
                "syncSalesTeams": {
                    "type": "boolean",
                    "description": "Check this box if you want to update the sales team on the customer's record with changes you make here.",
                    "x-samplevalue": true
                },
                "tax2Total": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 20000.01,
                    "x-sub-format": "money",
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here."
                },
                "taxItem": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef",
                    "description": "A tax item is a tax that you collect at one certain rate and pay to one tax agency for this invoice. NetSuite inserts the tax item for this customer from the record at Lists > Customers. To change it just for this order, select another tax item. To add additional choices to this list, go to Lists > New Item > Sales Tax Item."
                },
                "taxRate": {
                    "format": "double",
                    "type": "number",
                    "description": "NetSuite inserts the percentage rate of the tax item from its record at Lists > Items. You can change it here for just this transaction if you wish.",
                    "x-samplevalue": 8.5
                },
                "taxTotal": {
                    "x-displayName": "Tax",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here.",
                    "x-samplevalue": 6548.4
                },
                "terms": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select discount terms that will apply to this invoice. To add additional choices to this list, go to <_TABNAME=LIST_ACCOUNTINGOTHERLIST_> > <_TASKCATEGORY=LIST_ACCOUNTINGOTHERLIST_> > Accounting Lists > New > Terms."
                },
                "timeDiscPrint": {
                    "type": "boolean",
                    "description": "Check this box if you added a discount or markup and want to print it on the invoice.",
                    "x-samplevalue": true
                },
                "timeDiscRate": {
                    "type": "string",
                    "x-samplevalue": "-8.0%",
                    "description": "The rate for the discount or markup item you selected automatically appears here. If you want, enter a new rate. Rates can be entered as dollar amounts and percentages."
                },
                "timeDiscTax1Amt": {
                    "format": "double",
                    "x-samplevalue": 200.01,
                    "x-sub-format": "money",
                    "type": "number"
                },
                "timeDiscTaxable": {
                    "type": "boolean",
                    "description": "Check this box if you want the discount or markup you entered to be applied before taxes.",
                    "x-samplevalue": true
                },
                "timeDiscount": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you want to add a discount or markup to the cost of the time you are billing, select it from the list. To see a list of your discounts or markups, go to Lists > Items and select Discount or Markup from the dropdown list at the bottom of the page. To create a new discount or markup, go to Lists > New Item and click Discount or Markup."
                },
                "timeList": {
                    "$ref": "#/definitions/CreateInvoiceTimeList"
                },
                "timeTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "timeTaxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 8,
                    "description": "NetSuite inserts the PST rate based on the tax code you assigned to this time. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "toBeEmailed": {
                    "x-displayName": "To Be Emailed",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "When processing individual invoices: * Check the To Be Emailed box if you want to email this invoice. Then enter the email address in the space to the right of the check box. * You can enter multiple email addresses by separating them with a semicolon. It is important to separate the addresses with only a semicolon, and do not include any spaces. When bulk processing invoices: In the To Be Emailed field: * Select Yes if you want to email this form. * Select No if you do not want to email this form. * Select Respect Customer Preference to send the form based on the default preference on the customer record. Set the preference on the Info subtab of a customer record in the Send Transactions Via field.",
                    "x-samplevalue": true
                },
                "toBeFaxed": {
                    "x-displayName": "To Be Faxed",
                    "type": "boolean",
                    "description": "When processing individual invoices: * Check the To Be Faxed box if you want to fax this invoice. Then enter the fax number in the box to the right of the check box if it does not already appear. When bulk processing invoices: In the To Be Faxed field: * Select Yes if you want to fax this form. * Select No if you do not want to fax this form. * Select Respect Customer Preference to send the form based on the default preference on the customer record. Set the preference on the Info subtab of a customer record in the Send Transactions Via field. To fax NetSuite forms, an administrator must first set up fax service at <_TABNAME=ADMI_PRINTING_> > <_TASKCATEGORY=ADMI_PRINTING_> > Printing, Fax and Email Preferences.",
                    "x-samplevalue": true
                },
                "toBePrinted": {
                    "x-displayName": "To Be Printed",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "When processing individual invoices: Check the To Be Printed box if you want to print this invoice. When bulk processing invoices: * Select Yes if you want to save this in a queue of invoices to print. * Select No if you do not want to print this form. * Select Respect Customer Preference to send the form based on the default preference on the customer record. Set the preference on the Info subtab of a customer record in the Send Transactions Via field.",
                    "x-samplevalue": true
                },
                "total": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "description": "NetSuite computes the total of line items, tax and shipping costs, and then enters it here.",
                    "x-samplevalue": 83588.4
                },
                "trackingNumbers": {
                    "x-displayName": "Tracking Numbers",
                    "type": "string",
                    "x-samplevalue": "10232",
                    "description": "Enter the shipment tracking number from the shipping company. If a tracking number is entered in the exact format used by UPS or FedEx and the transaction is saved, the tracking number will show on the transaction as a link to the UPS or FedEx website. You can click the link to check the status of the shipment."
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">=",
                        "<=",
                        ">",
                        "<"
                    ],
                    "description": "NetSuite inserts today's date for the posting date of this invoice. You can type or pick another date. What you enter here determines the date range in which this transaction appears on the Accounts Receivable Register. You can select or enter custom date ranges on registers.",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "tranId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "NetSuite increases the largest invoice number by one. You can type another number. The next invoice number will revert to the standard pattern.",
                    "x-samplevalue": "INV00001027"
                },
                "tranIsVsoeBundle": {
                    "x-displayName": "Transaction Is VSOE Bundle",
                    "type": "boolean",
                    "description": "Check this box to include all items added to this transaction as a VSOE bundle.",
                    "x-samplevalue": true
                },
                "vatRegNum": {
                    "type": "string",
                    "x-samplevalue": "120222"
                },
                "vsoeAutoCalc": {
                    "x-displayName": "Auto Calculate VSOE Allocation",
                    "type": "boolean",
                    "description": "The VSOE allocation amount for a sale can be calculated automatically by checking the Auto Calculate VSOE Allocation box. Allocation is the process to determine the VSOE price for items on a sale. The total VSOE amount allocated is the revenue amount to be recognized for the bundle.",
                    "x-samplevalue": true
                }
            }
        },
        "CreateInvoice": {
            "required": [
                "customForm",
                "location",
                "itemList",
                "entity",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-has-customfields": true,
            "x-vendor-objectname": "Invoice",
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Account",
                    "description": "Select the Accounts Receivable account that will be affected by this transaction. </P Click New to set up a new account. For details on accounts, go to <_TABNAME=LIST_ACCOUNT_> > <_TASKCATEGORY=LIST_ACCOUNT_> > Chart of Accounts."
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/AccountingBookDetailList"
                },
                "amountPaid": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 1440,
                    "description": "Displays the total amount paid for this invoice."
                },
                "amountRemaining": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 0.01,
                    "description": "Displays the total amount due for this invoice."
                },
                "approvalStatus": {
                    "x-displayName": "Approval Status",
                    "$ref": "#/definitions/RecordRef"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the appropriate billing address for this transaction. * Select New to enter a new billing address to be used for this transaction and saved with the associated entity record. * Select Custom to enter a new billing address to be used for this transaction only (and not saved with the associated entity record). * Click the Edit icon to modify an existing billing address."
                },
                "billingAccount": {
                    "x-displayName": "Billing Account",
                    "x-reference-objectname": "BillingAccount",
                    "$ref": "#/definitions/RecordRef"
                },
                "billingAddress": {
                    "$ref": "#/definitions/CreateInvoiceAddress"
                },
                "billingSchedule": {
                    "x-reference-objectname": "BillingSchedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "contribPct": {
                    "type": "string"
                },
                "createdFrom": {
                    "x-displayName": "Created From",
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field shows the sales order this invoice is created from. Click the link to open the sales order."
                },
                "currency": {
                    "x-displayName": "Currency",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you do not use the Multi-Currency Customers feature, the currency of the customer you are creating this transaction for is shown here. If you use the Multi-Currency Customers feature, select the transaction currency you want to create this transaction in. This customer's primary currency is selected by default. If you have already selected items on this transaction, selecting a new currency refreshes them to show the price in the new currency (except for items you entered custom prices for) and recalculates tax and gross profit."
                },
                "currencyName": {
                    "x-displayName": "Currency",
                    "type": "string",
                    "description": "This customer's currency is shown in this field. All currency amounts on this transaction are shown in this currency.",
                    "x-samplevalue": "USA"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you customized an invoice form, select it here, or click New to customize a new invoice form."
                },
                "deferredRevenue": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 0.01,
                    "x-sub-format": "money",
                    "description": "Deferred Revenue: amount of revenue deferred on this transaction"
                },
                "department": {
                    "x-reference-objectname": "Department",
                    "$ref": "#/definitions/RecordRef"
                },
                "discountItem": {
                    "x-displayName": "Discount",
                    "x-reference-objectname": "DiscountItem",
                    "$ref": "#/definitions/RecordRef",
                    "description": "You can select a discount for this invoice. NetSuite fills the Rate and Discount Total fields based on the discount you choose. Leave this field blank if you do not want to apply a discount to this transaction. To create new discount items, go to <_TABNAME=LIST_ITEM_> > <_TASKCATEGORY=LIST_ITEM_> Items and click New. On the New Item page, click Discount."
                },
                "discountRate": {
                    "x-displayName": "Rate",
                    "type": "string",
                    "x-samplevalue": "-10.00%",
                    "description": "NetSuite enters the rate for the discount item you selected. You can change the discount rate for this cash refund. Enter the discount as a dollar amount like 10.00, or as a percentage like 10%."
                },
                "dueDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">=",
                        "<=",
                        ">",
                        "<"
                    ],
                    "description": "Type or pick the due date for this invoice. If you do not assign a due date, this invoice will not appear on aging reports.",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "email": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-sub-format": "email",
                    "x-samplevalue": "bsharp@christyscatering.com"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the customer for this invoice. Click New to set up a new customer. Go to <_TABNAME=LIST_CUSTJOB_> > <_TASKCATEGORY=LIST_CUSTJOB_> > Customers for details about existing customers."
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "The currency's exchange rate is shown in this field. You can edit the exchange rate for this transaction only, or you can update the currency record with the exchange rate you enter here.",
                    "x-samplevalue": 1
                },
                "excludeCommission": {
                    "x-displayName": "Exclude Commissions",
                    "type": "boolean",
                    "description": "Check this option to exclude this transaction and its subordinate transactions from inclusion in all commission calculations.",
                    "x-samplevalue": true
                },
                "expCostDiscAmount": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 11.01,
                    "x-sub-format": "money",
                    "description": "The rate you enter automatically appears here. If you entered a percentage in the Rate field, NetSuite multiplies the discount or markup percentage by the total amount of line items you select."
                },
                "expCostDiscPrint": {
                    "type": "boolean",
                    "description": "Check this box if you added a discount or markup and want to print it on the invoice.",
                    "x-samplevalue": true
                },
                "expCostDiscRate": {
                    "type": "string",
                    "x-samplevalue": "-10.00%",
                    "description": "The rate for the discount or markup item you selected automatically appears here. If you want, enter a new rate. Rates can be entered as dollar amounts and percentages."
                },
                "expCostDiscTax1Amt": {
                    "format": "double",
                    "x-samplevalue": 1.01,
                    "x-sub-format": "money",
                    "type": "number"
                },
                "expCostDiscTaxable": {
                    "type": "boolean",
                    "description": "Check this box if the expenses you are billing are taxable.",
                    "x-samplevalue": true
                },
                "expCostDiscount": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you want to add a discount or markup to the cost of the expenses you are billing, select it from the list. To see a list of your discounts or markups, go to Lists > Items and select Discount or Markup from the dropdown list at the bottom of the page. To create a new discount or markup, go to Lists > New Item and click Discount or Markup."
                },
                "expCostList": {
                    "$ref": "#/definitions/CreateInvoiceExpCostList"
                },
                "expCostTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "expCostTaxRate1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "NetSuite inserts the GST rate based on the tax code you assigned to this expense. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "expCostTaxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "NetSuite inserts the PST rate based on the tax code you assigned to this expense. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "externalId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "tran2021"
                },
                "fax": {
                    "x-samplevalue": "(415) 6543-1001",
                    "type": "string"
                },
                "giftCertApplied": {
                    "format": "double",
                    "x-samplevalue": 20.01,
                    "type": "number"
                },
                "giftCertRedemptionList": {
                    "$ref": "#/definitions/GiftCertRedemptionList"
                },
                "handlingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "x-samplevalue": "7.00%",
                    "type": "string"
                },
                "handlingTaxCode": {
                    "x-displayName": "Handling Tax Code",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the tax code that determines the tax for handling charges."
                },
                "internalId": {
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "type": "string",
                    "x-samplevalue": "242"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "itemCostDiscPrint": {
                    "type": "boolean",
                    "description": "Check this box if you added a discount or markup and want to print it on the invoice.",
                    "x-samplevalue": true
                },
                "itemCostDiscRate": {
                    "type": "string",
                    "x-samplevalue": "-7.00%",
                    "description": "The rate for the discount or markup item you selected automatically appears here. If you want, enter a new rate. Rates can be entered as dollar amounts and percentages."
                },
                "itemCostDiscTax1Amt": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "x-sub-format": "money"
                },
                "itemCostDiscTaxable": {
                    "type": "boolean",
                    "description": "Check this box if you want the discount or markup you entered to be applied before taxes.",
                    "x-samplevalue": true
                },
                "itemCostDiscount": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you want to add a discount or markup to the cost of the items you are billing, select it from the list. To see a list of your discounts or markups, go to Lists > Items and select Discount or Markup from the dropdown list at the bottom of the page. To create a new discount or markup, go to Lists > New Item and click Discount or Markup."
                },
                "itemCostList": {
                    "$ref": "#/definitions/CreateInvoiceItemCostList"
                },
                "itemCostTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "itemCostTaxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 7.01,
                    "description": "NetSuite inserts the PST rate based on the tax code you assigned to this item. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "itemList": {
                    "$ref": "#/definitions/CreateInvoiceItemList"
                },
                "job": {
                    "x-reference-objectname": "Job",
                    "$ref": "#/definitions/RecordRef"
                },
                "leadSource": {
                    "x-displayName": "Lead Source",
                    "x-reference-objectname": "LeadSource",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the lead source associated with this transaction. If you use the Marketing Automation feature, select the campaign you want to associate with this transaction's revenue."
                },
                "location": {
                    "x-reference-objectname": "Location",
                    "$ref": "#/definitions/RecordRef"
                },
                "message": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "The text of the customer message you select in the Select Message field appears here. You can edit the message or enter a new customer message for only this transaction.",
                    "x-samplevalue": "We appreciate your prompt payment."
                },
                "messageSel": {
                    "x-displayName": "Select Message",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select a customer message to appear on this form. For example, you may add Thank you for your business! Choose from the list of existing customer messages stored in Accounting Lists. The text of the selected message appears in the Customer Message field. In this field, you can optionally edit the message or enter a new customer message for only this transaction. To add messages to appear in the Select Message field, go to <_TABNAME=LIST_ACCOUNTINGOTHERLIST_> > <_TASKCATEGORY=LIST_ACCOUNTINGOTHERLIST_> > Accounting Lists > New, and click Customer Message."
                },
                "nextApprover": {
                    "$ref": "#/definitions/RecordRef"
                },
                "onCreditHold": {
                    "type": "string",
                    "x-samplevalue": "100"
                },
                "opportunity": {
                    "x-displayName": "Opportunity",
                    "x-reference-objectname": "Opportunity",
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you are entering this transaction for an opportunity, select the opportunity. You can create opportunity records at <_TABNAME=EDIT_TRAN_OPPRTNTY_> > <_TASKCATEGORY=TRAN_OPPRTNTY_> > Create Opportunities."
                },
                "otherRefNum": {
                    "type": "string",
                    "description": "To make it easy for your customers to locate this invoice in their own records, enter their purchase order number here.",
                    "x-samplevalue": "6489"
                },
                "partner": {
                    "x-displayName": "Partner",
                    "x-reference-objectname": "Partner",
                    "$ref": "#/definitions/RecordRef",
                    "description": "The partner associated with this customer appears in the Partner field. You can change the partner for this transaction."
                },
                "partnersList": {
                    "x-reference-objectname": "PartnerList",
                    "$ref": "#/definitions/InvoicePartnersList"
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the period you want to post this invoice to. If a period is closed, you cannot post to that period."
                },
                "promoCode": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you want to apply a multiple-use coupon code to this transaction, select the promotion here. If you want to apply a single-use coupon code, enter the code in the Coupon Code field. The promotion for that coupon code is shown here. Customers associated with a partner can only use coupon codes from that partner's promotions. If you select a promotion associated with a partner, this transaction is attributed to that partner for reporting purposes. You can choose to have a promotion selected by default at <_TABNAME=TRAN_CAMPAIGNSETUP_> > <_TASKCATEGORY=TRAN_CAMPAIGNSETUP_> > Marketing Preferences in the Default Promotion Code on Sales Transactions field. Create new promotion codes at <_TABNAME=LIST_REFERRALCODE_> > <_TASKCATEGORY=LIST_REFERRALCODE_> > Promotions > New."
                },
                "promotionsList": {
                    "$ref": "#/definitions/PromotionsList"
                },
                "recognizedRevenue": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 20000000.01,
                    "description": "Recognized Revenue: cumulative amount of revenue recognized for this transaction"
                },
                "revRecEndDate": {
                    "x-displayName": "Rev. Rec. End Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2030-10-30T05:28:05.001Z"
                },
                "revRecOnRevCommitment": {
                    "type": "boolean",
                    "description": "Check this check box to create a Revenue Commitment or Revenue Commitment Reversal. * On a Sales Order, the Revenue Commitment replaces an invoice * On a Return Authorization, the Revenue Commitment Reversal replaces a credit memo. NetSuite creates all applicable Revenue Recognition schedules the Revenue Commitment or Revenue Commitment Reversal.",
                    "x-samplevalue": true
                },
                "revRecSchedule": {
                    "x-displayName": "Rev. Rec. Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecStartDate": {
                    "x-displayName": "Rev. Rec. Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-30T05:28:05.001Z"
                },
                "revenueStatus": {
                    "$ref": "#/definitions/RevenueStatus",
                    "description": "The possible values for this field are: 1. Pending: indicates that no recognition has occurred. All revenue is still deferred. 2. In Progress: indicates that some recognition has occurred. 3. Completed: indicates that all recognition has occurred. No deferred revenue remains."
                },
                "salesGroup": {
                    "x-displayName": "Choose Team",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select a sales team to associate with this transaction. To create a sales team, go to <_TABNAME=EDIT_CRMGROUP_> > <_TASKCATEGORY=EDIT_CRMGROUP_> > New > Select Sales Team Members."
                },
                "salesRep": {
                    "x-displayName": "Sales Rep",
                    "$ref": "#/definitions/RecordRef",
                    "description": "NetSuite inserts the sales representative associated with this company on the customer record at Lists > Customers. If a different sales rep is assigned to this transaction, select that sales rep here. To add additional sales reps to this list, go to Lists > New Employee."
                },
                "salesTeamList": {
                    "$ref": "#/definitions/InvoiceSalesTeamList"
                },
                "shipAddressList": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the appropriate shipping address for this transaction. * Select New to enter a new shipping address to be used for this transaction and saved with the associated entity record. * Select Custom to enter a new shipping address to be used for this transaction only (and not saved with the associated entity record). * Click the Edit icon to edit an existing shipping address."
                },
                "shipGroupList": {
                    "$ref": "#/definitions/CreateInvoiceShipGroupList"
                },
                "shipIsResidential": {
                    "x-displayName": "Shipping address is residential",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "shipMethod": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select a shipping method for this order. If you automatically charge for shipping, the shipping amount is entered in the shipping costs field. To automatically charge for shipping, go to <_TABNAME=ADMI_SHIPPING_> > <_TASKCATEGORY=ADMI_SHIPPING_> > Shipping. Check the Charge for Shipping box and click Save. You must also set up the charge details of your shipping items. To add or edit shipping items, go to <_TABNAME=LIST_SHIPITEM_> > <_TASKCATEGORY=LIST_SHIPITEM_> > Shipping Items."
                },
                "shippingAddress": {
                    "$ref": "#/definitions/CreateInvoiceAddress"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 2400.01,
                    "x-sub-format": "money",
                    "description": "The shipping cost automatically calculates depending on the shipping method you select in the Ship Via field above. To change the cost of a shipping method, go to <_TABNAME=LIST_SHIPITEM_> > <_TASKCATEGORY=LIST_SHIPITEM_> > Shipping Items and select the shipping method you want to change. If you use UPS Real-Time rates, shipments over 150lbs are broken up into shipments less than or equal to 150lbs for charging."
                },
                "shippingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "x-samplevalue": "7.00%",
                    "type": "string"
                },
                "shippingTaxCode": {
                    "x-displayName": "Shipping Tax Code",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the tax code that determines the tax charged for shipping."
                },
                "status": {
                    "x-displayName": "Status",
                    "type": "string",
                    "x-samplevalue": "Open"
                },
                "subsidiary": {
                    "x-reference-objectname": "Subsidiary",
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field displays the subsidiary associated with this transaction."
                },
                "syncPartnerTeams": {
                    "type": "boolean",
                    "description": "Check this box if you want to update the sales team on the customer's record with changes you make here.",
                    "x-samplevalue": true
                },
                "syncSalesTeams": {
                    "type": "boolean",
                    "description": "Check this box if you want to update the sales team on the customer's record with changes you make here.",
                    "x-samplevalue": true
                },
                "tax2Total": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 20000.01,
                    "x-sub-format": "money",
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here."
                },
                "taxItem": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef",
                    "description": "A tax item is a tax that you collect at one certain rate and pay to one tax agency for this invoice. NetSuite inserts the tax item for this customer from the record at Lists > Customers. To change it just for this order, select another tax item. To add additional choices to this list, go to Lists > New Item > Sales Tax Item."
                },
                "taxRate": {
                    "format": "double",
                    "type": "number",
                    "description": "NetSuite inserts the percentage rate of the tax item from its record at Lists > Items. You can change it here for just this transaction if you wish.",
                    "x-samplevalue": 8.5
                },
                "taxTotal": {
                    "x-displayName": "Tax",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here.",
                    "x-samplevalue": 6548.4
                },
                "terms": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select discount terms that will apply to this invoice. To add additional choices to this list, go to <_TABNAME=LIST_ACCOUNTINGOTHERLIST_> > <_TASKCATEGORY=LIST_ACCOUNTINGOTHERLIST_> > Accounting Lists > New > Terms."
                },
                "timeDiscPrint": {
                    "type": "boolean",
                    "description": "Check this box if you added a discount or markup and want to print it on the invoice.",
                    "x-samplevalue": true
                },
                "timeDiscRate": {
                    "type": "string",
                    "x-samplevalue": "-8.0%",
                    "description": "The rate for the discount or markup item you selected automatically appears here. If you want, enter a new rate. Rates can be entered as dollar amounts and percentages."
                },
                "timeDiscTax1Amt": {
                    "format": "double",
                    "x-samplevalue": 200,
                    "x-sub-format": "money",
                    "type": "number"
                },
                "timeDiscTaxable": {
                    "type": "boolean",
                    "description": "Check this box if you want the discount or markup you entered to be applied before taxes.",
                    "x-samplevalue": true
                },
                "timeDiscount": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "If you want to add a discount or markup to the cost of the time you are billing, select it from the list. To see a list of your discounts or markups, go to Lists > Items and select Discount or Markup from the dropdown list at the bottom of the page. To create a new discount or markup, go to Lists > New Item and click Discount or Markup."
                },
                "timeList": {
                    "$ref": "#/definitions/CreateInvoiceTimeList"
                },
                "timeTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "timeTaxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 8.01,
                    "description": "NetSuite inserts the PST rate based on the tax code you assigned to this time. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "toBeEmailed": {
                    "x-displayName": "To Be Emailed",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "When processing individual invoices: * Check the To Be Emailed box if you want to email this invoice. Then enter the email address in the space to the right of the check box. * You can enter multiple email addresses by separating them with a semicolon. It is important to separate the addresses with only a semicolon, and do not include any spaces. When bulk processing invoices: In the To Be Emailed field: * Select Yes if you want to email this form. * Select No if you do not want to email this form. * Select Respect Customer Preference to send the form based on the default preference on the customer record. Set the preference on the Info subtab of a customer record in the Send Transactions Via field.",
                    "x-samplevalue": true
                },
                "toBeFaxed": {
                    "x-displayName": "To Be Faxed",
                    "type": "boolean",
                    "description": "When processing individual invoices: * Check the To Be Faxed box if you want to fax this invoice. Then enter the fax number in the box to the right of the check box if it does not already appear. When bulk processing invoices: In the To Be Faxed field: * Select Yes if you want to fax this form. * Select No if you do not want to fax this form. * Select Respect Customer Preference to send the form based on the default preference on the customer record. Set the preference on the Info subtab of a customer record in the Send Transactions Via field. To fax NetSuite forms, an administrator must first set up fax service at <_TABNAME=ADMI_PRINTING_> > <_TASKCATEGORY=ADMI_PRINTING_> > Printing, Fax and Email Preferences.",
                    "x-samplevalue": true
                },
                "toBePrinted": {
                    "x-displayName": "To Be Printed",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "When processing individual invoices: Check the To Be Printed box if you want to print this invoice. When bulk processing invoices: * Select Yes if you want to save this in a queue of invoices to print. * Select No if you do not want to print this form. * Select Respect Customer Preference to send the form based on the default preference on the customer record. Set the preference on the Info subtab of a customer record in the Send Transactions Via field.",
                    "x-samplevalue": true
                },
                "total": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "description": "NetSuite computes the total of line items, tax and shipping costs, and then enters it here.",
                    "x-samplevalue": 83588.4
                },
                "trackingNumbers": {
                    "x-displayName": "Tracking Numbers",
                    "type": "string",
                    "x-samplevalue": "10232",
                    "description": "Enter the shipment tracking number from the shipping company. If a tracking number is entered in the exact format used by UPS or FedEx and the transaction is saved, the tracking number will show on the transaction as a link to the UPS or FedEx website. You can click the link to check the status of the shipment."
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">=",
                        "<=",
                        ">",
                        "<"
                    ],
                    "description": "NetSuite inserts today's date for the posting date of this invoice. You can type or pick another date. What you enter here determines the date range in which this transaction appears on the Accounts Receivable Register. You can select or enter custom date ranges on registers.",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "tranId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "NetSuite increases the largest invoice number by one. You can type another number. The next invoice number will revert to the standard pattern.",
                    "x-samplevalue": "INV00001027"
                },
                "tranIsVsoeBundle": {
                    "x-displayName": "Transaction Is VSOE Bundle",
                    "type": "boolean",
                    "description": "Check this box to include all items added to this transaction as a VSOE bundle.",
                    "x-samplevalue": true
                },
                "vatRegNum": {
                    "type": "string",
                    "x-samplevalue": "120222"
                },
                "vsoeAutoCalc": {
                    "x-displayName": "Auto Calculate VSOE Allocation",
                    "type": "boolean",
                    "description": "The VSOE allocation amount for a sale can be calculated automatically by checking the Auto Calculate VSOE Allocation box. Allocation is the process to determine the VSOE price for items on a sale. The total VSOE amount allocated is the revenue amount to be recognized for the bundle.",
                    "x-samplevalue": true
                }
            }
        },
        "CreateInvoiceExpCost": {
            "properties": {}
        },
        "InvoiceExpCostResponse": {
            "properties": {
                "_class": {
                    "type": "string"
                },
                "amount": {
                    "x-displayName": "Bill Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 50000.01
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "billedDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-31T12:30:00+05:30"
                },
                "categoryDisp": {
                    "x-displayName": "Category",
                    "type": "string"
                },
                "department": {
                    "type": "string",
                    "x-samplevalue": "Marketing"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 409
                },
                "employeeDisp": {
                    "x-displayName": "Employee",
                    "type": "string",
                    "x-samplevalue": "SE"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 10000.01
                },
                "jobDisp": {
                    "type": "string",
                    "x-samplevalue": "Data Analyst"
                },
                "line": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "location": {
                    "type": "string",
                    "x-samplevalue": "01: San Francisco"
                },
                "memo": {
                    "x-displayName": "Memo",
                    "type": "string",
                    "x-samplevalue": "Invoice cost expense."
                },
                "originalAmount": {
                    "x-displayName": "Original Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 1500.01
                },
                "revRecEndDate": {
                    "x-displayName": "Rev. Rec. End Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-31T12:30:00+05:30"
                },
                "revRecSchedule": {
                    "x-displayName": "Rev. Rec. Schedule",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "revRecStartDate": {
                    "x-displayName": "Rev. Rec. Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-31T12:30:00+05:30"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 150.01
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 18.01
                },
                "taxableDisp": {
                    "x-displayName": "Taxable",
                    "type": "string",
                    "x-samplevalue": "GST Cess"
                }
            }
        },
        "Invoice": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Invoice",
            "x-has-customfields": true,
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "properties": {
                "accountingBookDetailList": {
                    "$ref": "#/definitions/AccountingBookDetailListResponse"
                },
                "internalId": {
                    "x-samplevalue": "8344",
                    "type": "string"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "Account",
                    "description": "Select the Accounts Receivable account that will be affected by this transaction. </P Click New to set up a new account. For details on accounts, go to <_TABNAME=LIST_ACCOUNT_> > <_TASKCATEGORY=LIST_ACCOUNT_> > Chart of Accounts."
                },
                "altHandlingCost": {
                    "x-displayName": "Handling Cost",
                    "description": "The handling cost automatically calculates depending on the shipping method you select in the Ship Via field. To change the cost of handling, go to Lists > Shipping Items and select the shipping method with the handling cost you want to change.",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 100.01
                },
                "altShippingCost": {
                    "x-displayName": "Shipping cost",
                    "description": "The shipping cost automatically calculates depending on the shipping method you select in the Ship Via field above. To change the cost of a shipping method, go to Lists > Shipping Items and select the shipping method you want to change. If you use UPS Real-Time rates, shipments over 150lbs are broken up into shipments less than or equal to 150lbs for charging.",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 100.01
                },
                "amountPaid": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 1440.01,
                    "description": "Displays the total amount paid for this invoice."
                },
                "amountRemaining": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 0.01,
                    "description": "Displays the total amount due for this invoice."
                },
                "approvalStatus": {
                    "x-displayName": "Approval Status",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "balance": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 0.01,
                    "description": "Displays the total amount due for this invoice."
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "billingAccount": {
                    "x-displayName": "Billing Account",
                    "x-reference-objectname": "BillingAccount",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "billingAddress": {
                    "$ref": "#/definitions/AddressResponse"
                },
                "billingSchedule": {
                    "x-displayName": "Billing Schedule",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "contribPct": {
                    "type": "string"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "createdFrom": {
                    "x-displayName": "Created From",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "This field shows the sales order this invoice is created from. Click the link to open the sales order."
                },
                "currency": {
                    "x-displayName": "Currency",
                    "x-reference-objectname": "Currency",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "If you do not use the Multi-Currency Customers feature, the currency of the customer you are creating this transaction for is shown here. If you use the Multi-Currency Customers feature, select the transaction currency you want to create this transaction in. This customer's primary currency is selected by default. If you have already selected items on this transaction, selecting a new currency refreshes them to show the price in the new currency (except for items you entered custom prices for) and recalculates tax and gross profit."
                },
                "currencyName": {
                    "x-displayName": "Currency",
                    "type": "string",
                    "description": "This customer's currency is shown in this field. All currency amounts on this transaction are shown in this currency.",
                    "x-samplevalue": "USA"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldListResponse"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "If you customized an invoice form, select it here, or click New to customize a new invoice form."
                },
                "deferredRevenue": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 0.01,
                    "x-sub-format": "money",
                    "description": "Deferred Revenue: amount of revenue deferred on this transaction"
                },
                "department": {
                    "x-reference-objectname": "Department",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "discountAmount": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 0.01,
                    "x-sub-format": "money",
                    "description": "Deferred Revenue: amount of revenue deferred on this transaction"
                },
                "discountDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30",
                    "description": "Deferred Revenue: amount of revenue deferred on this transaction"
                },
                "discountItem": {
                    "x-displayName": "Discount",
                    "x-reference-objectname": "DiscountItem",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "You can select a discount for this invoice. NetSuite fills the Rate and Discount Total fields based on the discount you choose. Leave this field blank if you do not want to apply a discount to this transaction. To create new discount items, go to <_TABNAME=LIST_ITEM_> > <_TASKCATEGORY=LIST_ITEM_> Items and click New. On the New Item page, click Discount."
                },
                "discountRate": {
                    "x-displayName": "Rate",
                    "type": "string",
                    "x-samplevalue": "-10.00%",
                    "description": "NetSuite enters the rate for the discount item you selected. You can change the discount rate for this cash refund. Enter the discount as a dollar amount like 10.00, or as a percentage like 10%."
                },
                "discountTotal": {
                    "x-displayName": "Discount Total",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 0.01,
                    "x-sub-format": "money",
                    "description": "NetSuite enters the amount discounted on this invoice. If this discount item is taxable, the discount is applied before taxes. If it is not taxable, the discount is applied after taxes."
                },
                "dueDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">=",
                        "<=",
                        ">",
                        "<"
                    ],
                    "description": "Type or pick the due date for this invoice. If you do not assign a due date, this invoice will not appear on aging reports.",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "email": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-sub-format": "email",
                    "x-samplevalue": "bsharp@christyscatering.com"
                },
                "endDate": {
                    "description": "Type or pick the end date for this invoice. If an invoice is created from a sales order that includes a Start Date and End Date, those dates autofill on the invoice when the order is billed.",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2030-10-30T05:28:05.001Z"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the customer for this invoice. Click New to set up a new customer. Go to <_TABNAME=LIST_CUSTJOB_> > <_TASKCATEGORY=LIST_CUSTJOB_> > Customers for details about existing customers."
                },
                "estGrossProfit": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "description": "Estimated Gross Profit: Read-only field that equals the revenue amount minus the Est. Cost. At the transaction level, it equals the gross profit of all lines, factoring transaction-level discounts and markups.",
                    "x-samplevalue": 150.01
                },
                "estGrossProfitPercent": {
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "description": "Estimated Gross Profit Margin, as a percentage: Read-only field that equals the Est. Gross Profit divided by revenue, expressed as a percentage. At the transaction level, it equals the gross profit percent of all lines, factoring transaction-level discounts and markups.",
                    "x-samplevalue": 150.01
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "The currency's exchange rate is shown in this field. You can edit the exchange rate for this transaction only, or you can update the currency record with the exchange rate you enter here.",
                    "x-samplevalue": 1.01
                },
                "excludeCommission": {
                    "x-displayName": "Exclude Commissions",
                    "type": "boolean",
                    "description": "Check this option to exclude this transaction and its subordinate transactions from inclusion in all commission calculations.",
                    "x-samplevalue": true
                },
                "expCostDiscAmount": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 11.01,
                    "x-sub-format": "money",
                    "description": "The rate you enter automatically appears here. If you entered a percentage in the Rate field, NetSuite multiplies the discount or markup percentage by the total amount of line items you select."
                },
                "expCostDiscPrint": {
                    "type": "boolean",
                    "description": "Check this box if you added a discount or markup and want to print it on the invoice.",
                    "x-samplevalue": true
                },
                "expCostDiscRate": {
                    "type": "string",
                    "x-samplevalue": "-10.00%",
                    "description": "The rate for the discount or markup item you selected automatically appears here. If you want, enter a new rate. Rates can be entered as dollar amounts and percentages."
                },
                "expCostDiscTax1Amt": {
                    "format": "double",
                    "x-samplevalue": 1.01,
                    "x-sub-format": "money",
                    "type": "number"
                },
                "expCostDiscTaxable": {
                    "type": "boolean",
                    "description": "Check this box if the expenses you are billing are taxable.",
                    "x-samplevalue": true
                },
                "expCostDiscount": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "If you want to add a discount or markup to the cost of the expenses you are billing, select it from the list. To see a list of your discounts or markups, go to Lists > Items and select Discount or Markup from the dropdown list at the bottom of the page. To create a new discount or markup, go to Lists > New Item and click Discount or Markup."
                },
                "expCostList": {
                    "$ref": "#/definitions/InvoiceExpCostListResponse"
                },
                "expCostTaxCode": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "expCostTaxRate1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "NetSuite inserts the GST rate based on the tax code you assigned to this expense. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "expCostTaxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "description": "NetSuite inserts the PST rate based on the tax code you assigned to this expense. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "externalId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "tran2021"
                },
                "fax": {
                    "x-samplevalue": "(415) 6543-1001",
                    "type": "string"
                },
                "fob": {
                    "type": "string",
                    "x-samplevalue": "Our warehouse"
                },
                "giftCertApplied": {
                    "format": "double",
                    "x-samplevalue": 20.01,
                    "type": "number"
                },
                "giftCertRedemptionList": {
                    "$ref": "#/definitions/GiftCertRedemptionListResponse"
                },
                "handlingCost": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "x-samplevalue": 20.01,
                    "type": "number"
                },
                "handlingTax1Rate": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "x-samplevalue": 20.01,
                    "type": "number"
                },
                "handlingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "x-samplevalue": "7.00%",
                    "type": "string"
                },
                "handlingTaxCode": {
                    "x-displayName": "Handling Tax Code",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "itemCostDiscAmount": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 20.01,
                    "description": "The rate you enter automatically appears here. If you entered a percentage in the Rate field, NetSuite multiplies the discount or markup percentage by the total amount of line items you select."
                },
                "itemCostDiscPrint": {
                    "type": "boolean",
                    "description": "Check this box if you added a discount or markup and want to print it on the invoice.",
                    "x-samplevalue": true
                },
                "itemCostDiscRate": {
                    "type": "string",
                    "x-samplevalue": "-7.00%",
                    "description": "The rate for the discount or markup item you selected automatically appears here. If you want, enter a new rate. Rates can be entered as dollar amounts and percentages."
                },
                "itemCostDiscTax1Amt": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "x-sub-format": "money"
                },
                "itemCostDiscTaxable": {
                    "type": "boolean",
                    "description": "Check this box if you want the discount or markup you entered to be applied before taxes.",
                    "x-samplevalue": true
                },
                "itemCostDiscount": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "If you want to add a discount or markup to the cost of the items you are billing, select it from the list. To see a list of your discounts or markups, go to Lists > Items and select Discount or Markup from the dropdown list at the bottom of the page. To create a new discount or markup, go to Lists > New Item and click Discount or Markup."
                },
                "itemCostList": {
                    "$ref": "#/definitions/InvoiceItemCostListResponse"
                },
                "itemCostTaxCode": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "itemCostTaxRate1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 7.01,
                    "description": "NetSuite inserts the GST rate based on the tax code you assigned to this item. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "itemCostTaxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 7.01,
                    "description": "NetSuite inserts the PST rate based on the tax code you assigned to this item. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "itemList": {
                    "$ref": "#/definitions/InvoiceItemListResponse"
                },
                "job": {
                    "x-reference-objectname": "Job",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-30T05:28:05.001Z"
                },
                "leadSource": {
                    "x-displayName": "Lead Source",
                    "x-reference-objectname": "LeadSource",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the lead source associated with this transaction. If you use the Marketing Automation feature, select the campaign you want to associate with this transaction's revenue."
                },
                "linkedTrackingNumbers": {
                    "x-displayName": "Tracking Numbers",
                    "type": "string"
                },
                "location": {
                    "x-reference-objectname": "Location",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "memo": {
                    "type": "string",
                    "x-samplevalue": "Details."
                },
                "message": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "The text of the customer message you select in the Select Message field appears here. You can edit the message or enter a new customer message for only this transaction.",
                    "x-samplevalue": "We appreciate your prompt payment."
                },
                "messageSel": {
                    "x-displayName": "Select Message",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select a customer message to appear on this form. For example, you may add Thank you for your business! Choose from the list of existing customer messages stored in Accounting Lists. The text of the selected message appears in the Customer Message field. In this field, you can optionally edit the message or enter a new customer message for only this transaction. To add messages to appear in the Select Message field, go to <_TABNAME=LIST_ACCOUNTINGOTHERLIST_> > <_TASKCATEGORY=LIST_ACCOUNTINGOTHERLIST_> > Accounting Lists > New, and click Customer Message."
                },
                "nextApprover": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "onCreditHold": {
                    "type": "string",
                    "x-samplevalue": "100"
                },
                "opportunity": {
                    "x-displayName": "Opportunity",
                    "x-reference-objectname": "Opportunity",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "If you are entering this transaction for an opportunity, select the opportunity. You can create opportunity records at <_TABNAME=EDIT_TRAN_OPPRTNTY_> > <_TASKCATEGORY=TRAN_OPPRTNTY_> > Create Opportunities."
                },
                "otherRefNum": {
                    "type": "string",
                    "description": "To make it easy for your customers to locate this invoice in their own records, enter their purchase order number here.",
                    "x-samplevalue": "6489"
                },
                "partner": {
                    "x-displayName": "Partner",
                    "x-reference-objectname": "Partner",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "The partner associated with this customer appears in the Partner field. You can change the partner for this transaction."
                },
                "promotionsList": {
                    "$ref": "#/definitions/PromotionsListResponse"
                },
                "partnersList": {
                    "x-reference-objectname": "PartnerList",
                    "$ref": "#/definitions/InvoicePartnersListResponse"
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the period you want to post this invoice to. If a period is closed, you cannot post to that period."
                },
                "promoCode": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "If you want to apply a multiple-use coupon code to this transaction, select the promotion here. If you want to apply a single-use coupon code, enter the code in the Coupon Code field. The promotion for that coupon code is shown here. Customers associated with a partner can only use coupon codes from that partner's promotions. If you select a promotion associated with a partner, this transaction is attributed to that partner for reporting purposes. You can choose to have a promotion selected by default at <_TABNAME=TRAN_CAMPAIGNSETUP_> > <_TASKCATEGORY=TRAN_CAMPAIGNSETUP_> > Marketing Preferences in the Default Promotion Code on Sales Transactions field. Create new promotion codes at <_TABNAME=LIST_REFERRALCODE_> > <_TASKCATEGORY=LIST_REFERRALCODE_> > Promotions > New."
                },
                "recognizedRevenue": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 20000000.01,
                    "description": "Recognized Revenue: cumulative amount of revenue recognized for this transaction"
                },
                "revRecEndDate": {
                    "x-displayName": "Rev. Rec. End Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2030-10-30T05:28:05.001Z"
                },
                "revRecOnRevCommitment": {
                    "type": "boolean",
                    "description": "Check this check box to create a Revenue Commitment or Revenue Commitment Reversal. * On a Sales Order, the Revenue Commitment replaces an invoice * On a Return Authorization, the Revenue Commitment Reversal replaces a credit memo. NetSuite creates all applicable Revenue Recognition schedules the Revenue Commitment or Revenue Commitment Reversal.",
                    "x-samplevalue": true
                },
                "revRecSchedule": {
                    "x-displayName": "Rev. Rec. Schedule",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "revRecStartDate": {
                    "x-displayName": "Rev. Rec. Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-30T05:28:05.001Z"
                },
                "revenueStatus": {
                    "$ref": "#/definitions/RevenueStatus",
                    "description": "The possible values for this field are: 1. Pending: indicates that no recognition has occurred. All revenue is still deferred. 2. In Progress: indicates that some recognition has occurred. 3. Completed: indicates that all recognition has occurred. No deferred revenue remains."
                },
                "salesEffectiveDate": {
                    "x-displayName": "Sales Effective Date",
                    "format": "date-time",
                    "type": "string",
                    "description": "You can change the sales effective date for this transaction. The sales effective date determines which commission plan and historical sales team this transaction applies to.",
                    "x-samplevalue": "2016-10-30T05:28:05.001Z"
                },
                "salesGroup": {
                    "x-displayName": "Choose Team",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select a sales team to associate with this transaction. To create a sales team, go to <_TABNAME=EDIT_CRMGROUP_> > <_TASKCATEGORY=EDIT_CRMGROUP_> > New > Select Sales Team Members."
                },
                "salesRep": {
                    "x-displayName": "Sales Rep",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "NetSuite inserts the sales representative associated with this company on the customer record at Lists > Customers. If a different sales rep is assigned to this transaction, select that sales rep here. To add additional sales reps to this list, go to Lists > New Employee."
                },
                "salesTeamList": {
                    "$ref": "#/definitions/InvoiceSalesTeamListResponse"
                },
                "shipAddressList": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the appropriate shipping address for this transaction. * Select New to enter a new shipping address to be used for this transaction and saved with the associated entity record. * Select Custom to enter a new shipping address to be used for this transaction only (and not saved with the associated entity record). * Click the Edit icon to edit an existing shipping address."
                },
                "shipDate": {
                    "format": "date-time",
                    "type": "string",
                    "description": "Type or pick a shipping date for this invoice."
                },
                "shipGroupList": {
                    "$ref": "#/definitions/InvoiceShipGroupListResponse"
                },
                "shipIsResidential": {
                    "x-displayName": "Shipping address is residential",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "shipMethod": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select a shipping method for this order. If you automatically charge for shipping, the shipping amount is entered in the shipping costs field. To automatically charge for shipping, go to <_TABNAME=ADMI_SHIPPING_> > <_TASKCATEGORY=ADMI_SHIPPING_> > Shipping. Check the Charge for Shipping box and click Save. You must also set up the charge details of your shipping items. To add or edit shipping items, go to <_TABNAME=LIST_SHIPITEM_> > <_TASKCATEGORY=LIST_SHIPITEM_> > Shipping Items."
                },
                "shippingAddress": {
                    "$ref": "#/definitions/AddressResponse"
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 2400.01,
                    "x-sub-format": "money",
                    "description": "The shipping cost automatically calculates depending on the shipping method you select in the Ship Via field above. To change the cost of a shipping method, go to <_TABNAME=LIST_SHIPITEM_> > <_TASKCATEGORY=LIST_SHIPITEM_> > Shipping Items and select the shipping method you want to change. If you use UPS Real-Time rates, shipments over 150lbs are broken up into shipments less than or equal to 150lbs for charging."
                },
                "shippingTax1Rate": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number",
                    "description": "The tax rate for the selected tax code shows here.",
                    "x-samplevalue": 2.01
                },
                "shippingTax2Rate": {
                    "x-displayName": "Tax Rate",
                    "x-samplevalue": "7.00%",
                    "type": "string"
                },
                "shippingTaxCode": {
                    "x-displayName": "Shipping Tax Code",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the tax code that determines the tax charged for shipping."
                },
                "source": {
                    "x-displayName": "Source",
                    "type": "string"
                },
                "startDate": {
                    "format": "date-time",
                    "type": "string",
                    "description": "If you use the Advanced Billing feature, enter the date for the first invoice to be created. If an invoice is created from a sales order that includes a Start Date and End Date, those dates autofill on the invoice when the order is billed.",
                    "x-samplevalue": "2016-10-30T05:28:05.001Z"
                },
                "status": {
                    "x-displayName": "Status",
                    "type": "string",
                    "x-samplevalue": "Open"
                },
                "subTotal": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 2002.01,
                    "description": "This field shows the total of the items on this invoice. This is the total before any discounts, shipping cost, handling cost or tax is added to the order."
                },
                "subsidiary": {
                    "x-reference-objectname": "Subsidiary",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "This field displays the subsidiary associated with this transaction."
                },
                "syncPartnerTeams": {
                    "type": "boolean",
                    "description": "Check this box if you want to update the sales team on the customer's record with changes you make here.",
                    "x-samplevalue": true
                },
                "syncSalesTeams": {
                    "type": "boolean",
                    "description": "Check this box if you want to update the sales team on the customer's record with changes you make here.",
                    "x-samplevalue": true
                },
                "tax2Total": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 20000.01,
                    "x-sub-format": "money",
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here."
                },
                "taxItem": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "A tax item is a tax that you collect at one certain rate and pay to one tax agency for this invoice. NetSuite inserts the tax item for this customer from the record at Lists > Customers. To change it just for this order, select another tax item. To add additional choices to this list, go to Lists > New Item > Sales Tax Item."
                },
                "taxRate": {
                    "format": "double",
                    "type": "number",
                    "description": "NetSuite inserts the percentage rate of the tax item from its record at Lists > Items. You can change it here for just this transaction if you wish.",
                    "x-samplevalue": 8.5
                },
                "taxTotal": {
                    "x-displayName": "Tax",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "description": "NetSuite multiplies the tax rate by the taxable total of line items and enters it here.",
                    "x-samplevalue": 6548.4
                },
                "terms": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select discount terms that will apply to this invoice. To add additional choices to this list, go to <_TABNAME=LIST_ACCOUNTINGOTHERLIST_> > <_TASKCATEGORY=LIST_ACCOUNTINGOTHERLIST_> > Accounting Lists > New > Terms."
                },
                "timeDiscAmount": {
                    "format": "double",
                    "type": "number",
                    "description": "The rate you enter automatically appears here. If you entered a percentage in the Rate field, NetSuite multiplies the discount or markup percentage by the total amount of line items you select.",
                    "x-samplevalue": 68.4
                },
                "timeDiscPrint": {
                    "type": "boolean",
                    "description": "Check this box if you added a discount or markup and want to print it on the invoice.",
                    "x-samplevalue": true
                },
                "timeDiscRate": {
                    "type": "string",
                    "x-samplevalue": "-8.0%",
                    "description": "The rate for the discount or markup item you selected automatically appears here. If you want, enter a new rate. Rates can be entered as dollar amounts and percentages."
                },
                "timeDiscTax1Amt": {
                    "format": "double",
                    "x-samplevalue": 200.01,
                    "x-sub-format": "money",
                    "type": "number"
                },
                "timeDiscTaxable": {
                    "type": "boolean",
                    "description": "Check this box if you want the discount or markup you entered to be applied before taxes.",
                    "x-samplevalue": true
                },
                "timeDiscount": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "If you want to add a discount or markup to the cost of the time you are billing, select it from the list. To see a list of your discounts or markups, go to Lists > Items and select Discount or Markup from the dropdown list at the bottom of the page. To create a new discount or markup, go to Lists > New Item and click Discount or Markup."
                },
                "timeList": {
                    "$ref": "#/definitions/InvoiceTimeListResponse"
                },
                "timeTaxCode": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "timeTaxRate1": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 8.01,
                    "description": "NetSuite inserts the GST rate based on the tax code you assigned to this time. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "timeTaxRate2": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 8.01,
                    "description": "NetSuite inserts the PST rate based on the tax code you assigned to this time. To set up tax codes and corresponding tax percentages, go to Lists > Tax Codes. To change the assignment of a tax code to an item, go to Lists > Items."
                },
                "toBeEmailed": {
                    "x-displayName": "To Be Emailed",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "When processing individual invoices: * Check the To Be Emailed box if you want to email this invoice. Then enter the email address in the space to the right of the check box. * You can enter multiple email addresses by separating them with a semicolon. It is important to separate the addresses with only a semicolon, and do not include any spaces. When bulk processing invoices: In the To Be Emailed field: * Select Yes if you want to email this form. * Select No if you do not want to email this form. * Select Respect Customer Preference to send the form based on the default preference on the customer record. Set the preference on the Info subtab of a customer record in the Send Transactions Via field.",
                    "x-samplevalue": true
                },
                "toBeFaxed": {
                    "x-displayName": "To Be Faxed",
                    "type": "boolean",
                    "description": "When processing individual invoices: * Check the To Be Faxed box if you want to fax this invoice. Then enter the fax number in the box to the right of the check box if it does not already appear. When bulk processing invoices: In the To Be Faxed field: * Select Yes if you want to fax this form. * Select No if you do not want to fax this form. * Select Respect Customer Preference to send the form based on the default preference on the customer record. Set the preference on the Info subtab of a customer record in the Send Transactions Via field. To fax NetSuite forms, an administrator must first set up fax service at <_TABNAME=ADMI_PRINTING_> > <_TASKCATEGORY=ADMI_PRINTING_> > Printing, Fax and Email Preferences.",
                    "x-samplevalue": true
                },
                "toBePrinted": {
                    "x-displayName": "To Be Printed",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "When processing individual invoices: Check the To Be Printed box if you want to print this invoice. When bulk processing invoices: * Select Yes if you want to save this in a queue of invoices to print. * Select No if you do not want to print this form. * Select Respect Customer Preference to send the form based on the default preference on the customer record. Set the preference on the Info subtab of a customer record in the Send Transactions Via field.",
                    "x-samplevalue": true
                },
                "total": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "description": "NetSuite computes the total of line items, tax and shipping costs, and then enters it here.",
                    "x-samplevalue": 83588.4
                },
                "totalCostEstimate": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "description": "Estimated Cost: Estimated cost of the specific number of items; estimated rate x quantity = estimated cost.",
                    "x-samplevalue": 83588.4
                },
                "trackingNumbers": {
                    "x-displayName": "Tracking Numbers",
                    "type": "string",
                    "x-samplevalue": "10232",
                    "description": "Enter the shipment tracking number from the shipping company. If a tracking number is entered in the exact format used by UPS or FedEx and the transaction is saved, the tracking number will show on the transaction as a link to the UPS or FedEx website. You can click the link to check the status of the shipment."
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "=",
                        ">=",
                        "<=",
                        ">",
                        "<"
                    ],
                    "description": "NetSuite inserts today's date for the posting date of this invoice. You can type or pick another date. What you enter here determines the date range in which this transaction appears on the Accounts Receivable Register. You can select or enter custom date ranges on registers.",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "tranId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "NetSuite increases the largest invoice number by one. You can type another number. The next invoice number will revert to the standard pattern.",
                    "x-samplevalue": "INV00001027"
                },
                "tranIsVsoeBundle": {
                    "x-displayName": "Transaction Is VSOE Bundle",
                    "type": "boolean",
                    "description": "Check this box to include all items added to this transaction as a VSOE bundle.",
                    "x-samplevalue": true
                },
                "vatRegNum": {
                    "type": "string",
                    "x-samplevalue": "120222"
                },
                "vsoeAutoCalc": {
                    "x-displayName": "Auto Calculate VSOE Allocation",
                    "type": "boolean",
                    "description": "The VSOE allocation amount for a sale can be calculated automatically by checking the Auto Calculate VSOE Allocation box. Allocation is the process to determine the VSOE price for items on a sale. The total VSOE amount allocated is the revenue amount to be recognized for the bundle.",
                    "x-samplevalue": true
                }
            }
        },
        "InvoiceExpCost": {
            "properties": {
                "_class": {
                    "type": "string"
                },
                "amount": {
                    "x-displayName": "Bill Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 1000.01
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "billedDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "categoryDisp": {
                    "x-displayName": "Category",
                    "type": "string"
                },
                "department": {
                    "type": "string",
                    "x-samplevalue": "Marketing"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 409
                },
                "employeeDisp": {
                    "x-displayName": "Employee",
                    "type": "string",
                    "x-samplevalue": "EMp"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 1000.01
                },
                "jobDisp": {
                    "type": "string",
                    "x-samplevalue": "SE"
                },
                "line": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "location": {
                    "type": "string",
                    "x-samplevalue": "LA"
                },
                "memo": {
                    "x-displayName": "Memo",
                    "type": "string",
                    "x-samplevalue": "Memo description"
                },
                "originalAmount": {
                    "x-displayName": "Original Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 10.01
                },
                "revRecEndDate": {
                    "x-displayName": "Rev. Rec. End Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "revRecSchedule": {
                    "x-displayName": "Rev. Rec. Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecStartDate": {
                    "x-displayName": "Rev. Rec. Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 200.01
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 1.01
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 3.01
                },
                "taxableDisp": {
                    "x-displayName": "Taxable",
                    "type": "string",
                    "x-samplevalue": "GST"
                }
            }
        },
        "CreateInvoiceExpCostList": {
            "properties": {
                "expCost": {
                    "items": {
                        "$ref": "#/definitions/CreateInvoiceExpCost"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "InvoiceExpCostListResponse": {
            "properties": {
                "expCost": {
                    "items": {
                        "$ref": "#/definitions/InvoiceExpCostResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "CreateInvoiceItem": {
            "required": [
                "item"
            ],
            "x-has-customfields": true,
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amount": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01,
                    "x-sub-format": "money"
                },
                "amountOrdered": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 100.01,
                    "x-sub-format": "money"
                },
                "binNumbers": {
                    "x-displayName": "Bin Numbers",
                    "x-samplevalue": "10.0",
                    "type": "string"
                },
                "catchUpPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "chargeType": {
                    "x-displayName": "Charge Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "chargesList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "currentPercent": {
                    "format": "double",
                    "x-samplevalue": 30.01,
                    "type": "number"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "deferRevRec": {
                    "x-samplevalue": false,
                    "type": "boolean"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Department"
                },
                "description": {
                    "x-samplevalue": "Invoic item",
                    "type": "string"
                },
                "excludeFromRateRequest": {
                    "x-samplevalue": false,
                    "x-displayName": "Exclude Item from Rate Request",
                    "type": "boolean"
                },
                "giftCertFrom": {
                    "x-samplevalue": "Chester",
                    "x-displayName": "From",
                    "type": "string"
                },
                "giftCertMessage": {
                    "x-samplevalue": "Invisible!",
                    "x-displayName": "Gift Message",
                    "type": "string"
                },
                "giftCertNumber": {
                    "x-displayName": "Code",
                    "x-samplevalue": "1022",
                    "type": "string"
                },
                "giftCertRecipientEmail": {
                    "x-samplevalue": "chesterbennington@lp.com",
                    "x-displayName": "Recipient Email",
                    "type": "string"
                },
                "giftCertRecipientName": {
                    "x-samplevalue": "Chester Bennington",
                    "x-displayName": "Recipient Name",
                    "type": "string"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 102.01,
                    "x-sub-format": "money"
                },
                "isTaxable": {
                    "x-samplevalue": false,
                    "type": "boolean"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Job"
                },
                "licenseCode": {
                    "x-samplevalue": "1011",
                    "x-displayName": "License Code",
                    "type": "string"
                },
                "line": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "location": {
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Location"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "orderLine": {
                    "x-displayName": "{1}",
                    "format": "int64",
                    "x-samplevalue": 1,
                    "type": "integer"
                },
                "percentComplete": {
                    "format": "double",
                    "x-samplevalue": 1.01,
                    "type": "number"
                },
                "price": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantity": {
                    "format": "double",
                    "x-samplevalue": 1.01,
                    "type": "number"
                },
                "quantityFulfilled": {
                    "format": "double",
                    "x-samplevalue": 1.01,
                    "type": "number"
                },
                "quantityOnHand": {
                    "format": "double",
                    "x-samplevalue": 1.01,
                    "type": "number"
                },
                "quantityOrdered": {
                    "format": "double",
                    "x-samplevalue": 1.01,
                    "type": "number"
                },
                "quantityRemaining": {
                    "format": "double",
                    "x-samplevalue": 1.01,
                    "type": "number"
                },
                "revRecEndDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-6-30T05:28:05.007Z"
                },
                "revRecSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecStartDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-6-30T05:28:05.007Z"
                },
                "subscriptionLine": {
                    "x-displayName": "{Subscription} Line",
                    "$ref": "#/definitions/RecordRef"
                },
                "serialNumbers": {
                    "x-samplevalue": "12",
                    "x-displayName": "Serial/Lot Numbers",
                    "type": "string"
                },
                "shipAddress": {
                    "x-displayName": "Ship To",
                    "x-samplevalue": "Palo Alto",
                    "$ref": "#/definitions/RecordRef"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "x-samplevalue": 12.01,
                    "type": "number"
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 12.01,
                    "x-sub-format": "money"
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "x-samplevalue": 12,
                    "type": "number"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeAllocation": {
                    "x-displayName": "Allocation Amount",
                    "format": "double",
                    "x-samplevalue": 1002.01,
                    "type": "number"
                },
                "vsoeAmount": {
                    "x-displayName": "Calculated Amount",
                    "format": "double",
                    "x-samplevalue": 10012.01,
                    "type": "number"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "vsoeDelivered": {
                    "x-displayName": "Delivered",
                    "x-samplevalue": false,
                    "type": "boolean"
                },
                "vsoeIsEstimate": {
                    "x-samplevalue": false,
                    "x-displayName": "Estimate",
                    "type": "boolean"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "x-samplevalue": 10.01,
                    "type": "number"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                }
            }
        },
        "InvoiceItemResponse": {
            "x-has-customfields": true,
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "amount": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 50000.01
                },
                "amountOrdered": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 50000.01
                },
                "binNumbers": {
                    "x-displayName": "Bin Numbers",
                    "type": "string",
                    "x-samplevalue": "1234"
                },
                "catchUpPeriod": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "chargeType": {
                    "x-displayName": "Charge Type",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "chargesList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 50000.01
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "currentPercent": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 5.01
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldListResponse"
                },
                "deferRevRec": {
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "department": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "description": {
                    "type": "string",
                    "x-samplevalue": "Invoice Item"
                },
                "excludeFromRateRequest": {
                    "x-displayName": "Exclude Item from Rate Request",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "giftCertFrom": {
                    "x-displayName": "From",
                    "type": "string",
                    "x-samplevalue": "Caterpiller"
                },
                "giftCertMessage": {
                    "x-displayName": "Gift Message",
                    "type": "string",
                    "x-samplevalue": "Wish you luck!"
                },
                "giftCertNumber": {
                    "x-displayName": "Code",
                    "type": "string",
                    "x-samplevalue": "1012"
                },
                "giftCertRecipientEmail": {
                    "x-displayName": "Recipient Email",
                    "type": "string",
                    "x-samplevalue": "abc@gmail.com"
                },
                "giftCertRecipientName": {
                    "x-displayName": "Recipient Name",
                    "type": "string",
                    "x-samplevalue": "David Bechkham"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 1012.01
                },
                "inventoryDetail": {
                    "x-displayName": "Inventory Detail",
                    "$ref": "#/definitions/InventoryDetailResponse"
                },
                "isTaxable": {
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "item": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "itemIsFulfilled": {
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "job": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "licenseCode": {
                    "x-displayName": "License Code",
                    "type": "string",
                    "x-samplevalue": "102333"
                },
                "line": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "location": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldListResponse"
                },
                "orderLine": {
                    "x-displayName": "{1}",
                    "format": "int64",
                    "type": "integer"
                },
                "percentComplete": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "price": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "quantity": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "quantityAvailable": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "quantityFulfilled": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "quantityOnHand": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "quantityOrdered": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "quantityRemaining": {
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "rate": {
                    "type": "string",
                    "x-samplevalue": "10.0"
                },
                "revRecEndDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-31T12:30:00+05:30"
                },
                "revRecSchedule": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "revRecStartDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-31T12:30:00+05:30"
                },
                "subscriptionLine": {
                    "x-displayName": "{Subscription} Line",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "serialNumbers": {
                    "x-displayName": "Serial/Lot Numbers",
                    "type": "string",
                    "x-samplevalue": "2000"
                },
                "shipAddress": {
                    "x-displayName": "Ship To",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "shipGroup": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 120
                },
                "shipMethod": {
                    "x-displayName": "Ship Via",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 120.01
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 12.01
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 18.01
                },
                "units": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "vsoeAllocation": {
                    "x-displayName": "Allocation Amount",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 120.01
                },
                "vsoeAmount": {
                    "x-displayName": "Calculated Amount",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 1200.01
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "vsoeDelivered": {
                    "x-displayName": "Delivered",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "vsoeIsEstimate": {
                    "x-displayName": "Estimate",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 2000.01
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                }
            }
        },
        "InvoiceExpCostList": {
            "properties": {
                "expCost": {
                    "items": {
                        "$ref": "#/definitions/InvoiceExpCost"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "InvoiceItem": {
            "required": [
                "item"
            ],
            "x-has-customfields": true,
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amount": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money"
                },
                "amountOrdered": {
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money"
                },
                "binNumbers": {
                    "x-displayName": "Bin Numbers",
                    "type": "string"
                },
                "catchUpPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "chargeType": {
                    "x-displayName": "Charge Type",
                    "$ref": "#/definitions/RecordRef"
                },
                "chargesList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money"
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "currentPercent": {
                    "format": "double",
                    "type": "number"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "deferRevRec": {
                    "type": "boolean"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "description": {
                    "type": "string"
                },
                "excludeFromRateRequest": {
                    "x-displayName": "Exclude Item from Rate Request",
                    "type": "boolean"
                },
                "giftCertFrom": {
                    "x-displayName": "From",
                    "type": "string"
                },
                "giftCertMessage": {
                    "x-displayName": "Gift Message",
                    "type": "string"
                },
                "giftCertNumber": {
                    "x-displayName": "Code",
                    "type": "string"
                },
                "giftCertRecipientEmail": {
                    "x-displayName": "Recipient Email",
                    "type": "string"
                },
                "giftCertRecipientName": {
                    "x-displayName": "Recipient Name",
                    "type": "string"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money"
                },
                "inventoryDetail": {
                    "x-displayName": "Inventory Detail",
                    "$ref": "#/definitions/InventoryDetail"
                },
                "isTaxable": {
                    "type": "boolean"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "itemIsFulfilled": {
                    "type": "boolean"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "licenseCode": {
                    "x-displayName": "License Code",
                    "type": "string"
                },
                "line": {
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "orderLine": {
                    "x-displayName": "{1}",
                    "format": "int64",
                    "type": "integer"
                },
                "percentComplete": {
                    "format": "double",
                    "type": "number"
                },
                "price": {
                    "x-displayName": "Price Level",
                    "$ref": "#/definitions/RecordRef"
                },
                "quantity": {
                    "format": "double",
                    "type": "number"
                },
                "quantityAvailable": {
                    "format": "double",
                    "type": "number"
                },
                "quantityFulfilled": {
                    "format": "double",
                    "type": "number"
                },
                "quantityOnHand": {
                    "format": "double",
                    "type": "number"
                },
                "quantityOrdered": {
                    "format": "double",
                    "type": "number"
                },
                "quantityRemaining": {
                    "format": "double",
                    "type": "number"
                },
                "rate": {
                    "type": "string"
                },
                "revRecEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "revRecSchedule": {
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "subscriptionLine": {
                    "x-displayName": "{Subscription} Line",
                    "$ref": "#/definitions/RecordRef"
                },
                "serialNumbers": {
                    "x-displayName": "Serial/Lot Numbers",
                    "type": "string"
                },
                "shipAddress": {
                    "x-displayName": "Ship To",
                    "$ref": "#/definitions/RecordRef"
                },
                "shipGroup": {
                    "format": "int64",
                    "type": "integer"
                },
                "shipMethod": {
                    "x-displayName": "Ship Via",
                    "$ref": "#/definitions/RecordRef"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number"
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money"
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vsoeAllocation": {
                    "x-displayName": "Allocation Amount",
                    "format": "double",
                    "type": "number"
                },
                "vsoeAmount": {
                    "x-displayName": "Calculated Amount",
                    "format": "double",
                    "type": "number"
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral"
                },
                "vsoeDelivered": {
                    "x-displayName": "Delivered",
                    "type": "boolean"
                },
                "vsoeIsEstimate": {
                    "x-displayName": "Estimate",
                    "type": "boolean"
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount"
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "type": "number"
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup"
                }
            }
        },
        "CreateInvoiceItemCost": {
            "x-has-customfields": true,
            "properties": {}
        },
        "InvoiceItemCostResponse": {
            "x-has-customfields": true,
            "properties": {
                "_class": {
                    "type": "string"
                },
                "amount": {
                    "x-displayName": "Total",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 50000.01
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "billedDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-31T12:30:00+05:30"
                },
                "cost": {
                    "x-displayName": "Rate",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 5.01
                },
                "department": {
                    "type": "string",
                    "x-samplevalue": "Marketing"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 409
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 10000.01
                },
                "itemCostCount": {
                    "x-displayName": "Qty",
                    "type": "string",
                    "x-samplevalue": "5"
                },
                "itemDisp": {
                    "x-displayName": "Item",
                    "type": "string",
                    "x-samplevalue": "Hardware"
                },
                "jobDisp": {
                    "type": "string",
                    "x-samplevalue": "Data Analyst"
                },
                "line": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": "0"
                },
                "location": {
                    "type": "string",
                    "x-samplevalue": "01: San Francisco"
                },
                "memo": {
                    "x-displayName": "Description",
                    "type": "string",
                    "x-samplevalue": "Invoice cost expense."
                },
                "options": {
                    "x-displayName": "Options",
                    "$ref": "#/definitions/CustomFieldList"
                },
                "quantity": {
                    "x-displayName": "Quantity",
                    "type": "string",
                    "x-samplevalue": 1
                },
                "revRecEndDate": {
                    "x-displayName": "Rev. Rec. End Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-31T12:30:00+05:30"
                },
                "revRecSchedule": {
                    "x-displayName": "Rev. Rec. Schedule",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "revRecStartDate": {
                    "x-displayName": "Rev. Rec. Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2016-10-31T12:30:00+05:30"
                },
                "serialNumbers": {
                    "x-displayName": "Serial/Lot Numbers",
                    "type": "string",
                    "x-samplevalue": "1020"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 100.01
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 10.01
                },
                "unitDisp": {
                    "x-displayName": "Units",
                    "type": "string",
                    "x-samplevalue": "10"
                }
            }
        },
        "InvoiceItemCost": {
            "x-has-customfields": true,
            "properties": {
                "_class": {
                    "type": "string"
                },
                "amount": {
                    "x-displayName": "Total",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money"
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean"
                },
                "billedDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "cost": {
                    "x-displayName": "Rate",
                    "format": "double",
                    "type": "number"
                },
                "department": {
                    "type": "string"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money"
                },
                "itemCostCount": {
                    "x-displayName": "Qty",
                    "type": "string"
                },
                "itemDisp": {
                    "x-displayName": "Item",
                    "type": "string"
                },
                "jobDisp": {
                    "type": "string"
                },
                "line": {
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "memo": {
                    "x-displayName": "Description",
                    "type": "string"
                },
                "options": {
                    "x-displayName": "Options",
                    "$ref": "#/definitions/CustomFieldList"
                },
                "quantity": {
                    "x-displayName": "Quantity",
                    "type": "string"
                },
                "revRecEndDate": {
                    "x-displayName": "Rev. Rec. End Date",
                    "format": "date-time",
                    "type": "string"
                },
                "revRecSchedule": {
                    "x-displayName": "Rev. Rec. Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecStartDate": {
                    "x-displayName": "Rev. Rec. Start Date",
                    "format": "date-time",
                    "type": "string"
                },
                "serialNumbers": {
                    "x-displayName": "Serial/Lot Numbers",
                    "type": "string"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money"
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number"
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number"
                },
                "unitDisp": {
                    "x-displayName": "Units",
                    "type": "string"
                }
            }
        },
        "CreateInvoiceItemCostList": {
            "properties": {
                "itemCost": {
                    "items": {
                        "$ref": "#/definitions/CreateInvoiceItemCost"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "InvoiceItemCostListResponse": {
            "properties": {
                "itemCost": {
                    "items": {
                        "$ref": "#/definitions/InvoiceItemCostResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "InvoiceItemCostList": {
            "properties": {
                "itemCost": {
                    "items": {
                        "$ref": "#/definitions/InvoiceItemCost"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "CreateInvoiceItemList": {
            "required": [
                "item"
            ],
            "properties": {
                "item": {
                    "items": {
                        "$ref": "#/definitions/CreateInvoiceItem"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "InvoiceItemListResponse": {
            "properties": {
                "item": {
                    "items": {
                        "$ref": "#/definitions/InvoiceItemResponse"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                }
            }
        },
        "InvoiceItemList": {
            "properties": {
                "item": {
                    "items": {
                        "$ref": "#/definitions/InvoiceItem"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "InvoicePartnersList": {
            "properties": {
                "partners": {
                    "items": {
                        "$ref": "#/definitions/Partners"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                }
            }
        },
        "InvoiceSalesTeam": {
            "properties": {
                "contribution": {
                    "x-displayName": "Contribution %",
                    "type": "number",
                    "x-samplevalue": 12.01,
                    "format": "double"
                },
                "employee": {
                    "x-displayName": "Employee",
                    "$ref": "#/definitions/RecordRef"
                },
                "isPrimary": {
                    "x-displayName": "Primary",
                    "x-samplevalue": false,
                    "type": "boolean"
                },
                "salesRole": {
                    "x-displayName": "Sales Role",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "InvoiceSalesTeamResponse": {
            "properties": {
                "contribution": {
                    "x-displayName": "Contribution %",
                    "type": "number",
                    "x-samplevalue": 12.01,
                    "format": "double"
                },
                "employee": {
                    "x-displayName": "Employee",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "isPrimary": {
                    "x-displayName": "Primary",
                    "x-samplevalue": false,
                    "type": "boolean"
                },
                "salesRole": {
                    "x-displayName": "Sales Role",
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "InvoiceSalesTeamList": {
            "properties": {
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                },
                "salesTeam": {
                    "items": {
                        "$ref": "#/definitions/InvoiceSalesTeam"
                    },
                    "type": "array"
                }
            }
        },
        "InvoiceSalesTeamListResponse": {
            "properties": {
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                },
                "salesTeam": {
                    "items": {
                        "$ref": "#/definitions/InvoiceSalesTeamResponse"
                    },
                    "type": "array"
                }
            }
        },
        "InvoiceShipGroupList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "shipGroup": {
                    "items": {
                        "$ref": "#/definitions/TransactionShipGroup"
                    },
                    "type": "array"
                }
            }
        },
        "InvoiceShipGroupListResponse": {
            "properties": {
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "shipGroup": {
                    "items": {
                        "$ref": "#/definitions/TransactionShipGroupResponse"
                    },
                    "type": "array"
                }
            }
        },
        "CreateInvoiceShipGroupList": {
            "properties": {
                "replaceAll": {
                    "x-samplevalue": false,
                    "type": "boolean"
                },
                "shipGroup": {
                    "items": {
                        "$ref": "#/definitions/CreateInvoiceTransactionShipGroup"
                    },
                    "type": "array"
                }
            }
        },
        "CreateInvoiceTime": {
            "properties": {}
        },
        "InvoiceTimeResponse": {
            "properties": {
                "_class": {
                    "type": "string"
                },
                "amount": {
                    "x-displayName": "Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 1500.01
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "billedDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "department": {
                    "type": "string",
                    "x-samplevalue": "Marketing"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 409
                },
                "employeeDisp": {
                    "x-displayName": "Employee",
                    "type": "string",
                    "x-samplevalue": "SE"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 1500.01
                },
                "itemDisp": {
                    "x-displayName": "Item",
                    "type": "string",
                    "x-samplevalue": "Item"
                },
                "jobDisp": {
                    "type": "string",
                    "x-samplevalue": "Data Analyst"
                },
                "line": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "location": {
                    "type": "string",
                    "x-samplevalue": "01 California"
                },
                "memo": {
                    "x-displayName": "Description",
                    "type": "string",
                    "x-samplevalue": "Invoice Description"
                },
                "quantity": {
                    "x-displayName": "Hours",
                    "type": "string",
                    "x-samplevalue": "12"
                },
                "rate": {
                    "x-displayName": "Rate",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 5.01
                },
                "revRecEndDate": {
                    "x-displayName": "Rev. Rec. End Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "revRecSchedule": {
                    "x-displayName": "Rev. Rec. Schedule",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "revRecStartDate": {
                    "x-displayName": "Rev. Rec. Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 5.01
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 5.01
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 5.01
                },
                "unitDisp": {
                    "x-displayName": "Units",
                    "type": "string",
                    "x-samplevalue": "5"
                }
            }
        },
        "InvoiceTime": {
            "properties": {
                "_class": {
                    "type": "string"
                },
                "amount": {
                    "x-displayName": "Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 1500.01
                },
                "apply": {
                    "x-displayName": "Apply",
                    "type": "boolean",
                    "x-samplevalue": false
                },
                "billedDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "department": {
                    "type": "string",
                    "x-samplevalue": "Marketing"
                },
                "doc": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 409
                },
                "employeeDisp": {
                    "x-displayName": "Employee",
                    "type": "string",
                    "x-samplevalue": "SE"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 1500.01,
                    "x-sub-format": "money"
                },
                "itemDisp": {
                    "x-displayName": "Item",
                    "type": "string",
                    "x-samplevalue": "Item"
                },
                "jobDisp": {
                    "type": "string",
                    "x-samplevalue": "Data Analyst"
                },
                "line": {
                    "format": "int64",
                    "type": "integer",
                    "x-samplevalue": 0
                },
                "location": {
                    "type": "string",
                    "x-samplevalue": "01 California"
                },
                "memo": {
                    "x-displayName": "Description",
                    "type": "string",
                    "x-samplevalue": "Invoice Description"
                },
                "quantity": {
                    "x-displayName": "Hours",
                    "type": "string",
                    "x-samplevalue": "12"
                },
                "rate": {
                    "x-displayName": "Rate",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 5.01
                },
                "revRecEndDate": {
                    "x-displayName": "Rev. Rec. End Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "revRecSchedule": {
                    "x-displayName": "Rev. Rec. Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecStartDate": {
                    "x-displayName": "Rev. Rec. Start Date",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "2014-12-15T13:30:00+05:30"
                },
                "tax1Amt": {
                    "x-displayName": "Tax Amount",
                    "format": "double",
                    "type": "number",
                    "x-sub-format": "money",
                    "x-samplevalue": 5.01
                },
                "taxCode": {
                    "x-displayName": "Tax Code",
                    "x-reference-objectname": "Tax-Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 5.01
                },
                "taxRate2": {
                    "x-displayName": "PST",
                    "format": "double",
                    "type": "number",
                    "x-samplevalue": 5.01
                },
                "unitDisp": {
                    "x-displayName": "Units",
                    "type": "string",
                    "x-samplevalue": "5"
                }
            }
        },
        "InvoiceTimeList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "time": {
                    "items": {
                        "$ref": "#/definitions/InvoiceTime"
                    },
                    "type": "array"
                }
            }
        },
        "InvoiceTimeListResponse": {
            "properties": {
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "time": {
                    "items": {
                        "$ref": "#/definitions/InvoiceTimeResponse"
                    },
                    "type": "array"
                }
            }
        },
        "CreateInvoiceTimeList": {
            "properties": {
                "replaceAll": {
                    "x-samplevalue": false,
                    "type": "boolean"
                },
                "time": {
                    "items": {
                        "$ref": "#/definitions/CreateInvoiceTime"
                    },
                    "type": "array"
                }
            }
        },
        "ItemAccountingBookDetailResponse": {
            "properties": {
                "sameAsPrimaryRevRec": {
                    "x-displayName": "Same as Primary Book Rev Rec",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "amortizationTemplate": {
                    "x-displayName": "Amortization Template",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "sameAsPrimaryAmortization": {
                    "x-displayName": "Same as Primary Book Amortization",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "accountingBook": {
                    "x-displayName": "Accounting Book",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "revRecSchedule": {
                    "x-displayName": "Revenue Recognition Template",
                    "x-reference-objectname": "RevRecSchedule",
                    "$ref": "#/definitions/RecordRefResponse"
                }
            }
        },
        "ItemAccountingBookDetail": {
            "properties": {
                "sameAsPrimaryRevRec": {
                    "x-displayName": "Same as Primary Book Rev Rec",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "amortizationTemplate": {
                    "x-displayName": "Amortization Template",
                    "$ref": "#/definitions/RecordRef"
                },
                "sameAsPrimaryAmortization": {
                    "x-displayName": "Same as Primary Book Amortization",
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "accountingBook": {
                    "x-displayName": "Accounting Book",
                    "$ref": "#/definitions/RecordRef"
                },
                "revRecSchedule": {
                    "x-displayName": "Revenue Recognition Template",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "ItemAccountingBookDetailListResponse": {
            "properties": {
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "itemAccountingBookDetail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ItemAccountingBookDetailResponse"
                    }
                }
            }
        },
        "ItemAccountingBookDetailList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean",
                    "x-samplevalue": true
                },
                "itemAccountingBookDetail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ItemAccountingBookDetail"
                    }
                }
            }
        },
        "AccountingBookDetailListResponse": {
            "properties": {
                "replaceAll": {
                    "x-samplevalue": true,
                    "type": "boolean"
                },
                "accountingBookDetail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccountingBookDetailResponse"
                    }
                }
            }
        },
        "ItemCarrier": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "ItemCostEstimateType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "ItemCostingMethod": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_average",
                        "_fifo",
                        "_lifo",
                        "_lotNumbered",
                        "_serialized",
                        "_standard"
                    ],
                    "x-sub-format": "enum"
                }
            }
        },
        "ItemInvtClassification": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_a",
                        "_b",
                        "_c"
                    ]
                }
            }
        },
        "ItemMatrixType": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_parent",
                        "_child"
                    ]
                }
            }
        },
        "ItemOptionsListResponse": {
            "properties": {
                "itemOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecordRefResponse"
                    }
                }
            }
        },
        "ItemOptionsList": {
            "properties": {
                "itemOptions": {
                    "items": {
                        "$ref": "#/definitions/RecordRef"
                    },
                    "type": "array"
                }
            }
        },
        "ItemOutOfStockBehavior": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_allowBackOrdersButDisplayOutOfStockMessage",
                        "_allowBackOrdersWithNoOutOfStockMessage",
                        "_default",
                        "_disallowBackOrdersButDisplayOutOfStockMessage",
                        "_removeItemWhenOutOfStock"
                    ]
                }
            }
        },
        "ItemOverallQuantityPricingType": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_byLineQuantity",
                        "_byOverallItemQuantity",
                        "_byOverallParentQuantity",
                        "_byOverallScheduleQuantity"
                    ],
                    "x-sub-format": "enum"
                }
            }
        },
        "LotNumberedInventoryItemNumbersList": {
            "properties": {
                "numbers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LotNumberedInventoryItemNumbers"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "LotNumberedInventoryItemNumbers": {
            "properties": {
                "serialNumber": {
                    "$ref": "#/definitions/RecordRef"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "type": "number"
                },
                "expirationDate": {
                    "x-displayName": "Expiration Date",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "AssemblyItemEffectiveBomControl": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "ItemPreferenceCriterion": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_A",
                        "_B",
                        "_C",
                        "_D",
                        "_E",
                        "_F"
                    ],
                    "x-sub-format": "enum"
                }
            }
        },
        "ItemProductFeed": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_googleBase",
                        "_nexTag",
                        "_shoppingCom",
                        "_shopzilla",
                        "_yahooShopping"
                    ],
                    "x-sub-format": "enum"
                }
            }
        },
        "ItemSubType": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_forPurchase",
                        "_forResale",
                        "_forSale"
                    ]
                }
            }
        },
        "ItemType": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_assembly",
                        "_description",
                        "_discount",
                        "_downloadItem",
                        "_giftCertificateItem",
                        "_inventoryItem",
                        "_itemGroup",
                        "_kit",
                        "_markup",
                        "_nonInventoryItem",
                        "_otherCharge",
                        "_payment",
                        "_service",
                        "_subtotal"
                    ]
                }
            }
        },
        "ItemVendorResponse": {
            "properties": {
                "schedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "This field points to the quantity pricing schedule record, but is unique to the vendor and can only be created from the vendor record. In the UI go to Financial > Schedules > New Pricing Schedule."
                },
                "preferredVendor": {
                    "x-displayName": "Preferred",
                    "type": "boolean",
                    "description": "You can only set one vendor in the list as preferred. If this is set true for multiple vendors, then the last vendor in the list is set as true and all others revert to false."
                },
                "vendor": {
                    "x-displayName": "Vendor",
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "Vendor",
                    "description": "References an existing vendor record. This is required for each vendor being defined. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "vendorCurrency": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "vendorCurrencyName": {
                    "x-sub-format": "Currency",
                    "x-displayName": "Currency",
                    "type": "string"
                },
                "purchasePrice": {
                    "x-displayName": "Purchase Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "Sets the purchase price for this item when purchased from this vendor."
                },
                "subsidiary": {
                    "x-displayName": "Subsidiary",
                    "type": "string"
                },
                "vendorCode": {
                    "x-displayName": "Code",
                    "type": "string",
                    "description": "Sets the vendor&#xfffd;s item code."
                }
            }
        },
        "ItemVendor": {
            "properties": {
                "schedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field points to the quantity pricing schedule record, but is unique to the vendor and can only be created from the vendor record. In the UI go to Financial > Schedules > New Pricing Schedule."
                },
                "preferredVendor": {
                    "x-displayName": "Preferred",
                    "type": "boolean",
                    "description": "You can only set one vendor in the list as preferred. If this is set true for multiple vendors, then the last vendor in the list is set as true and all others revert to false."
                },
                "vendor": {
                    "x-displayName": "Vendor",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an existing vendor record. This is required for each vendor being defined. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "vendorCurrency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorCurrencyName": {
                    "x-sub-format": "Currency",
                    "x-displayName": "Currency",
                    "type": "string"
                },
                "purchasePrice": {
                    "x-displayName": "Purchase Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "Sets the purchase price for this item when purchased from this vendor."
                },
                "subsidiary": {
                    "x-displayName": "Subsidiary",
                    "type": "string"
                },
                "vendorCode": {
                    "x-displayName": "Code",
                    "type": "string",
                    "description": "Sets the vendor&#xfffd;s item code."
                }
            },
            "required": [
                "subsidiary"
            ]
        },
        "ItemVendorListResponse": {
            "properties": {
                "itemVendor": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ItemVendorResponse"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ItemVendorList": {
            "properties": {
                "itemVendor": {
                    "items": {
                        "$ref": "#/definitions/ItemVendor"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ItemWeightUnit": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_g",
                        "_kg",
                        "_lb",
                        "_oz"
                    ],
                    "x-sub-format": "enum"
                }
            }
        },
        "JournalEntry": {
            "required": [
                "lineList",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "Journal-Entry",
            "x-has-customfields": true,
            "properties": {
                "accountingBookDetailList": {
                    "$ref": "#/definitions/AccountingBookDetailList"
                },
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "accountingBook": {
                    "x-displayName": "Secondary Book",
                    "$ref": "#/definitions/RecordRef"
                },
                "approved": {
                    "x-displayName": "Approved",
                    "type": "boolean"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "createdFrom": {
                    "x-displayName": "Void Of",
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number"
                },
                "memo": {
                    "x-displayName": "Memo",
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string"
                },
                "isBookSpecific": {
                    "type": "boolean"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "lineList": {
                    "$ref": "#/definitions/JournalEntryLineList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nexus": {
                    "x-displayName": "Nexus",
                    "$ref": "#/definitions/RecordRef"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "parentExpenseAlloc": {
                    "x-displayName": "Created from Allocation",
                    "$ref": "#/definitions/RecordRef"
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef"
                },
                "reversalDate": {
                    "x-displayName": "Reversal Date",
                    "format": "date-time",
                    "type": "string"
                },
                "reversalDefer": {
                    "x-displayName": "Defer Entry",
                    "type": "boolean"
                },
                "reversalEntry": {
                    "x-displayName": "Reversal No.",
                    "x-readOnly": true,
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "subsidiaryTaxRegNum": {
                    "x-displayName": "Tax Reg. Number",
                    "$ref": "#/definitions/RecordRef"
                },
                "toSubsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "tranDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "tranId": {
                    "x-displayName": "Entry No.",
                    "type": "string"
                }
            }
        },
        "JournalEntryLine": {
            "required": [
                "debit",
                "account",
                "credit"
            ],
            "x-has-customfields": true,
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "credit": {
                    "x-displayName": "Credit",
                    "format": "double",
                    "type": "number"
                },
                "creditTax": {
                    "x-displayName": "Credit Tax",
                    "format": "double",
                    "type": "number"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "debit": {
                    "x-displayName": "Debit",
                    "format": "double",
                    "type": "number"
                },
                "debitTax": {
                    "x-displayName": "Debit Tax",
                    "format": "double",
                    "type": "number"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "eliminate": {
                    "x-displayName": "Eliminate Intercompany Transactions",
                    "type": "boolean"
                },
                "endDate": {
                    "x-displayName": "End Date",
                    "format": "date-time",
                    "type": "string"
                },
                "entity": {
                    "x-displayName": "Name",
                    "$ref": "#/definitions/RecordRef"
                },
                "lineTaxCode": {
                    "x-displayName": "Tax Code",
                    "$ref": "#/definitions/RecordRef"
                },
                "grossAmt": {
                    "x-displayName": "Gross Amt",
                    "format": "double",
                    "type": "number"
                },
                "lineTaxRate": {
                    "x-displayName": "Tax Rate",
                    "format": "double",
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "revenueRecognitionRule": {
                    "x-displayName": "Revenue Recognition Rule",
                    "$ref": "#/definitions/RecordRef"
                },
                "memo": {
                    "x-displayName": "Memo",
                    "type": "string"
                },
                "residual": {
                    "x-displayName": "Residual",
                    "type": "string"
                },
                "schedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRef"
                },
                "scheduleNum": {
                    "x-displayName": "Schedule No.",
                    "$ref": "#/definitions/RecordRef"
                },
                "startDate": {
                    "x-displayName": "Start Date",
                    "format": "date-time",
                    "type": "string"
                },
                "tax1Acct": {
                    "x-displayName": "Tax Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxAccount": {
                    "x-displayName": "Tax Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "tax1Amt": {
                    "x-displayName": "VAT Amt",
                    "format": "double",
                    "type": "number"
                },
                "taxBasis": {
                    "x-displayName": "Tax Basis",
                    "format": "double",
                    "type": "number"
                },
                "totalAmount": {
                    "x-displayName": "Total Amount",
                    "format": "double",
                    "type": "number"
                },
                "taxCode": {
                    "x-displayName": "VAT",
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "x-displayName": "VAT Rate",
                    "format": "double",
                    "type": "number"
                },
                "line": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "JournalEntryLineList": {
            "required": [
                "line"
            ],
            "properties": {
                "line": {
                    "items": {
                        "$ref": "#/definitions/JournalEntryLine"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "Language": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "LedgerAccount": {
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "acctName": {
                    "type": "string",
                    "x-displayName": "Name"
                },
                "acctNumber": {
                    "type": "string",
                    "x-displayName": "Number"
                },
                "acctType": {
                    "$ref": "#/definitions/AccountType",
                    "x-displayName": "Type"
                },
                "billableExpensesAcct": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Track Billable Expenses in"
                },
                "cashFlowRate": {
                    "$ref": "#/definitions/ConsolidatedRate",
                    "x-displayName": "Cash Flow Rate Type"
                },
                "category1099Misc": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "1099-MISC Category"
                },
                "curDocNum": {
                    "format": "int64",
                    "type": "integer"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Currency"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "deferralAcct": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Deferral Account"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "description": {
                    "type": "string",
                    "x-displayName": "Description"
                },
                "eliminate": {
                    "type": "boolean",
                    "x-displayName": "Eliminate Intercompany Transactions"
                },
                "exchangeRate": {
                    "type": "string",
                    "x-displayName": "Exchange Rate",
                    "x-readOnly": true
                },
                "externalId": {
                    "type": "string"
                },
                "generalRate": {
                    "$ref": "#/definitions/ConsolidatedRate",
                    "x-displayName": "General Rate Type"
                },
                "includeChildren": {
                    "type": "boolean",
                    "x-displayName": "Include Children"
                },
                "internalId": {
                    "type": "string"
                },
                "inventory": {
                    "type": "boolean",
                    "x-displayName": "Inventory"
                },
                "isInactive": {
                    "type": "boolean",
                    "x-displayName": "Inactive"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "restrictToAccountingBookList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "openingBalance": {
                    "type": "number",
                    "x-displayName": "Opening Balance",
                    "format": "double"
                },
                "parent": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Subaccount of"
                },
                "revalue": {
                    "type": "boolean",
                    "x-displayName": "Revalue Open Balance for Foreign Currency Transactions"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-displayName": "Date"
                },
                "translationsList": {
                    "$ref": "#/definitions/AccountTranslationList"
                },
                "unit": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Default Unit"
                },
                "unitsType": {
                    "$ref": "#/definitions/RecordRef",
                    "x-displayName": "Unit Type"
                }
            }
        },
        "LedgerAccountCreate": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "LedgerAccount",
            "x-has-customfields": true,
            "required": [
                "acctNumber",
                "currency",
                "acctName"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "acctName": {
                    "x-displayName": "Name",
                    "type": "string"
                },
                "acctNumber": {
                    "x-displayName": "Number",
                    "type": "string"
                },
                "class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "acctType": {
                    "x-displayName": "Type",
                    "$ref": "#/definitions/AccountType"
                },
                "billableExpensesAcct": {
                    "x-displayName": "Track Billable Expenses in",
                    "$ref": "#/definitions/RecordRef"
                },
                "cashFlowRate": {
                    "x-displayName": "Cash Flow Rate Type",
                    "$ref": "#/definitions/ConsolidatedRate"
                },
                "category1099Misc": {
                    "x-displayName": "1099-MISC Category",
                    "$ref": "#/definitions/RecordRef"
                },
                "curDocNum": {
                    "format": "int64",
                    "type": "integer"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "deferralAcct": {
                    "x-displayName": "Deferral Account",
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "description": {
                    "x-displayName": "Description",
                    "type": "string"
                },
                "legalName": {
                    "type": "string"
                },
                "eliminate": {
                    "x-displayName": "Eliminate Intercompany Transactions",
                    "type": "boolean"
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "x-readOnly": true,
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "generalRate": {
                    "x-displayName": "General Rate Type",
                    "$ref": "#/definitions/ConsolidatedRate"
                },
                "includeChildren": {
                    "x-displayName": "Include Children",
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string"
                },
                "inventory": {
                    "x-displayName": "Inventory",
                    "type": "boolean"
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "type": "boolean"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "restrictToAccountingBookList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "openingBalance": {
                    "x-displayName": "Opening Balance",
                    "format": "double",
                    "type": "number"
                },
                "parent": {
                    "x-displayName": "Subaccount of",
                    "$ref": "#/definitions/RecordRef"
                },
                "revalue": {
                    "x-displayName": "Revalue Open Balance for Foreign Currency Transactions",
                    "type": "boolean"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "tranDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string"
                },
                "translationsList": {
                    "$ref": "#/definitions/AccountTranslationList"
                },
                "unit": {
                    "x-displayName": "Default Unit",
                    "$ref": "#/definitions/RecordRef"
                },
                "unitsType": {
                    "x-displayName": "Unit Type",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "ListOrRecordRef": {
            "properties": {
                "externalId": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "typeId": {
                    "type": "string"
                }
            }
        },
        "MatrixOptionList": {
            "properties": {
                "matrixOption": {
                    "items": {
                        "$ref": "#/definitions/SelectCustomFieldRef"
                    },
                    "type": "array"
                }
            }
        },
        "Opportunity": {
            "required": [
                "entity",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "actionItem": {
                    "type": "string"
                },
                "altSalesRangeHigh": {
                    "type": "number"
                },
                "altSalesRangeLow": {
                    "type": "number"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "buyingReason": {
                    "$ref": "#/definitions/RecordRef"
                },
                "buyingTimeFrame": {
                    "$ref": "#/definitions/RecordRef"
                },
                "closeDate": {
                    "format": "date",
                    "type": "string"
                },
                "competitorsList": {
                    "$ref": "#/definitions/OpportunityCompetitorsList"
                },
                "contribPct": {
                    "type": "string"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currencyName": {
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "daysOpen": {
                    "type": "number"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entityStatus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "estGrossProfit": {
                    "type": "number"
                },
                "estGrossProfitPercent": {
                    "type": "number"
                },
                "estimatedBudget": {
                    "type": "number"
                },
                "exchangeRate": {
                    "type": "number"
                },
                "expectedCloseDate": {
                    "format": "date",
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "forecastType": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "isBudgetApproved": {
                    "type": "boolean"
                },
                "itemList": {
                    "$ref": "#/definitions/OpportunityItemList"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "leadSource": {
                    "$ref": "#/definitions/RecordRef"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "memo": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "partner": {
                    "$ref": "#/definitions/RecordRef"
                },
                "partnersList": {
                    "$ref": "#/definitions/OpportunityPartnersList"
                },
                "probability": {
                    "type": "number"
                },
                "projAltSalesAmt": {
                    "type": "number"
                },
                "projectedTotal": {
                    "type": "number"
                },
                "rangeHigh": {
                    "type": "number"
                },
                "rangeLow": {
                    "type": "number"
                },
                "salesGroup": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesReadiness": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesRep": {
                    "$ref": "#/definitions/RecordRef"
                },
                "salesTeamList": {
                    "$ref": "#/definitions/OpportunitySalesTeamList"
                },
                "shipAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipIsResidential": {
                    "type": "boolean"
                },
                "shippingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "syncPartnerTeams": {
                    "type": "boolean"
                },
                "syncSalesTeams": {
                    "type": "boolean"
                },
                "tax2Total": {
                    "type": "number"
                },
                "taxTotal": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                },
                "totalCostEstimate": {
                    "type": "number"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "tranId": {
                    "type": "string"
                },
                "vatRegNum": {
                    "type": "string"
                },
                "weightedTotal": {
                    "type": "number"
                },
                "winLossReason": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "OpportunityCompetitors": {
            "properties": {
                "competitor": {
                    "$ref": "#/definitions/RecordRef"
                },
                "notes": {
                    "type": "string"
                },
                "strategy": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "winner": {
                    "type": "boolean"
                }
            }
        },
        "OpportunityCompetitorsList": {
            "properties": {
                "competitors": {
                    "items": {
                        "$ref": "#/definitions/OpportunityCompetitors"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "OpportunityItem": {
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "altSalesAmt": {
                    "type": "number"
                },
                "amount": {
                    "type": "number"
                },
                "costEstimate": {
                    "type": "number"
                },
                "costEstimateType": {
                    "$ref": "#/definitions/ItemCostEstimateType"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "description": {
                    "type": "string"
                },
                "expectedShipDate": {
                    "format": "date",
                    "type": "string"
                },
                "fromJob": {
                    "type": "boolean"
                },
                "grossAmt": {
                    "type": "number"
                },
                "isEstimate": {
                    "type": "boolean"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "job": {
                    "$ref": "#/definitions/RecordRef"
                },
                "line": {
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "price": {
                    "$ref": "#/definitions/RecordRef"
                },
                "quantity": {
                    "type": "number"
                },
                "quantityAvailable": {
                    "type": "number"
                },
                "quantityOnHand": {
                    "type": "number"
                },
                "rate": {
                    "type": "string"
                },
                "revRecTermInMonths": {
                    "type": "number"
                },
                "tax1Amt": {
                    "type": "number"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "type": "number"
                },
                "taxRate2": {
                    "type": "number"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "OpportunityItemList": {
            "properties": {
                "item": {
                    "items": {
                        "$ref": "#/definitions/OpportunityItem"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "OpportunityPartnersList": {
            "properties": {
                "partners": {
                    "items": {
                        "$ref": "#/definitions/Partners"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "OpportunitySalesTeam": {
            "properties": {
                "contribution": {
                    "type": "number"
                },
                "employee": {
                    "$ref": "#/definitions/RecordRef"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "salesRole": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "OpportunitySalesTeamList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "salesTeam": {
                    "items": {
                        "$ref": "#/definitions/OpportunitySalesTeam"
                    },
                    "type": "array"
                }
            }
        },
        "Partners": {
            "properties": {
                "contribution": {
                    "x-displayName": "Contribution %",
                    "format": "double",
                    "type": "number"
                },
                "isPrimary": {
                    "x-displayName": "Primary",
                    "type": "boolean"
                },
                "partner": {
                    "x-displayName": "Partner",
                    "$ref": "#/definitions/RecordRef"
                },
                "partnerRole": {
                    "x-displayName": "Partner Role",
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "PaymentUpdate": {
            "x-vendor-objectname": "Payment",
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "\tReferences a value from a user defined list at Setup > Company > Classifications > Classes. This field is required when the Make Classes Mandatory preference is enabled at Setup > Accounting > Accounting Preferences."
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Sets the account used for payments already deposited. Required when undepFunds is set to FALSE.",
                    "x-reference-objectname": "Account"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailList"
                },
                "applyList": {
                    "$ref": "#/definitions/CustomerPaymentApplyList"
                },
                "arAcct": {
                    "x-displayName": "A/R Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the Accounts Receivable account that will be affected by this transaction.</p Click &#x2014;New &#x2014; to set up a new account."
                },
                "authCode": {
                    "x-displayName": "Auth. Code",
                    "type": "string",
                    "description": "Sets the authorization code for the transaction. If you have a NetSuite merchant account, then this field autofills with the authorization code as soon as the charge is approved. If you do not have a NetSuite merchant account, enter the authorization code you receive when the charge to the customer's credit card is validated outside of NetSuite, such as by a card-swipe terminal."
                },
                "autoApply": {
                    "x-displayName": "Auto Apply",
                    "type": "boolean",
                    "description": "If set to TRUE, payments are automatically applied to the oldest open receivable.",
                    "x-samplevalue": true
                },
                "ccApproved": {
                    "x-displayName": "Credit Card Approved",
                    "type": "boolean",
                    "description": "Sets the status of the credit card to approved.",
                    "x-samplevalue": false
                },
                "ccAvsStreetMatch": {
                    "x-displayName": "AVS Street Match",
                    "$ref": "#/definitions/AvsMatchCode",
                    "description": "References a value in a system list. This value sets the Address Verification Services (AVS) result code returned to VeriSign when a credit card transaction takes place. Possible values include _Y, _N _X. The possible values include: _Y &#xfffd; The address information submitted did match. _N &#xfffd; The address information submitted did not match. _X &#xfffd; The credit card company does not support AVS, or no information was returned to VeriSign. If getAuth is set to True, this value can NOT be set."
                },
                "ccAvsZipMatch": {
                    "x-displayName": "AVS Zip Match",
                    "$ref": "#/definitions/AvsMatchCode",
                    "description": "References a value in a system list. This value sets the Address Verification Services (AVS) result code returned to VeriSign when a credit card transaction takes place. Possible values include _Y, _N _X. The possible values include: _Y &#xfffd; The address information submitted did match. _N &#xfffd; The address information submitted did not match. _X &#xfffd; The credit card company does not support AVS, or no information was returned to VeriSign. If getAuth is set to True, this value can NOT be set."
                },
                "ccExpireDate": {
                    "x-displayName": "Expires (MM/YYYY)",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "01/2027",
                    "description": "Sets the credit card expiration date."
                },
                "ccName": {
                    "x-displayName": "Name on Card",
                    "type": "string",
                    "x-samplevalue": "Andrea Pirlo",
                    "description": "Defaults to the cardholder name from the default credit card on the customer's record. If the default credit card is not selected in creditCard, you must provide this value."
                },
                "ccNumber": {
                    "x-displayName": "Credit Card #",
                    "type": "string",
                    "description": "Use this field to set the credit card number. Enter numbers only, without spaces. Partially masked values are not accepted. Only a 16-digit number is accepted. On a get, this value is masked. When searching on this field, you can use only the empty and notEmpty operators."
                },
                "ccSecurityCode": {
                    "x-displayName": "CSC",
                    "type": "string",
                    "x-samplevalue": "1233",
                    "description": "Settable only if the Use Card Security Code for Credit Card Transactions company preference is enabled at Set Up > Accounting > Set Up Accounting."
                },
                "ccSecurityCodeMatch": {
                    "x-displayName": "CSC Match",
                    "$ref": "#/definitions/AvsMatchCode",
                    "description": "References a value in a system list. Possible values include: _Y &#xfffd; The security code information submitted did match. _N &#xfffd; The security code information submitted did not match. _X &#xfffd; The credit card company does not support security codes."
                },
                "ccStreet": {
                    "x-displayName": "Card Street",
                    "type": "string",
                    "x-samplevalue": "4th Avenue Hills",
                    "description": "Defaults to the street address from the customer's billing address."
                },
                "ccZipCode": {
                    "x-displayName": "Card Zip Code",
                    "type": "string",
                    "x-samplevalue": "75201-75212",
                    "description": "Defaults to the zip or postal code from the customer's billing address."
                },
                "chargeIt": {
                    "x-displayName": "Charge Credit Card",
                    "type": "boolean",
                    "description": "Check this box to make this payment by charging the credit card chosen in the Credit Card Select field.",
                    "x-samplevalue": false
                },
                "checkNum": {
                    "x-displayName": "{1} #",
                    "type": "string",
                    "description": "Sets the check number used for the payment.",
                    "x-samplevalue": "67204"
                },
                "creditCard": {
                    "x-displayName": "Cards on File",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References the credit card records associated with the customer record."
                },
                "creditCardProcessor": {
                    "x-displayName": "Payment Processing Profile",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a user-defined Credit Card Processor record at Setup > Company > Credit Card Processors."
                },
                "creditList": {
                    "$ref": "#/definitions/CustomerPaymentCreditList"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Currency",
                    "description": "\tReferences a value in a user-defined list at Lists > Accounting > Currencies. (Note that the Multiple Currencies feature must be enabled before you can set currency values.)"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an exiting customer or job record. Required on Add.",
                    "x-reference-objectname": "Customer"
                },
                "debitCardIssueNo": {
                    "x-displayName": "Issue No.",
                    "type": "string",
                    "x-samplevalue": "4000102352349234",
                    "description": "Sets the debit card authorization number for UK accounts only. The debit card authorization number is printed on the card. Required for users of SecPay or WorldPay."
                },
                "department": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value from a user defined list at Setup > Company > Departments.",
                    "x-reference-objectname": "Department"
                },
                "depositList": {
                    "$ref": "#/definitions/CustomerPaymentDepositList"
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number",
                    "description": "Required on Add. Defaults to the rate associated with the customer set in the customer field.",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": 0.98
                },
                "externalId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "tran154"
                },
                "ignoreAvs": {
                    "x-displayName": "Ignore AVS",
                    "type": "boolean",
                    "description": "Check the Ignore AVS box to ignore the results of the Address Verification System (AVS) pre-authorization check. If you choose to ignore the AVS check, when a customer's address information does not match the billing address of the credit card account, then Cybersource still processes the payment.",
                    "x-samplevalue": false
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "50"
                },
                "isRecurringPayment": {
                    "x-displayName": "Recurring Payment",
                    "type": "boolean",
                    "description": "This box is checked if this payment was created for a recurring cash sale. Payments marked as recurring can be successfully processed even if the credit card expires during the billing schedule. You should not check this box for standalone payments. You should only check this box for transactions with recurring payments. It can be used for cash sale sales orders with billing schedules or memorizes cash sale sales orders.",
                    "x-samplevalue": false
                },
                "location": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field is only settable if the Mulit-Location Inventory (MLI) feature is turned off.",
                    "x-reference-objectname": "Location"
                },
                "memo": {
                    "x-displayName": "Memo",
                    "type": "string",
                    "x-samplevalue": "Memo description",
                    "description": "If you wish, enter a memo to describe this payment. It will appear on reports such as the 2-line Accounts Receivable register that NetSuite merchants and their guest-customers can see (if given permission to log in and view their transaction history)."
                },
                "payment": {
                    "x-displayName": "Payment Amount",
                    "format": "double",
                    "type": "number",
                    "description": "Sets the total amount of payment for this customer.",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1.01
                },
                "paymentMethod": {
                    "x-displayName": "Pmt. Meth.",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Reference to a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > New > Payment Method. This value sets the type of card.",
                    "x-reference-objectname": "Payment-Methods"
                },
                "pnRefNum": {
                    "x-displayName": "P/N Ref.",
                    "type": "string",
                    "description": "If you accept credit card payments, the Verisign authentication code appears here once the payment is approved."
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Required on Add when the Accounting Periods feature is enabled.",
                    "x-reference-objectname": "Posting Period"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field shows the subsidiary associated with this transaction.",
                    "x-reference-objectname": "Subsidiary"
                },
                "threeDStatusCode": {
                    "x-displayName": "Payer Authentication Status",
                    "type": "string"
                },
                "tranId": {
                    "x-displayName": "Payment #",
                    "type": "string",
                    "description": "This is the document number automatically generated for the transaction by NetSuite.",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "1"
                },
                "tranDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string",
                    "description": "Required on Add. Defaults to the current date.",
                    "x-samplevalue": "2013-08-10T07:00:00Z"
                },
                "undepFunds": {
                    "x-displayName": "Undep. Funds",
                    "type": "boolean",
                    "description": "Set to TRUE if entering a payment that will be deposited to a bank account later. If set to FALSE, set an account in the account field.",
                    "x-samplevalue": false
                }
            }
        },
        "Payment": {
            "x-vendor-objectname": "Payment",
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "\tReferences a value from a user defined list at Setup > Company > Classifications > Classes. This field is required when the Make Classes Mandatory preference is enabled at Setup > Accounting > Accounting Preferences."
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Sets the account used for payments already deposited. Required when undepFunds is set to FALSE.",
                    "x-reference-objectname": "Account"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailList"
                },
                "applied": {
                    "x-displayName": "Applied",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "description": "A read-only field that returns the total of payments applied.",
                    "x-sub-format": "Money",
                    "x-samplevalue": 9000.01
                },
                "applyList": {
                    "$ref": "#/definitions/CustomerPaymentApplyList"
                },
                "arAcct": {
                    "x-displayName": "A/R Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the Accounts Receivable account that will be affected by this transaction.</p Click &#x2014;New &#x2014; to set up a new account."
                },
                "authCode": {
                    "x-displayName": "Auth. Code",
                    "type": "string",
                    "description": "Sets the authorization code for the transaction. If you have a NetSuite merchant account, then this field autofills with the authorization code as soon as the charge is approved. If you do not have a NetSuite merchant account, enter the authorization code you receive when the charge to the customer's credit card is validated outside of NetSuite, such as by a card-swipe terminal."
                },
                "autoApply": {
                    "x-displayName": "Auto Apply",
                    "type": "boolean",
                    "description": "If set to TRUE, payments are automatically applied to the oldest open receivable.",
                    "x-samplevalue": true
                },
                "balance": {
                    "x-displayName": "Current Balance",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "description": "A read-only field that returns the balance in the customer&#xfffd;s account.",
                    "x-sub-format": "Money",
                    "x-samplevalue": 100.01
                },
                "ccApproved": {
                    "x-displayName": "Credit Card Approved",
                    "type": "boolean",
                    "description": "Sets the status of the credit card to approved.",
                    "x-samplevalue": false
                },
                "ccAvsStreetMatch": {
                    "x-displayName": "AVS Street Match",
                    "$ref": "#/definitions/AvsMatchCode",
                    "description": "References a value in a system list. This value sets the Address Verification Services (AVS) result code returned to VeriSign when a credit card transaction takes place. Possible values include _Y, _N _X. The possible values include: _Y &#xfffd; The address information submitted did match. _N &#xfffd; The address information submitted did not match. _X &#xfffd; The credit card company does not support AVS, or no information was returned to VeriSign. If getAuth is set to True, this value can NOT be set."
                },
                "ccAvsZipMatch": {
                    "x-displayName": "AVS Zip Match",
                    "$ref": "#/definitions/AvsMatchCode",
                    "description": "References a value in a system list. This value sets the Address Verification Services (AVS) result code returned to VeriSign when a credit card transaction takes place. Possible values include _Y, _N _X. The possible values include: _Y &#xfffd; The address information submitted did match. _N &#xfffd; The address information submitted did not match. _X &#xfffd; The credit card company does not support AVS, or no information was returned to VeriSign. If getAuth is set to True, this value can NOT be set."
                },
                "ccExpireDate": {
                    "x-displayName": "Expires (MM/YYYY)",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "01/2027",
                    "description": "Sets the credit card expiration date."
                },
                "ccIsPurchaseCardBin": {
                    "x-displayName": "Purchase Card BIN",
                    "type": "boolean",
                    "x-samplevalue": false,
                    "description": "This box is marked when NetSuite determines that the credit card entered is a purchase card. If you use the Send Purchase Card Data feature and the Process as Purchase Card box is also checked, this credit card payment will be processed by NetSuite as a purchase card. Contact your NetSuite account representative for more information."
                },
                "ccName": {
                    "x-displayName": "Name on Card",
                    "type": "string",
                    "x-samplevalue": "Andrea Pirlo",
                    "description": "Defaults to the cardholder name from the default credit card on the customer's record. If the default credit card is not selected in creditCard, you must provide this value."
                },
                "ccNumber": {
                    "x-displayName": "Credit Card #",
                    "type": "string",
                    "description": "Use this field to set the credit card number. Enter numbers only, without spaces. Partially masked values are not accepted. Only a 16-digit number is accepted. On a get, this value is masked. When searching on this field, you can use only the empty and notEmpty operators."
                },
                "ccProcessAsPurchaseCard": {
                    "x-displayName": "Process as Purchase Card",
                    "type": "boolean",
                    "x-samplevalue": false,
                    "description": "This box is checked when NetSuite has determined that the credit card entered is a purchase card. You can clear this box if you need to process this payment as a Level I payment transaction. If NetSuite does not recognize the credit card entered as a purchase card but you want to process it as one, check this box."
                },
                "ccSecurityCode": {
                    "x-displayName": "CSC",
                    "type": "string",
                    "x-samplevalue": "1233",
                    "description": "Settable only if the Use Card Security Code for Credit Card Transactions company preference is enabled at Set Up > Accounting > Set Up Accounting."
                },
                "ccSecurityCodeMatch": {
                    "x-displayName": "CSC Match",
                    "$ref": "#/definitions/AvsMatchCode",
                    "description": "References a value in a system list. Possible values include: _Y &#xfffd; The security code information submitted did match. _N &#xfffd; The security code information submitted did not match. _X &#xfffd; The credit card company does not support security codes."
                },
                "ccStreet": {
                    "x-displayName": "Card Street",
                    "type": "string",
                    "x-samplevalue": "4th Avenue Hills",
                    "description": "Defaults to the street address from the customer's billing address."
                },
                "ccZipCode": {
                    "x-displayName": "Card Zip Code",
                    "type": "string",
                    "x-samplevalue": "75201-75212",
                    "description": "Defaults to the zip or postal code from the customer's billing address."
                },
                "chargeIt": {
                    "x-displayName": "Charge Credit Card",
                    "type": "boolean",
                    "description": "Check this box to make this payment by charging the credit card chosen in the Credit Card Select field.",
                    "x-samplevalue": false
                },
                "checkNum": {
                    "x-displayName": "{1} #",
                    "type": "string",
                    "description": "Sets the check number used for the payment.",
                    "x-samplevalue": "67204"
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string",
                    "description": "When adding a record, this field defaults to the current system date and time. This field cannot be overwritten. The default value is set regardless of any use default settings.",
                    "x-samplevalue": "2013-09-01T04:06:52Z"
                },
                "creditCard": {
                    "x-displayName": "Cards on File",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References the credit card records associated with the customer record."
                },
                "creditCardProcessor": {
                    "x-displayName": "Payment Processing Profile",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a user-defined Credit Card Processor record at Setup > Company > Credit Card Processors."
                },
                "creditList": {
                    "$ref": "#/definitions/CustomerPaymentCreditList"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Currency",
                    "description": "\tReferences a value in a user-defined list at Lists > Accounting > Currencies. (Note that the Multiple Currencies feature must be enabled before you can set currency values.)"
                },
                "currencyName": {
                    "x-displayName": "Currency",
                    "x-readOnly": true,
                    "type": "string",
                    "description": "\tA read only field that defaults to the currency associated with the customer referenced by the entity field.",
                    "x-samplevalue": "USA"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an exiting customer or job record. Required on Add.",
                    "x-reference-objectname": "Customer"
                },
                "debitCardIssueNo": {
                    "x-displayName": "Issue No.",
                    "type": "string",
                    "x-samplevalue": "4000102352349234",
                    "description": "Sets the debit card authorization number for UK accounts only. The debit card authorization number is printed on the card. Required for users of SecPay or WorldPay."
                },
                "department": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value from a user defined list at Setup > Company > Departments.",
                    "x-reference-objectname": "Department"
                },
                "depositList": {
                    "$ref": "#/definitions/CustomerPaymentDepositList"
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number",
                    "description": "Required on Add. Defaults to the rate associated with the customer set in the customer field.",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": 0.98
                },
                "externalId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "tran154"
                },
                "ignoreAvs": {
                    "x-displayName": "Ignore AVS",
                    "type": "boolean",
                    "description": "Check the Ignore AVS box to ignore the results of the Address Verification System (AVS) pre-authorization check. If you choose to ignore the AVS check, when a customer's address information does not match the billing address of the credit card account, then Cybersource still processes the payment.",
                    "x-samplevalue": false
                },
                "internalId": {
                    "x-readOnly": true,
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "50"
                },
                "isRecurringPayment": {
                    "x-displayName": "Recurring Payment",
                    "type": "boolean",
                    "description": "This box is checked if this payment was created for a recurring cash sale. Payments marked as recurring can be successfully processed even if the credit card expires during the billing schedule. You should not check this box for standalone payments. You should only check this box for transactions with recurring payments. It can be used for cash sale sales orders with billing schedules or memorizes cash sale sales orders.",
                    "x-samplevalue": false
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "description": "This is a read only field. When updating a record, this field defaults to the current system date and time.",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "2015-09-21T19:13:19Z"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field is only settable if the Mulit-Location Inventory (MLI) feature is turned off.",
                    "x-reference-objectname": "Location"
                },
                "memo": {
                    "x-displayName": "Memo",
                    "type": "string",
                    "x-samplevalue": "Memo description",
                    "description": "If you wish, enter a memo to describe this payment. It will appear on reports such as the 2-line Accounts Receivable register that NetSuite merchants and their guest-customers can see (if given permission to log in and view their transaction history)."
                },
                "payment": {
                    "x-displayName": "Payment Amount",
                    "format": "double",
                    "type": "number",
                    "description": "Sets the total amount of payment for this customer.",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1.01
                },
                "paymentMethod": {
                    "x-displayName": "Pmt. Meth.",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Reference to a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > New > Payment Method. This value sets the type of card.",
                    "x-reference-objectname": "Payment-Methods"
                },
                "pending": {
                    "x-displayName": "Pending",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "description": "A read-only field that returns the sum of unapproved credit card payments for the customer.",
                    "x-samplevalue": 10.01
                },
                "pnRefNum": {
                    "x-displayName": "P/N Ref.",
                    "type": "string",
                    "description": "If you accept credit card payments, the Verisign authentication code appears here once the payment is approved."
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Required on Add when the Accounting Periods feature is enabled.",
                    "x-reference-objectname": "Posting Period"
                },
                "status": {
                    "x-displayName": "Status",
                    "type": "string",
                    "x-readOnly": true,
                    "enum": [
                        "Deposited",
                        "Not Deposited"
                    ],
                    "description": "This is a read-only field that returns the status of the Cash Refund.",
                    "x-samplevalue": "Not Deposited"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field shows the subsidiary associated with this transaction.",
                    "x-reference-objectname": "Subsidiary"
                },
                "threeDStatusCode": {
                    "x-displayName": "Payer Authentication Status",
                    "type": "string"
                },
                "tranId": {
                    "x-displayName": "Payment #",
                    "type": "string",
                    "description": "This is the document number automatically generated for the transaction by NetSuite.",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "1"
                },
                "total": {
                    "x-displayName": "To Apply",
                    "x-samplevalue": 100.01,
                    "format": "double",
                    "type": "number"
                },
                "tranDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string",
                    "description": "Required on Add. Defaults to the current date.",
                    "x-samplevalue": "2013-08-10T07:00:00Z"
                },
                "unapplied": {
                    "x-displayName": "Unapplied",
                    "x-readOnly": true,
                    "format": "double",
                    "type": "number",
                    "description": "A read-only field that returns the difference between amounts available to apply to payments and payments applied.",
                    "x-samplevalue": 100.01
                },
                "undepFunds": {
                    "x-displayName": "Undep. Funds",
                    "type": "boolean",
                    "description": "Set to TRUE if entering a payment that will be deposited to a bank account later. If set to FALSE, set an account in the account field.",
                    "x-samplevalue": false
                },
                "validFrom": {
                    "x-displayName": "Valid From / Start Date (MM/YYYY)",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "04/2016",
                    "description": "Enter the date when this card first became valid."
                }
            }
        },
        "PaymentCreate": {
            "required": [
                "payment",
                "customer"
            ],
            "x-vendor-objectname": "Payment",
            "x-has-customfields": true,
            "x-primary-key": [
                "internalId"
            ],
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "\tReferences a value from a user defined list at Setup > Company > Classifications > Classes. This field is required when the Make Classes Mandatory preference is enabled at Setup > Accounting > Accounting Preferences."
                },
                "account": {
                    "x-displayName": "Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Sets the account used for payments already deposited. Required when undepFunds is set to FALSE.",
                    "x-reference-objectname": "Account"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailList"
                },
                "applyList": {
                    "$ref": "#/definitions/CustomerPaymentApplyList"
                },
                "arAcct": {
                    "x-displayName": "A/R Account",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Select the Accounts Receivable account that will be affected by this transaction.</p Click &#x2014;New &#x2014; to set up a new account."
                },
                "authCode": {
                    "x-displayName": "Auth. Code",
                    "type": "string",
                    "description": "Sets the authorization code for the transaction. If you have a NetSuite merchant account, then this field autofills with the authorization code as soon as the charge is approved. If you do not have a NetSuite merchant account, enter the authorization code you receive when the charge to the customer's credit card is validated outside of NetSuite, such as by a card-swipe terminal."
                },
                "autoApply": {
                    "x-displayName": "Auto Apply",
                    "type": "boolean",
                    "description": "If set to TRUE, payments are automatically applied to the oldest open receivable.",
                    "x-samplevalue": true
                },
                "ccApproved": {
                    "x-displayName": "Credit Card Approved",
                    "type": "boolean",
                    "description": "Sets the status of the credit card to approved.",
                    "x-samplevalue": false
                },
                "ccAvsStreetMatch": {
                    "x-displayName": "AVS Street Match",
                    "$ref": "#/definitions/AvsMatchCode",
                    "description": "References a value in a system list. This value sets the Address Verification Services (AVS) result code returned to VeriSign when a credit card transaction takes place. Possible values include _Y, _N _X. The possible values include: _Y &#xfffd; The address information submitted did match. _N &#xfffd; The address information submitted did not match. _X &#xfffd; The credit card company does not support AVS, or no information was returned to VeriSign. If getAuth is set to True, this value can NOT be set."
                },
                "ccAvsZipMatch": {
                    "x-displayName": "AVS Zip Match",
                    "$ref": "#/definitions/AvsMatchCode",
                    "description": "References a value in a system list. This value sets the Address Verification Services (AVS) result code returned to VeriSign when a credit card transaction takes place. Possible values include _Y, _N _X. The possible values include: _Y &#xfffd; The address information submitted did match. _N &#xfffd; The address information submitted did not match. _X &#xfffd; The credit card company does not support AVS, or no information was returned to VeriSign. If getAuth is set to True, this value can NOT be set."
                },
                "ccExpireDate": {
                    "x-displayName": "Expires (MM/YYYY)",
                    "format": "date-time",
                    "type": "string",
                    "x-samplevalue": "01/2027",
                    "description": "Sets the credit card expiration date."
                },
                "ccName": {
                    "x-displayName": "Name on Card",
                    "type": "string",
                    "x-samplevalue": "Andrea Pirlo",
                    "description": "Defaults to the cardholder name from the default credit card on the customer's record. If the default credit card is not selected in creditCard, you must provide this value."
                },
                "ccNumber": {
                    "x-displayName": "Credit Card #",
                    "type": "string",
                    "x-samplevalue": "111111111111111",
                    "description": "Use this field to set the credit card number. Enter numbers only, without spaces. Partially masked values are not accepted. Only a 16-digit number is accepted. On a get, this value is masked. When searching on this field, you can use only the empty and notEmpty operators."
                },
                "ccSecurityCode": {
                    "x-displayName": "CSC",
                    "type": "string",
                    "x-samplevalue": "1233",
                    "description": "Settable only if the Use Card Security Code for Credit Card Transactions company preference is enabled at Set Up > Accounting > Set Up Accounting."
                },
                "ccSecurityCodeMatch": {
                    "x-displayName": "CSC Match",
                    "$ref": "#/definitions/AvsMatchCode",
                    "description": "References a value in a system list. Possible values include: _Y &#xfffd; The security code information submitted did match. _N &#xfffd; The security code information submitted did not match. _X &#xfffd; The credit card company does not support security codes."
                },
                "ccStreet": {
                    "x-displayName": "Card Street",
                    "type": "string",
                    "x-samplevalue": "4th Avenue Hills",
                    "description": "Defaults to the street address from the customer's billing address."
                },
                "ccZipCode": {
                    "x-displayName": "Card Zip Code",
                    "type": "string",
                    "x-samplevalue": "75201-75212",
                    "description": "Defaults to the zip or postal code from the customer's billing address."
                },
                "chargeIt": {
                    "x-displayName": "Charge Credit Card",
                    "type": "boolean",
                    "description": "Check this box to make this payment by charging the credit card chosen in the Credit Card Select field.",
                    "x-samplevalue": false
                },
                "checkNum": {
                    "x-displayName": "{1} #",
                    "type": "string",
                    "description": "Sets the check number used for the payment.",
                    "x-samplevalue": "67204"
                },
                "creditCard": {
                    "x-displayName": "Cards on File",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References the credit card records associated with the customer record."
                },
                "creditCardProcessor": {
                    "x-displayName": "Payment Processing Profile",
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a user-defined Credit Card Processor record at Setup > Company > Credit Card Processors."
                },
                "creditList": {
                    "$ref": "#/definitions/CustomerPaymentCreditList"
                },
                "currency": {
                    "x-displayName": "Currency",
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Currency",
                    "description": "\tReferences a value in a user-defined list at Lists > Accounting > Currencies. (Note that the Multiple Currencies feature must be enabled before you can set currency values.)"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "References an exiting customer or job record. Required on Add.",
                    "x-reference-objectname": "Customer"
                },
                "debitCardIssueNo": {
                    "x-displayName": "Issue No.",
                    "type": "string",
                    "x-samplevalue": "1234",
                    "description": "Sets the debit card authorization number for UK accounts only. The debit card authorization number is printed on the card. Required for users of SecPay or WorldPay."
                },
                "department": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "References a value from a user defined list at Setup > Company > Departments."
                },
                "depositList": {
                    "x-reference-objectname": "Department",
                    "$ref": "#/definitions/CustomerPaymentDepositList"
                },
                "exchangeRate": {
                    "x-displayName": "Exchange Rate",
                    "format": "double",
                    "type": "number",
                    "description": "Required on Add. Defaults to the rate associated with the customer set in the customer field.",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": 1.01
                },
                "externalId": {
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "tran154"
                },
                "ignoreAvs": {
                    "x-displayName": "Ignore AVS",
                    "type": "boolean",
                    "description": "Check the Ignore AVS box to ignore the results of the Address Verification System (AVS) pre-authorization check. If you choose to ignore the AVS check, when a customer's address information does not match the billing address of the credit card account, then Cybersource still processes the payment.",
                    "x-samplevalue": false
                },
                "isRecurringPayment": {
                    "x-displayName": "Recurring Payment",
                    "type": "boolean",
                    "description": "This box is checked if this payment was created for a recurring cash sale. Payments marked as recurring can be successfully processed even if the credit card expires during the billing schedule. You should not check this box for standalone payments. You should only check this box for transactions with recurring payments. It can be used for cash sale sales orders with billing schedules or memorizes cash sale sales orders.",
                    "x-samplevalue": false
                },
                "location": {
                    "x-reference-objectname": "Location",
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field is only settable if the Mulit-Location Inventory (MLI) feature is turned off."
                },
                "memo": {
                    "x-displayName": "Memo",
                    "type": "string",
                    "x-reference-objectname": "Memo description",
                    "description": "If you wish, enter a memo to describe this payment. It will appear on reports such as the 2-line Accounts Receivable register that NetSuite merchants and their guest-customers can see (if given permission to log in and view their transaction history)."
                },
                "payment": {
                    "x-displayName": "Payment Amount",
                    "format": "double",
                    "type": "number",
                    "description": "Sets the total amount of payment for this customer.",
                    "x-sub-format": "Money",
                    "x-samplevalue": 1.01
                },
                "paymentMethod": {
                    "x-displayName": "Pmt. Meth.",
                    "$ref": "#/definitions/RecordRef",
                    "description": "Reference to a value in a user-defined list at Setup > Accounting > Setup Tasks > Accounting Lists > New > Payment Method. This value sets the type of card.",
                    "x-reference-objectname": "Payment-Methods"
                },
                "pnRefNum": {
                    "x-displayName": "P/N Ref.",
                    "type": "string",
                    "description": "If you accept credit card payments, the Verisign authentication code appears here once the payment is approved."
                },
                "postingPeriod": {
                    "x-displayName": "Posting Period",
                    "$ref": "#/definitions/RecordRef",
                    "x-reference-objectname": "Posting Period",
                    "description": "Required on Add when the Accounting Periods feature is enabled."
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef",
                    "description": "This field shows the subsidiary associated with this transaction.",
                    "x-reference-objectname": "Subsidiary"
                },
                "threeDStatusCode": {
                    "x-displayName": "Payer Authentication Status",
                    "type": "string"
                },
                "tranId": {
                    "x-displayName": "Payment #",
                    "type": "string",
                    "description": "This is the document number automatically generated for the transaction by NetSuite.",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "x-samplevalue": "1"
                },
                "tranDate": {
                    "x-displayName": "Date",
                    "format": "date-time",
                    "type": "string",
                    "description": "Required on Add. Defaults to the current date.",
                    "x-samplevalue": "2013-08-10T07:00:00Z"
                },
                "undepFunds": {
                    "x-displayName": "Undep. Funds",
                    "type": "boolean",
                    "x-samplevalue": true,
                    "description": "Set to TRUE if entering a payment that will be deposited to a bank account later. If set to FALSE, set an account in the account field."
                }
            }
        },
        "PaymentMethod": {
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "account": {
                    "$ref": "#/definitions/RecordRef"
                },
                "creditCard": {
                    "type": "boolean"
                },
                "expressCheckoutArrangement": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "isDebitCard": {
                    "type": "boolean"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "isOnline": {
                    "type": "boolean"
                },
                "merchantAccountsList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "name": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "payPalEmailAddress": {
                    "type": "string"
                },
                "undepFunds": {
                    "type": "boolean"
                },
                "useExpressCheckout": {
                    "type": "boolean"
                },
                "visualsList": {
                    "$ref": "#/definitions/PaymentMethodVisualsList"
                }
            }
        },
        "PaymentMethodVisuals": {
            "properties": {
                "flags": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "PaymentMethodVisualsList": {
            "properties": {
                "paymentMethodVisuals": {
                    "items": {
                        "$ref": "#/definitions/PaymentMethodVisuals"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "PeriodicLotSizeType": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_interval",
                        "_monthly",
                        "_weekly"
                    ],
                    "x-sub-format": "enum"
                }
            }
        },
        "PresentationItemResponse": {
            "properties": {
                "onlinePrice": {
                    "x-displayName": "Online Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "item": {
                    "x-displayName": "Item",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "itemType": {
                    "x-displayName": "Type",
                    "$ref": "#/definitions/PresentationItemType"
                },
                "description": {
                    "x-displayName": "Item Description",
                    "x-name": true,
                    "type": "string"
                },
                "basePrice": {
                    "x-displayName": "Base Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                }
            }
        },
        "PresentationItem": {
            "properties": {
                "onlinePrice": {
                    "x-displayName": "Online Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "item": {
                    "x-displayName": "Item",
                    "$ref": "#/definitions/RecordRef"
                },
                "itemType": {
                    "x-displayName": "Type",
                    "$ref": "#/definitions/PresentationItemType"
                },
                "description": {
                    "x-displayName": "Item Description",
                    "x-name": true,
                    "type": "string"
                },
                "basePrice": {
                    "x-displayName": "Base Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                }
            }
        },
        "ServiceItemTaskTemplatesList": {
            "properties": {
                "taskTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceItemTaskTemplates"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ServiceItemTaskTemplates": {
            "properties": {
                "taskStartOffset": {
                    "type": "integer",
                    "format": "int64"
                },
                "taskDuration": {
                    "$ref": "#/definitions/Duration"
                },
                "taskName": {
                    "type": "string"
                }
            }
        },
        "PresentationItemListResponse": {
            "properties": {
                "presentationItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PresentationItemResponse"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "PresentationItemList": {
            "properties": {
                "presentationItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PresentationItem"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "InventoryItemBinNumberListResponse": {
            "properties": {
                "binNumber": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InventoryItemBinNumberResponse"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "PresentationItemType": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_fileCabinetItem",
                        "_informationItem",
                        "_item",
                        "_presentationCategory"
                    ],
                    "x-sub-format": "enum"
                }
            }
        },
        "Price": {
            "properties": {
                "quantity": {
                    "format": "double",
                    "type": "number"
                },
                "value": {
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                }
            }
        },
        "PriceList": {
            "properties": {
                "price": {
                    "items": {
                        "$ref": "#/definitions/Price"
                    },
                    "type": "array"
                }
            }
        },
        "PricingResponse": {
            "properties": {
                "discount": {
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "Currency"
                },
                "priceLevel": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "PriceLevel"
                },
                "priceList": {
                    "$ref": "#/definitions/PriceList"
                }
            }
        },
        "Pricing": {
            "properties": {
                "discount": {
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "priceLevel": {
                    "$ref": "#/definitions/RecordRef"
                },
                "priceList": {
                    "$ref": "#/definitions/PriceList"
                }
            }
        },
        "PricingMatrixResponse": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "pricing": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PricingResponse"
                    }
                }
            }
        },
        "PricingMatrix": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "pricing": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Pricing"
                    }
                }
            }
        },
        "Product": {
            "x-primary-key": [
                "internalId"
            ],
            "x-vendor-objectname": "InventoryItem",
            "x-has-customfields": true,
            "x-searchable": true,
            "x-searchable-joins": [
                "and"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "accountingBookDetailList": {
                    "$ref": "#/definitions/ItemAccountingBookDetailListResponse"
                },
                "alternateDemandSourceItem": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "For demand planning purposes, choose another item if you want to examine the historical sales of an item other than the one on the current record. When this field is left blank, the source for historical data is the original item. For example, if you are setting up Item A for demand planning, but Item A does not have an extensive sales history, you can choose Item B as an alternate source for historical data. Then, when demand calculations need to be made for Item A, NetSuite uses Item B&#x2019;s history for the calculations. Note: You can select only an item that is of the same item type to be an alternate source. For example, if the original item is an inventory item, the alternate source item must also be an inventory item."
                },
                "assetAccount": {
                    "x-displayName": "Asset Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing asset account at Lists > Accounting > Accounts. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "autoLeadTime": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean",
                    "description": "Lead time is the average number of days between ordering this item from the vendor and receiving it. * Check the Auto-Calculate box if you want NetSuite to calculate the lead time based on the most recent order history of this item. This is calculated by taking the number of days between the order entry and receipt on the three most recent purchase orders, and dividing by three. o If there are multiple receipts for the item against the same purchase order, only the first receipt is used for the calculation. o Lead time calculation is not weighted by number of units received. o More recent purchase orders without receipts are ignored. * Clear the Auto-Calculate box to manually enter a lead time value in days. If the Auto-Calculate box is cleared and no value is entered, then the default value from the Set Up Inventory Management page is used."
                },
                "autoPreferredStockLevel": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean",
                    "description": "The preferred stock level is the optimum quantity to maintain in stock of an item. Set to true if you want NetSuite to calculate the preferred stock level based on demand for the item. The preferred stock level is calculated as: (daily demand * number of days supply preferred)"
                },
                "autoReorderPoint": {
                    "x-displayName": "Auto-Calculate",
                    "type": "boolean",
                    "description": "The Reorder Point is the quantity level at which you need to reorder or build more of this item. Set this field to false to manually calculate the point at which to reorder or build more of this item Set this field to true if you want NetSuite to calculate the reorder point based on demand for the item over time. The reorder point depends on the safety stock definition and is calculated as follows: Without safety stock defined: Reorder point = (average lead time days * demand) With safety stock defined in days: Reorder point = [(average lead time days + safety stock days) * demand] With safety stock quantity defined: Reorder point = [(average lead time days * demand) + safety stock quantity)"
                },
                "availableToPartners": {
                    "x-displayName": "Available to Adv. Partners",
                    "type": "boolean",
                    "description": "If true, this item is available in the Advanced Partner Center."
                },
                "averageCost": {
                    "x-displayName": "Average Cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "This field displays the current average cost of the item across all locations. Using the weighted-average method, the average cost is calculated as the total units available during a period divided by the beginning inventory cost plus the cost of additions to inventory. Note: The average cost calculated per location is listed for each location on the Locations subtab. If you use Multiple Units of Measure, average cost is calculated using stock units."
                },
                "backwardConsumptionDays": {
                    "x-displayName": "Backward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "billExchRateVarianceAcct": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the account to post to for variances in exchange rates associated with this item. These variances occur when there are exchange rate differences between the receipt and the bill for an item. Note: After you select a variance account in this field, you can select another account at a later date if a change is necessary. Account changes are noted on the System Notes subtab of the History subtab of item records."
                },
                "billPriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the account to post to for variances in billing prices associated with this item. These variances occur when there is a difference in the price of an item showing on the purchase order and the price of an item showing on the bill. Note: After you select a variance account in this field, you can select another account at a later date if a change is necessary. Account changes are noted on the System Notes subtab of the History subtab of item records."
                },
                "billQtyVarianceAcct": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the account to post to for variances in billing quantities associated with this item. These variances occur when there is a difference in the quantity of an item showing on the receipt and the quantity of an item showing on the bill. Note: After you select a variance account in this field, you can select another account at a later date if a change is necessary. Account changes are noted on the System Notes subtab of the History subtab of item records."
                },
                "billingSchedule": {
                    "x-displayName": "Billing Schedule",
                    "x-reference-objectname": "BillingSchedule",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Allows users to reference default Billing Schedules for items. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "binNumberList": {
                    "$ref": "#/definitions/InventoryItemBinNumberListResponse"
                },
                "cogsAccount": {
                    "x-displayName": "COGS Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing COGs account at Lists > Accounting > Accounts. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "copyDescription": {
                    "x-displayName": "Copy from Sales Order",
                    "type": "boolean",
                    "description": "Sets the description from a sales order."
                },
                "cost": {
                    "x-displayName": "Purchase Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "type": "number",
                    "description": "Enter the price you pay for this item. If you do not enter a price, purchase orders for this item show the most recent purchase price by default. If you select a preferred vendor for this item, the price is shown in the currency selected on the vendor's record. If no preferred vendor is selected, the price is shown in your base currency."
                },
                "costCategory": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "CostCategory",
                    "description": "Select a cost category to associate with this item. View existing cost categories at <_TABNAME=LIST_ACCOUNTINGOTHERLIST_> > <_TASKCATEGORY= LIST_ACCOUNTINGOTHERLIST_> > Accounting Lists > Cost Category. For more details, click Help and read Creating Cost Categories."
                },
                "costEstimate": {
                    "x-displayName": "Item Defined Cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "A user-defined amount, entered into the Item Defined Cost field on the Item definition page."
                },
                "costEstimateType": {
                    "x-displayName": "Cost Estimate Type",
                    "$ref": "#/definitions/ItemCostEstimateType",
                    "description": "The Cost Estimate Type determines what value NetSuite uses to calculate estimated Gross Profit. The estimated Gross Profit for Items on a transaction provides the data needed to calculate the total estimated Gross Profit on that transaction. The individual line items that you enter in a transaction determine the amounts that post in NetSuite when you process that transaction. The following Cost Estimate Types on Items are available: * Item Defined Cost - a user-defined amount, entered into the Item Defined Cost field on the Item definition page. * Average Cost - NetSuite calculates an average cost of the units purchased. With Multi-Location Inventory enabled, NetSuite calculates the average across all locations. Otherwise, the average calculation uses location-specific costs. * Last Purchase Price - This field displays the most recent purchase price of the item as determined by purchase order receipt transactions. If you make multiple purchases on the same day that use different rates, this field shows the highest purchase price on that day, per location if applicable. When you use the Multiple-Location Inventory feature, the last purchase price reflects the most recent receipt at any location. If you track Cost of Goods Sold (COGS), NetSuite identifies the cost of the item based on your COGS settings. * Purchase Price - Enter the price that you pay for this item. If you do not enter a price, then the most recent purchase price from purchase orders provides the price for this item by default. * Preferred Vendor Rate - This option is only meaningful if the Multi-Vendor feature is enabled and multiple vendors supply the same item. In order of precedence: o Preferred vendor rate, if defined on the Item record Purchase price o Purchase Order Rate - Initially uses the Preferred Vendor Rate cost, and then after a purchase order is entered, this type uses the most recent actual purchase order rate. Special orders and drop-shipped items use this cost information. * Derived from Member Items - Total costs of items currently included in a kit. This Cost Estimate Type only applies to kits and sums the estimated costs of each item in the kit, based on each of their individual Cost Estimate Types. Uses the latest definition of the kit, not its historical definition."
                },
                "costEstimateUnits": {
                    "type": "string"
                },
                "costUnits": {
                    "type": "string"
                },
                "costingMethod": {
                    "x-displayName": "Costing Method",
                    "x-readOnly": true,
                    "$ref": "#/definitions/ItemCostingMethod",
                    "description": "Because the costingMethod field becomes read-only when set, it is not returned in get and basic search operations. Instead, the read-only field costingMethodDisplay is returned. The costingMethod field can be used only for addRecord operations and in searches."
                },
                "costingMethodDisplay": {
                    "x-displayName": "Costing Method",
                    "x-readOnly": true,
                    "type": "string",
                    "description": "This is a read-only value that returns the costing method for the item. Because the costingMethod field becomes read-only when set, it is not returned in get and basic search operations. Instead, the read-only field CostingMethodDisplay is returned."
                },
                "countryOfManufacture": {
                    "x-displayName": "Manufacturer Country",
                    "$ref": "#/definitions/Country",
                    "description": "References a value in a system list. Values are listed at platformCommonTyp:Country."
                },
                "createdDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-sub-format": "Date Time - ISO 8601 UTC",
                    "description": "When adding a record, this field defaults to the current system date and time. This field cannot be overwritten. The default value is set regardless of any use default settings."
                },
                "currency": {
                    "x-displayName": "Currency",
                    "x-readOnly": true,
                    "x-sub-format": "Currency",
                    "type": "string",
                    "description": "This is a read-only field. If a preferred vendor has been specified in vendorName, the field returns the currency set on that vendor record. Otherwise, the base currency for the company is returned."
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldListResponse"
                },
                "customForm": {
                    "x-displayName": "Custom Form",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing custom form for this record type. To ensure that field relationships defined within a desired custom form are maintained, you must provide the customForm value. Also, if defaults are off, then customForm is required, if defaults are on then the default form is used. Internal ID values for existing forms can be found at Setup > Customization > Entry Forms. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "dateConvertedToInv": {
                    "format": "date-time",
                    "type": "string",
                    "x-sub-format": "Date Time - ISO 8601 UTC"
                },
                "defaultItemShipMethod": {
                    "x-displayName": "Default Shipping Method",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the shipping method to display by default when adding the item to a sales order. You can override the default shipping method and enter any shipping method when fulfilling an order."
                },
                "defaultReturnCost": {
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number"
                },
                "deferRevRec": {
                    "x-displayName": "Hold Revenue Recognition",
                    "type": "boolean",
                    "description": "Check this box to delay recognizing revenue from the sale of this item. When this box is check, revenue recognition schedules or revenue plans are created with the status On Hold. For more information, see the help topic Delaying Revenue Recognition for an Item."
                },
                "deferredRevenueAccount": {
                    "x-displayName": "Deferred Revenue Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Set the deferred revenue account to associate with this item. Then, when this item is sold and associated with a revenue recognition template, the revenue from the sale is deferred. The sale amount is posted to a deferred revenue account, as opposed to a standard income account. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "demandModifier": {
                    "x-displayName": "Estimated Demand Change",
                    "format": "double",
                    "type": "number",
                    "description": "Set the default percentage of expected demand change to use for calculating item demand. For example, if you know that new customers will increase sales of this item in the future, you can enter 10% expected demand change to be added on to previous sales totals. If no expected demand change percentage is set, then the default value from the Set Up Inventory Management page is used."
                },
                "demandSource": {
                    "x-displayName": "Demand Source",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "demandTimeFence": {
                    "format": "int64",
                    "type": "integer"
                },
                "department": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "Department",
                    "description": "Set a department to associate with this item. For details on existing department records, in the UI go to Setup > Company > Departments."
                },
                "displayName": {
                    "x-displayName": "Display Name/Code",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "You can set an optional name for this item in addition to the item name. If you are integrating with a Yahoo! store, this field is imported from Yahoo!. The display name prints in the Item column of the sales form. If this item is a member of a kit, this name appears in the Item column when the Print Items box is checked. If you do not set a display name, then item name appears on printed forms."
                },
                "distributionCategory": {
                    "x-displayName": "Distribution Category",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Choose the appropriate category. Once a distribution category is defined on the item record, NetSuite can incorporate network transfers into demand planning for the item. Note: The network and category you select must be associated with the subsidiary selected for the item in the Classifications section of the item record. For details about how categories are associated with subsidiaries, click Help and read Creating Distribution Categories."
                },
                "distributionNetwork": {
                    "x-displayName": "Distribution Network",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Choose the appropriate network. The network you select determines the distribution categories available for you to choose. If the distribution network field is blank, then distribution category must also be blank. Note: The network and category you select must be associated with the subsidiary selected for the item in the Classifications section of the item record. For details about how networks are associated with subsidiaries, click Help and read Creating a Distribution Network."
                },
                "dontShowPrice": {
                    "x-displayName": "Don't Show Price",
                    "type": "boolean",
                    "description": "Check this box to hide the price of this item online. This is useful for items you want to advertise but don't want to sell or for items that you track inventory for and want to display but are offered in combination with other items."
                },
                "dropshipExpenseAccount": {
                    "x-displayName": "Dropship expense account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "When the Automated Intercompany Drop Ship feature is enabled, this field defaults to the account specified in the Default Expense Account on Accounting Preference page, but you can override this account. The account you select must have the Eliminate Intercompany Transactions box checked."
                },
                "enforceMinQtyInternally": {
                    "x-displayName": "Enforce Internally",
                    "type": "boolean",
                    "description": "Check this box to only allow sales orders created in NetSuite to be submitted when the minimum quantity of this item is ordered. When the item is selected on a sales order, the quantity is set to the minimum by default. If the quantity is edited below the minimum amount, an alert pops up, and the item cannot be added to the order. When you clear this box but enter a number in the Minimum Quantity field, the minimum only applies in the Web store."
                },
                "excludeFromSitemap": {
                    "x-displayName": "Exclude from Sitemap",
                    "type": "boolean",
                    "description": "Check this box to exclude a tab, category or item page from the site map."
                },
                "expenseAccount": {
                    "x-displayName": "Expense Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "externalId": {
                    "type": "string"
                },
                "featuredDescription": {
                    "x-displayName": "Featured Description",
                    "type": "string",
                    "description": "Settable only if item is featured. You can provide letters, numbers and basic HTML code."
                },
                "fixedLotSize": {
                    "x-displayName": "Fixed Lot Size",
                    "format": "double",
                    "type": "number"
                },
                "forwardConsumptionDays": {
                    "x-displayName": "Forward Consumption Days",
                    "format": "int64",
                    "type": "integer"
                },
                "fraudRisk": {
                    "x-displayName": "Fraud Risk",
                    "$ref": "#/definitions/InventoryItemFraudRisk",
                    "description": "Choose the fraud risk level for this item. This setting is used by the CyberSource Decision Manager when determining which transactions might be fraudulent."
                },
                "gainLossAccount": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "When the Use Item Cost as Transfer Cost preference is disabled, the transfer price on a transfer order is used as the item cost on the item receipt. Any difference between the actual cost and the transfer price posts to a Gain/Loss account when the item is shipped. In this field, select the Gain/Loss account you prefer to use to post transfer cost discrepancies. The account you select must be different than the Asset or Cost of Goods Sold (COGS) account for the item. You can choose an Income account, Other Income account, Expense account, or Other Expense account. Note: If you have enabled the Expand Account Lists preference, you can choose any account in this field. If you leave this field blank or select Use Income Account, then the income account for the item is used."
                },
                "handlingCost": {
                    "x-displayName": "Handling Cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "As an option, you set a handling cost for this item in dollars. You must also create a shipping item for per-item shipping and handling costs at Lists > Accounting > Shipping Items > New. When this item is set on sales orders, invoices or cash sales, the appropriate shipping and handling charges are automatically calculated."
                },
                "handlingCostUnits": {
                    "type": "string"
                },
                "hazmatHazardClass": {
                    "type": "string",
                    "description": "Enter the DOT hazardous material class or division."
                },
                "hazmatId": {
                    "type": "string",
                    "description": "Enter the regulatory identifier for the commodity from the Federal Express Ground Hazardous Materials Shipping Guide. The format is UNXXXX, where XXXX is a four digit number."
                },
                "hazmatItemUnits": {
                    "type": "string",
                    "description": "Enter the unit of measure for this item, such as kg or ml."
                },
                "hazmatItemUnitsQty": {
                    "format": "double",
                    "type": "number",
                    "description": "Enter the quantity for the item units."
                },
                "hazmatPackingGroup": {
                    "$ref": "#/definitions/HazmatPackingGroup",
                    "description": "Select the hazardous material packaging group for the item."
                },
                "hazmatShippingName": {
                    "type": "string",
                    "description": "Enter the shipping name for the ID as listed in the Federal Express Ground Hazardous Materials Shipping Guide. This item appears on the OP950 form."
                },
                "includeChildren": {
                    "x-displayName": "Include Children",
                    "type": "boolean",
                    "description": "Check the Include Children box to share the item with all the sub-subsidiaries associated with each subsidiary selected in the Subsidiary field. Note: When sharing items across subsidiaries, all of the options selected on the item record must be compatible across subsidiaries. For example, when entering an inventory item to be shared across subsidiaries, you should select Income and Asset accounts on the item record that are also shared across the same subsidiaries."
                },
                "incomeAccount": {
                    "x-displayName": "Income Account",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing income account at Lists > Accounting > Accounts. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "internalId": {
                    "x-readOnly": true,
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "type": "string"
                },
                "invtClassification": {
                    "x-displayName": "Classification",
                    "$ref": "#/definitions/ItemInvtClassification"
                },
                "invtCountInterval": {
                    "format": "int64",
                    "type": "integer"
                },
                "itemRevenueCategory": {
                    "x-displayName": "Item Revenue Category",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "The item revenue category is a classification for items that have similar characteristics and revenue allocation requirements. It is used in the fair value price list."
                },
                "intercoIncomeAccount": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "intercoCogsAccount": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "isDonationItem": {
                    "x-displayName": "Variable Amount",
                    "type": "boolean",
                    "description": "If true, the item is set as a variable-priced donation item. This enables customers to enter their own prices for this item, such as for donations."
                },
                "isDropShipItem": {
                    "x-displayName": "Drop Ship Item",
                    "type": "boolean",
                    "description": "If isDropShipItem is set to true, isSpecialOrderItem can NOT be true."
                },
                "isGcoCompliant": {
                    "x-displayName": "Google Checkout Compliant",
                    "type": "boolean",
                    "description": "Check this box to make the item available for purchase with Google Checkout."
                },
                "isHazmatItem": {
                    "type": "boolean",
                    "description": "Check this box if this item is categorized as either hazardous material or dangerous goods. These items can only be shipped using FedEx integration."
                },
                "isInactive": {
                    "x-displayName": "Inactive",
                    "default": false,
                    "type": "boolean",
                    "description": "Sets the item as inactive. By default, this field is set to false."
                },
                "isOnline": {
                    "x-displayName": "Display in Web Site",
                    "type": "boolean",
                    "description": "Set to true to make this item available online in your Web site. You cannot sell this item online unless this field is set to true."
                },
                "isSpecialOrderItem": {
                    "x-displayName": "Special Order Item",
                    "type": "boolean",
                    "description": "If isSpecialOrderItem is set to true, isDropShipItem can NOT be true."
                },
                "isStorePickupAllowed": {
                    "x-readOnly": true,
                    "type": "boolean"
                },
                "isTaxable": {
                    "x-displayName": "Taxable",
                    "type": "boolean",
                    "description": "Check this box if the item is subject to sales tax."
                },
                "issueProduct": {
                    "x-displayName": "Product",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the product this item is associated with. Product records are tracked with versions and builds for issue management. To create product records, go to <_TABNAME=ADMI_ISSUEPRODUCT_> > <_TASKCATEGORY=ADMI_ISSUEPRODUCT_> > Products > New."
                },
                "itemCarrier": {
                    "x-displayName": "Carrier",
                    "$ref": "#/definitions/ItemCarrier",
                    "description": "Select the default shipping carrier for the item."
                },
                "itemId": {
                    "x-displayName": "Item Name/Number",
                    "x-name": true,
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "Type up to 60 characters for the name of this item. This name appears in lists on transactions. If you have the option of entering a display name and do not, the item name prints in the Item column of sales forms. If you have the option to enter a vendor name and do not, the item name prints in the Item column of purchase forms. If you have entered a display name, it will print on purchases instead of the item name."
                },
                "itemOptionsList": {
                    "$ref": "#/definitions/ItemOptionsListResponse",
                    "description": "Provides a list of custom options available for this item. Transaction item options must first be defined at Setup > Customization > Transaction Item Options"
                },
                "itemShipMethodList": {
                    "$ref": "#/definitions/RecordRefListRes"
                },
                "itemVendorList": {
                    "$ref": "#/definitions/ItemVendorListResponse"
                },
                "lastInvtCountDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-sub-format": "Date Time - ISO 8601 UTC"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        ">="
                    ],
                    "x-sub-format": "Date Time - ISO 8601 UTC"
                },
                "lastPurchasePrice": {
                    "x-displayName": "Last Purchase Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "This field displays the most recent purchase price of the item. This price is determined by the most recent transaction for the item that added positive inventory, such as a purchase receipt, inventory transfer or inventory adjustment. (This does not include item returns or assembly unbuilds.) If two transactions are entered on the same day, the one entered later takes precedence and is used to calculate the last purchase price. When you use the Multiple-Location Inventory feature, the last purchase price reflects the most recent transaction at any location. The Inventory subtab of inventory item records includes a link to the last positive-inventory transaction per location. If you use Multiple Units of Measure, the last purchase price is calculated using purchase units."
                },
                "leadTime": {
                    "x-displayName": "Lead Time",
                    "format": "int32",
                    "type": "integer",
                    "description": "Lead time is the average number of days between ordering this item from the vendor and receiving it. * Auto-Calculating &#x2013; Check the Auto-Calculate box if you want NetSuite to calculate the lead time based on the most recent order history of this item. Lead time is calculated by taking the number of days between the order entry and receipt on the three most recent purchase orders, and dividing by three. If more than three purchase orders exist, all purchase orders within the period specified in the Order Analysis Interval field on the Inventory Management Preferences dialog will be used. o If there are multiple receipts for the item against the same purchase order, the calculation is made using the difference between the purchase order and the last receipt (the receipt that fully receives the order). o Lead time calculation is not weighted by number of units received. o More recent purchase orders without receipts are ignored. * Manually Calculating &#x2013; Clear the Auto-Calculate box to manually enter a lead time value in days. If the Auto-Calculate box is cleared and no value is entered, then the default value from the Set Up Inventory Management page is used."
                },
                "location": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "Location"
                },
                "locationsList": {
                    "$ref": "#/definitions/InventoryItemLocationsListResponse"
                },
                "manufacturer": {
                    "x-displayName": "Manufacturer",
                    "type": "string",
                    "description": "Type the name of the company that manufactures this item."
                },
                "manufacturerAddr1": {
                    "x-displayName": "Manufacturer Address",
                    "type": "string",
                    "description": "Set the address of the manufacturer. This is necessary to fill out international shipping forms when you sell and ship this item."
                },
                "manufacturerCity": {
                    "x-displayName": "Manufacturer City",
                    "x-sub-format": "City",
                    "type": "string",
                    "description": "Set the city location of the manufacturer of this item. This is necessary to automatically fill out international forms when you ship this item across borders."
                },
                "manufacturerState": {
                    "x-displayName": "Manufacturer State",
                    "x-sub-format": "State",
                    "type": "string",
                    "description": "Set the state where this item's manufacturer is located."
                },
                "manufacturerTariff": {
                    "x-displayName": "HS Tariff Number",
                    "type": "string",
                    "description": "Set the Harmonized System (HS) tariff code number or the Harmonized Tariff Schedule (HTS) code number. This number should be six to ten characters."
                },
                "manufacturerTaxId": {
                    "x-displayName": "Manufacturer Tax Id",
                    "type": "string",
                    "description": "Enter the Tax ID Number (TIN) for the manufacturer."
                },
                "manufacturerZip": {
                    "x-displayName": "Manufacturer Zip Code",
                    "x-sub-format": "Postal Code",
                    "type": "string",
                    "description": "Set the postal code of the location of this manufacturer."
                },
                "matrixItemNameTemplate": {
                    "type": "string"
                },
                "matchBillToReceipt": {
                    "type": "boolean",
                    "default": false,
                    "description": "Check the Match Bill to Receipt box if you want the Match Bill to Receipt box on transaction lines to be checked by default for this item. This enables you to generate variances based on vendor bill lines. Then, on the Post Vendor Bill Variances page, you must select Bill in the Transaction Type field to generate the variance postings. Purchase orders that include this item default to have this box checked and variances are generated based on vendor bill lines. Clear this box if you want to generate variance postings based on purchase order lines rather than vendor bill lines and do not want the Match Bill to Receipt box to be checked by default on transaction lines for this item. Then, on the Post Vendor Bill Variances page, you must select Purchase Order in the Transaction Type field to generate the variance postings. This preference defaults to be disabled. Even when enabled, this option can be changed on individual purchase order lines."
                },
                "matrixOptionList": {
                    "$ref": "#/definitions/MatrixOptionList"
                },
                "matrixType": {
                    "x-displayName": "Matrix Type",
                    "$ref": "#/definitions/ItemMatrixType"
                },
                "maxDonationAmount": {
                    "x-displayName": "Maximum Variable Amount",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "If isDonationItem is set to true, set this field to the maximum amount that can be paid or donated for this item."
                },
                "metaTagHtml": {
                    "x-displayName": "Meta Tag HTML",
                    "type": "string",
                    "description": "Sets the metatag information for the item page in web store."
                },
                "minimumQuantity": {
                    "x-displayName": "Minimum Order Qty",
                    "format": "int64",
                    "type": "integer",
                    "description": "Enter the smallest quantity you allow customers to purchase for this item. When customers add this item to their carts in the Web store, the quantity for this item is defaulted to the minimum number of items. Leave this field empty to allow customers to check out with no minimum quantity restrictions."
                },
                "minimumQuantityUnits": {
                    "type": "string"
                },
                "mpn": {
                    "x-displayName": "Manufacturer Part Number",
                    "type": "string",
                    "description": "MPN (Manufacturers Part Number) - Set the part number used by the manufacturer to identify this item."
                },
                "multManufactureAddr": {
                    "x-displayName": "Multiple Manufacturer Addresses",
                    "type": "boolean"
                },
                "nexTagCategory": {
                    "x-displayName": "NexTag Category",
                    "type": "string",
                    "description": "Set the name of the NexTag category this item should be included in. This category is included in the product feeds you can export at Setup > Web Site > Product Feeds. Go to www.nextag.com for more information on the available categories. This is an optional field only displayed for the following item records: Kit/Package, Non-inventory Item for Sale, Non-inventory Item for Resale, Assembly (lot and serialized), and Inventory (lot and serialized)."
                },
                "nextInvtCountDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-sub-format": "Date Time - ISO 8601 UTC"
                },
                "noPriceMessage": {
                    "x-displayName": "No Price Message",
                    "type": "string",
                    "description": "If you opted to not show a price online, enter the message that should show instead of the price. For example, you might enter \"Call for Price.\""
                },
                "offerSupport": {
                    "x-displayName": "Offer Support",
                    "type": "boolean",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "When enabled, items can be referenced on case records either through the UI or via web services using the item field."
                },
                "onHandValueMli": {
                    "x-displayName": "Value",
                    "format": "double",
                    "x-readOnly": true,
                    "type": "number",
                    "description": "A read-only field that returns the result of Quantity on Hand multiplied by Purchase Price."
                },
                "onSpecial": {
                    "x-displayName": "On Special",
                    "type": "boolean",
                    "description": "Set to true if you want to put this item on special. The item then appears in the Specials category in your store or site."
                },
                "originalItemSubtype": {
                    "$ref": "#/definitions/ItemSubType"
                },
                "originalItemType": {
                    "$ref": "#/definitions/ItemType"
                },
                "outOfStockBehavior": {
                    "x-displayName": "Out Of Stock Behavior",
                    "$ref": "#/definitions/ItemOutOfStockBehavior",
                    "description": "Select a custom out of stock behavior for this item. It overwrites the overall site&#x2019;s out of stock behavior. Your choices are: * Default - Uses the behavior selected in the Web Store Out of Stock Items field at Setup > Web Site > Setup Tasks > Set Up Web Site > Shopping. * Disallow back orders but display out of stock messages * Allow back orders but display out of stock messages * Remove items when out of stock * Allow back orders with no out of stock message"
                },
                "outOfStockMessage": {
                    "x-displayName": "Out Of Stock Message",
                    "type": "string",
                    "description": "You can enter a custom out of stock message for this item. The message here replaces the default out of stock message."
                },
                "overallQuantityPricingType": {
                    "x-displayName": "Calculate Quantity Discounts",
                    "$ref": "#/definitions/ItemOverallQuantityPricingType",
                    "description": "Available values are: _byLineQuantity _byOverallItemQuantity _byOverallParentQuantity _byOverallScheduleQuantity"
                },
                "pageTitle": {
                    "x-displayName": "Page Title",
                    "type": "string",
                    "description": "Sets the display title in the upper-left corner of an Internet browser when customers view this item in your Web store."
                },
                "parent": {
                    "x-displayName": "Subitem of",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing item record. Only required if the item is a child of another item. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "periodicLotSizeDays": {
                    "x-displayName": "Periods of Supply Increment",
                    "format": "int64",
                    "type": "integer"
                },
                "periodicLotSizeType": {
                    "x-displayName": "Periods of Supply Type",
                    "$ref": "#/definitions/PeriodicLotSizeType"
                },
                "preferenceCriterion": {
                    "x-displayName": "Preference Criterion",
                    "$ref": "#/definitions/ItemPreferenceCriterion",
                    "description": "Set the NAFTA criterion for this item. Available values are: _A _B _C _D _E _F"
                },
                "preferredLocation": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing location record at Setup > Company > Classifications > Locations. This is only settable if the Multi-Location Inventory feature is enabled at Setup > Company > Setup Tasks > Enable Features > Items & Inventory. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "preferredStockLevel": {
                    "x-displayName": "Preferred Stock Level",
                    "format": "double",
                    "type": "number",
                    "description": "Enter the quantity you prefer to maintain in inventory. NetSuite uses this information to calculate how many items to replenish on the Order Items page."
                },
                "preferredStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "double",
                    "type": "number",
                    "description": "The preferred stock level is the optimum quantity to maintain in stock of an item. The quantity you enter here is used to determine your replenishment needs on the Order Items page. It is the quantity you want to have in stock after an order is placed. * Auto-Calculating &#x2013; Check the Auto-Calculate box if you want NetSuite to calculate the preferred stock level based on demand for the item. The preferred stock level is calculated as: (daily demand * number of days supply preferred). If no preferred stock level is identified, then the default preferred stock level is used from the Set Up Inventory Management page. * Manually Calculating &#x2013; Clear the Auto-Calculate box to manually enter the preferred stock quantity. The preferred stock level you set is used to calculate the quantity of items to be ordered on the Order Items page."
                },
                "preferredStockLevelUnits": {
                    "type": "string"
                },
                "presentationItemList": {
                    "$ref": "#/definitions/PresentationItemListResponse"
                },
                "pricesIncludeTax": {
                    "x-displayName": "Prices Include Tax",
                    "type": "boolean",
                    "description": "Check this box to save the base price as the tax inclusive price. Clear this box to save the base price as the tax exclusive price."
                },
                "pricingGroup": {
                    "x-displayName": "Pricing Group",
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "PricingGroup",
                    "description": "Select the pricing group this item is a member of. Using pricing groups allows you to assign customer-specific price levels for a group of items. You can create new pricing groups at <_TABNAME=EDIT_OTHERLIST_> > <_TABNAME=EDIT_OTHERLIST_> > Accounting Lists > New > Pricing Group."
                },
                "pricingMatrix": {
                    "$ref": "#/definitions/PricingMatrixResponse",
                    "description": "Sets the pricing matrix for this item."
                },
                "producer": {
                    "x-displayName": "Producer",
                    "type": "boolean",
                    "description": "Set to true if you produce this item for the purposes of the NAFTA Certificate of Origin."
                },
                "productFeedList": {
                    "$ref": "#/definitions/ProductFeedList",
                    "description": "Set the sites where you want to export information on this item. Available values are: _googleBase _nexTag _shoppingCom _shopzilla _yahooShopping This is an optional field only displayed for the following item records: Kit/Package, Non-inventory Item for Sale, Non-inventory Item for Resale, Assembly (lot and serialized), and Inventory (lot and serialized)."
                },
                "purchaseDescription": {
                    "x-displayName": "Purchase Description",
                    "type": "string",
                    "description": "Sets the description of this item that is displayed on vendor orders. You should include the unit of measure in this description."
                },
                "purchaseOrderAmount": {
                    "x-displayName": "Vendor Bill - Purchase Order Amount Tolerance",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "Enter the tolerance limit for the discrepancy between the amount on the vendor bill and purchase order."
                },
                "purchaseOrderQuantity": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Tolerance",
                    "format": "double",
                    "type": "number",
                    "description": "Enter the tolerance limit for the discrepancy between the quantity on the vendor bill and purchase order."
                },
                "purchaseOrderQuantityDiff": {
                    "x-displayName": "Vendor Bill - Purchase Order Quantity Difference",
                    "format": "double",
                    "type": "number",
                    "description": "Enter the difference limit for the discrepancy between the quantity on the vendor bill and purchase order."
                },
                "purchasePriceVarianceAcct": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "In the Purchase Price Variance Account field, choose the account to post a variance to when a purchase transaction calculates a cost variance."
                },
                "purchaseTaxCode": {
                    "x-displayName": "Purchase Tax Code",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "This field is required for customers subscribing to International versions of NetSuite. Sets the default tax code to be used on purchase transactions. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "purchaseUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the unit you use to purchase this item from the vendor."
                },
                "quantityAvailable": {
                    "x-displayName": "Quantity Available",
                    "format": "double",
                    "type": "number"
                },
                "quantityAvailableUnits": {
                    "type": "string"
                },
                "quantityBackOrdered": {
                    "x-displayName": "Quantity Back Ordered",
                    "format": "double",
                    "x-readOnly": true,
                    "type": "number",
                    "description": "A read-only field that returns the Quantitiy Back Ordered."
                },
                "quantityCommitted": {
                    "x-displayName": "Quantity Committed",
                    "format": "double",
                    "x-readOnly": true,
                    "type": "number",
                    "description": "A read-only field that returns the Quantitiy Committed."
                },
                "quantityCommittedUnits": {
                    "type": "string"
                },
                "quantityOnHand": {
                    "x-displayName": "Quantity On Hand",
                    "format": "double",
                    "x-readOnly": true,
                    "type": "number",
                    "description": "Sets the quantity on hand for this item. This is settable only on an add. Otherwise this is a read-only field that provides the known quantity on hand based on items received."
                },
                "quantityOnHandUnits": {
                    "type": "string"
                },
                "quantityOnOrder": {
                    "x-displayName": "Quantity On Order",
                    "format": "double",
                    "x-readOnly": true,
                    "type": "number",
                    "description": "A read-only field that returns the Quantitiy on Order."
                },
                "quantityOnOrderUnits": {
                    "type": "string"
                },
                "quantityPricingSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Set the pricing schedule you want to use to set prices for this item. You can create new pricing schedules at Lists > Accounting > Quantity Pricing Schedules > New. Selecting a pricing schedule sets the Use Marginal Rates and Calculate Quantity Discounts fields."
                },
                "quantityReorderUnits": {
                    "type": "string"
                },
                "rate": {
                    "x-displayName": "Sales Price",
                    "format": "double",
                    "type": "number",
                    "description": "Defines the rate for this item. If a value is entered followed by the percentage sign, the discount is interpreted as a percentage discount (i.e. -.10% sets a ten percent discount for the item). If a value without the percentage sign is entered, the rate is interpreted as a flat dollar value."
                },
                "receiptAmount": {
                    "x-displayName": "Vendor Bill - Item Receipt Amount Tolerance",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "Enter the tolerance limit for the discrepancy between the amount on the vendor bill and item receipt."
                },
                "receiptQuantity": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Tolerance",
                    "format": "double",
                    "type": "number",
                    "description": "Enter the tolerance limit for the discrepancy between the quantity on the vendor bill and item receipt."
                },
                "receiptQuantityDiff": {
                    "x-displayName": "Vendor Bill - Item Receipt Quantity Difference",
                    "format": "double",
                    "type": "number",
                    "description": "Enter the difference limit for the discrepancy between the quantity on the vendor bill and item receipt."
                },
                "relatedItemsDescription": {
                    "x-displayName": "Related Items Description",
                    "type": "string",
                    "description": "Sets the description displayed for a group of related items."
                },
                "reorderMultiple": {
                    "x-displayName": "Reorder Multiple",
                    "format": "int32",
                    "type": "integer",
                    "description": "Enter the quantity you prefer to order of this item each time. Then, the Order Items page suggests ordering a quantity of this item that is always a multiple of the number you enter. For example, if the vendor only accepts orders in multiples of one thousand, you would enter 1000 in this field. Then, the Order items page might suggest that you order 1000 or 2000, but not 1500. Note: If you use the Multiple Units of Measure feature, the reorder multiple always functions in base units."
                },
                "reorderPoint": {
                    "x-displayName": "Reorder Point",
                    "format": "double",
                    "type": "number",
                    "description": "Sets the minimum quantity that when reached triggers a warning to reorder or rebuild this item."
                },
                "reorderPointUnits": {
                    "type": "string"
                },
                "rescheduleInDays": {
                    "x-displayName": "Reschedule In Days",
                    "format": "int64",
                    "type": "integer"
                },
                "rescheduleOutDays": {
                    "x-displayName": "Reschedule Out Days",
                    "format": "int64",
                    "type": "integer"
                },
                "revRecForecastRule": {
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "revenueRecognitionRule": {
                    "x-displayName": "Revenue Recognition Rule",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the revenue rule to use by default for this item in a revenue arrangement. Be sure the rule you select has an Amount Source that is appropriate for the value you select in the Create Revenue Plans On field. For more information, see the field level help for Create Revenue Plans On."
                },
                "revenueAllocationGroup": {
                    "x-displayName": "Revenue Allocation Group",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select a revenue allocation group to use in GroupSum functions in fair value formulas. The value you select here is the default. You can change it on the revenue element."
                },
                "revRecSchedule": {
                    "x-displayName": "Revenue Recognition Template",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Sets the revenue recognition template that will be applied to this item. In order to set this field, the item record referenced in the item field must have a deferred revenue account associated with it. This field then defaults to the rev. rec. template associated to the item on the item record. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "roundUpAsComponent": {
                    "x-displayName": "Round Up Quantity as Component",
                    "type": "boolean",
                    "description": "If you use the component yield preference, depending on your settings, the component yield calculation may result in a fractional quantity. You can use this setting so that the quantity for a component on a work order automatically rounds up to a whole number in base units. For example, you have an assembly that requires 2 units of Component A. The component yield is 99%. To build 5 of these assemblies requires 10.1 units of Component A. Since you can consume components only in whole numbers, you cannot consume 10.1 units. Therefore, you need to round up to the next highest whole number in base units. Check the Round Up Quantity as Component box to enable NetSuite to round up the quantity consumed for this item. Clear this box if you do not want NetSuite to round up the quantity consumed for this item."
                },
                "safetyStockLevel": {
                    "x-displayName": "Safety Stock Level",
                    "format": "double",
                    "type": "number",
                    "description": "Enter the amount of an item you prefer to keep in stock at all times. Safety stock can be a quantity or a number of days worth of stock. This amount is used to auto-calculate the reorder point of an item. * To define safety stock as a quantity, enter a value. * To define safety stock as a number of days, enter a value in the field next to Days. If no safety stock value is entered, then the default value from the Set Up Inventory Management page is used."
                },
                "safetyStockLevelDays": {
                    "x-displayName": "Days",
                    "format": "int32",
                    "type": "integer",
                    "description": "Enter the amount of an item you prefer to keep in stock at all times. Safety stock can be a quantity or a number of days worth of stock. This amount is used to auto-calculate the reorder point of an item. * To define safety stock as a quantity, enter a value. * To define safety stock as a number of days, enter a value in the field next to Days. If no safety stock value is entered, then the default value from the Set Up Inventory Management page is used."
                },
                "safetyStockLevelUnits": {
                    "x-displayName": "Sales Description",
                    "type": "string"
                },
                "saleUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the unit you use to sell this item to customers on sales transactions."
                },
                "salesDescription": {
                    "x-displayName": "Sales Description",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "Sets the description displayed when an item's store display name is clicked."
                },
                "salesTaxCode": {
                    "x-displayName": "Sales Tax Code",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "This field is required for customers subscribing to International versions on NetSuite. Sets the default tax code to be used on sales transactions. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "scheduleBCode": {
                    "$ref": "#/definitions/ScheduleBCode",
                    "description": "Select the code for the Schedule B form for this item. Available values are: _1000, _1000cubicMeters, _barrels, _carat, _cleanYieldKilogram, _contentKilogram, _contentTon, _cubicMeters, _curie, _dozen, _dozenPairs, _dozenPieces, _fiberMeter, _gram, _gross, _grossContainers, _hundred, _kilogram, _kilogramTotalSugars, _liter, _meter, _millicurie, _noQuantityReq, _number, _pack, _pairs, _pieces, _proofLiter, _runningBales, _square, _squareCentimeters, _squareMeters, _ton"
                },
                "scheduleBNumber": {
                    "x-displayName": "Schedule B Number",
                    "type": "string",
                    "description": "Enter the number for the Schedule B form for this item."
                },
                "scheduleBQuantity": {
                    "x-displayName": "Schedule B Quantity",
                    "format": "int64",
                    "type": "integer",
                    "description": "Enter the quantity for the Schedule B form for this item."
                },
                "searchKeywords": {
                    "x-displayName": "Search Keywords",
                    "type": "string",
                    "description": "Enter alternative search keywords that customers might use to find this item using your Web store&#xfffd;s internal search. These can include synonyms, acronyms, alternate languages or misspellings. These keywords are seen as equally important as the item name when searches are conducted."
                },
                "seasonalDemand": {
                    "x-displayName": "Seasonal Demand",
                    "type": "boolean",
                    "description": "This setting defines the way NetSuite analyzes customer demand for this item. Customer demand for an item is used to auto-calculate reorder points and preferred stock levels. An item&#x2019;s demand rate is calculated as the average sales quantity per day. * Historical Demand &#x2013; Clear the Seasonal Demand box if you prefer to calculate the demand as average sales per day over a specific period. To set the number of months interval between analysis to evaluate sales orders and calculate item demand, go to Setup > Accounting > Set Up Inventory Management > Order Analysis Interval field. * Seasonal Demand &#x2013; Check the Seasonal Demand box to calculate the reorder quantity for this item based on inventory demand changes through the year. To set the number of months interval between analysis to evaluate sales orders and calculate item demand, go to Setup > Accounting > Set Up Inventory Management > Order Analysis Interval field."
                },
                "shipIndividually": {
                    "x-displayName": "Ships Individually",
                    "type": "boolean",
                    "description": "Check this box if this item always ships alone and with no other items in the same package. This helps determine the number of packages needed and the shipping rate on order fulfillments."
                },
                "shipPackage": {
                    "x-displayName": "Package",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the type of package this item normally ships in. The information for this package type automatically fills in on order fulfillments for this item. Setting up and assigning package types helps determine the number of packages on an order and helps return accurate real-time shipping rates. Create package types at Setup > Accounting > Shipping > Packages subtab."
                },
                "shippingCost": {
                    "x-displayName": "Shipping cost",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "As an option, you may set a shipping cost for this item in dollars. You must also create a shipping item for per-item shipping costs at Lists > Accounting > Shipping Items > New. When this item is set on sales orders, invoices or cash sales, the appropriate shipping charges are automatically calculated."
                },
                "shippingCostUnits": {
                    "type": "string"
                },
                "shoppingDotComCategory": {
                    "x-displayName": "Shopping.com Category",
                    "type": "string",
                    "description": "Set the name of the Shopping.com category that this item should go under. This category is included in the product feeds that you can export from Setup > Web Site > Product Feeds. Go to www.shopping.com for more information on the categories available. This is an optional field only available for following item records: Kit/Package, Non-inventory Item for Sale, Non-inventory Item for Resale, Assembly (lot and serialized), and Inventory (lot and serialized)."
                },
                "shopzillaCategoryId": {
                    "x-displayName": "Shopzilla Category ID",
                    "format": "int32",
                    "type": "integer",
                    "description": "Set the name of the Shopzilla category this item should be included in. This category is included in the product feeds you export at Setup > Web Site > Product Feeds. Go to www.shopzilla.com for more information on the available categories. This is an optional field only displayed for the following item records: Kit/Package, Non-inventory Item for Sale, Non-inventory Item for Resale, Assembly (lot and serialized), and Inventory (lot and serialized)."
                },
                "showDefaultDonationAmount": {
                    "x-displayName": "Show Default Amount",
                    "x-sub-format": "Money",
                    "type": "boolean",
                    "description": "Can only be set when isDonation is set to True. If true, the item's online price is displayed as a suggested price."
                },
                "siteCategoryList": {
                    "$ref": "#/definitions/SiteCategoryList"
                },
                "sitemapPriority": {
                    "x-displayName": "Sitemap Priority",
                    "$ref": "#/definitions/SitemapPriority",
                    "description": "Use the Sitemap Priority list to indicate the relative importance of your Web site URLs. You can select a priority ranging from 0.0 to 1.0 on item, category, and tab records. NetSuite assigns the default priority &#x201c;Auto&#x201d; to all new and existing tab, category and item records in your account. The priority is calculated based on the position of the item or category in the hierarchy of your Web site. For example, your Web site tabs automatically generate a default priority value of 1.0 because they are top level pages. A category published to a tab gets a priority of 0.5. An item published to a category on a tab gets a priority of 0.3."
                },
                "softDescriptor": {
                    "x-displayName": "Soft Descriptor",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the brand name or name that should appear on customers' credit card statements when this item is purchased. Enter soft descriptors to select in this field at Setup > Accounting > Payment Processing > Credit Card Soft Descriptors."
                },
                "specialsDescription": {
                    "x-displayName": "Specials Description",
                    "type": "string",
                    "description": "Settable only if onSpecial is set to True. You can provide letters, numbers and basic HTML code."
                },
                "stockDescription": {
                    "x-displayName": "Stock Description",
                    "type": "string",
                    "description": "Enter up to 21 characters to specify information about this item, such as New, Refurbished or Ships 2-3 days."
                },
                "stockUnit": {
                    "x-displayName": "{1} Units",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Select the unit you use to stock this item in inventory."
                },
                "storeDescription": {
                    "x-displayName": "Store Description",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "Sets the item description. This field can contain plain text as well as basic html code."
                },
                "storeDetailedDescription": {
                    "x-displayName": "Detailed Description",
                    "type": "string",
                    "description": "Sets the detailed item description. This field can contain plain text as well as basic html code."
                },
                "storeDisplayImage": {
                    "x-displayName": "Item Display Image",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing image file in the file cabinet. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "storeDisplayName": {
                    "x-displayName": "Store Display Name",
                    "type": "string",
                    "description": "Sets the item name for your Web site."
                },
                "storeDisplayThumbnail": {
                    "x-displayName": "Item Display Thumbnail",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing image file in the file cabinet. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "storeItemTemplate": {
                    "x-displayName": "Item Drilldown Template",
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "References an existing item template at Setup > Web Site > Item/Category Templates."
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefListRes"
                },
                "supplyLotSizingMethod": {
                    "x-displayName": "Lot Sizing Method",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "supplyReplenishmentMethod": {
                    "$ref": "#/definitions/RecordRefResponse",
                    "description": "Choose a method to use for calculating item replenishment requirements: * Reorder Point &#x2013; Choose this setting to use Advanced Inventory Management settings for demand calculations instead of using Demand Planning. This is the default setting for new item records. Orders are created based on replenishment reminders generated from the Order Items page, Replenish Items, and Mass Create Work Orders. * Time Phased &#x2013; When you choose this setting, orders are created based on item demand plans instead of the Advanced Inventory Management settings. When you choose this setting, other fields on the record that are used by Advanced Inventory Management to calculate demand are no longer available. These unavailable fields are: Seasonal Demand, Build Point, Reorder Point, Preferred Stock Level, Safety Stock Days. The Auto calculate settings are cleared and cannot be changed for Demand Per Day, Reorder Point, Preferred Stock Level, Lead Time."
                },
                "supplyTimeFence": {
                    "x-displayName": "Planning Time Fence",
                    "format": "int64",
                    "type": "integer"
                },
                "supplyType": {
                    "x-displayName": "Supply Type",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "taxSchedule": {
                    "x-displayName": "Schedule",
                    "$ref": "#/definitions/RecordRefResponse"
                },
                "totalValue": {
                    "x-displayName": "Total Value",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "By default this field is the result of multiplying the purchase price by the quantity on hand. If the Multi-Location Inventory feature is enabled, the sum of this result for each location populates this field by default."
                },
                "trackLandedCost": {
                    "x-displayName": "Track Landed Cost",
                    "type": "boolean",
                    "description": "Set to true to track landed costs associated with this item. Note: You must include an item that tracks landed costs on transactions you want to source for landed costs."
                },
                "transferPrice": {
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "Enter a transfer price on an item record to set the default value used as the transfer price on transfer orders. You can still override this default by entering a new transfer price for an item on the transfer order. The use of the value in the Transfer Price field on a transfer order depends on your setting for the Use Item Cost as Transfer Cost preference. When the Use Item Cost as Transfer Cost preference is enabled, the transfer price on a transfer order is not considered for posting cost accounting of line items. In the Transfer Price field, enter a declared value for the item to be used for shipping purposes only. When the Use Item Cost as Transfer Cost preference is disabled, the transfer price on a transfer order is considered for posting cost accounting of line items. Items that do not have a transfer price set on a transfer order use a zero value for cost accounting calculations when the item is received. Note: If the Transfer Price field is blank on the item record, a value of zero shows by default on the transfer order. Unless a transfer price value is entered on the transfer order, a value of zero is used for COGS calculations when the item is received."
                },
                "translationsList": {
                    "$ref": "#/definitions/TranslationList"
                },
                "unitsType": {
                    "x-displayName": "Units Type",
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "UnitsType",
                    "description": "In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "upcCode": {
                    "x-displayName": "UPC Code",
                    "type": "string",
                    "description": "Defines whether this is a unv part code. Bar codes for items are generated in Code 128 by default. If you prefer to use the UPC code format, set this field to True on each item record."
                },
                "urlComponent": {
                    "x-displayName": "URL Component",
                    "type": "string",
                    "description": "Enter a short, descriptive name for this item to appear as part of its URL in the Web store. Setting a name to show in the URL can result in better ranking from search engines. If you leave this field blank, NetSuite terms and numbers are used as identifiers in the URL. Note: Descriptive URL components are case sensitive. Descriptive URLs must match the case used in the URL Component field of an item record to point to the correct page."
                },
                "useBins": {
                    "x-displayName": "Use Bins",
                    "type": "boolean",
                    "description": "Set to true if you want to track bin locations for this item. If you choose to use bins for this item, you must associate at least one bin with the item using the Bin Numbers subtab. You can associate multiple items with one bin and multiple bins with one item. You can also designate one preferred bin per location. The preferred bin is listed by default on receipt and fulfillment transactions. To create bin records that can be entered here, go to Lists > Accounting > Bins > New."
                },
                "useMarginalRates": {
                    "x-displayName": "Use Marginal Rates",
                    "type": "boolean",
                    "description": "Set to true if you want the quantity discounts in the schedule to be applied to each pricing bracket separately. For example, a schedule offers no discount for the first 100 items sold and a 5% discount if more than 100 are sold. If 150 items are sold, the first 100 are at normal price, and the other fifty items are sold at 5% discount. The fault value is false, which applies the discount to all items sold."
                },
                "vendor": {
                    "x-displayName": "Preferred {1}",
                    "$ref": "#/definitions/RecordRefResponse",
                    "x-reference-objectname": "Vendor",
                    "description": "References an existing vendor record. This is required for each vendor being defined. In order to retrieve a list of available values for this field, use the GetSelectValue operation."
                },
                "vendorName": {
                    "x-displayName": "Vendor Name/Code",
                    "type": "string",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "Sets the preferred vendor for this item. If the Multiple Vendors feature is enabled, this field is unavailable and you must set the preferred vendor in the itemVendorsList."
                },
                "vsoeDeferral": {
                    "x-displayName": "Deferral",
                    "$ref": "#/definitions/VsoeDeferral",
                    "description": "In this field set how to handle deferment when this item is sold as part of a bundle. The available options are: _deferBundleUntilDelivered &#xfffd; Until this item is marked delivered, the revenue recognition of all items in the bundle is deferred. A typical use for this option is to identify items whose revenue recognition depends on the delivery of the item itself, in addition to the delivery of a separate service. For example, a specified upgrade would typically be marked Defer Bundle Until Delivered. _deferUntilItemDelivered &#xfffd; Until this item is marked delivered, the revenue recognition of this item is deferred. This setting is the default for this field. Note: The deferral setting you set for each item in a bundle works together with the deferral settings for other items in the bundle."
                },
                "vsoeDelivered": {
                    "x-displayName": "Default as Delivered",
                    "type": "boolean",
                    "description": "Check this box to automatically set this item to a Delivered status when this item is added to a transaction. Clear this box to leave the delivery status clear by default."
                },
                "vsoePermitDiscount": {
                    "x-displayName": "Permit Discount",
                    "$ref": "#/definitions/VsoePermitDiscount",
                    "description": "Set one of the following options to determine how discounts are handled for this item. _asAllowed - Allows a portion of an applicable discount to be applied against this item if its status is Delivered when the VSOE allocation is performed. _never - Does not allow a discount to be applied against this item when the VSOE allocation is performed. This selection would be common for a Specified Upgrade. Note: The default for this field is _asAllowed."
                },
                "vsoePrice": {
                    "x-displayName": "Allocation Price",
                    "format": "double",
                    "x-sub-format": "Money",
                    "type": "number",
                    "description": "Set the VSOE price for this item, if the price is known. Note: If you need to use more than one VSOE price for an item, you can set the most common price here and then change the price on each order manually."
                },
                "vsoeSopGroup": {
                    "$ref": "#/definitions/VsoeSopGroup",
                    "description": "Select an allocation type to associate with this item on sales transactions. * Normal - Revenue allocation follows EITF 08-01 rules when you use VSOE and the fair value price list with advanced revenue management. * Exclude - This item is excluded from revenue allocation. The item discounted sales amount is the revenue amount. * Software - The item is software. When you use VSOE with the EITF SuiteApp, both EITF 08-01 and SOP 97-2 rules apply for revenue allocation. When you use advanced revenue management, revenue allocation follows the fair value price list. Then if the fair value prices for any of the items in the allocation are estimates rather than VSOE, the allocation is recalculated using the residual method. Note: Do not select the Software value unless you are using VSOE with the EITF SuiteApp or Advanced Revenue Management."
                },
                "weight": {
                    "x-displayName": "Item Weight",
                    "format": "double",
                    "type": "number",
                    "x-searchable": true,
                    "x-searchable-operators": [
                        "="
                    ],
                    "description": "Set the weight of this item"
                },
                "weightUnit": {
                    "$ref": "#/definitions/ItemWeightUnit",
                    "description": "References a value in a system list. Values include: _lb, _oz, _kg, _g."
                },
                "weightUnits": {
                    "type": "string"
                }
            }
        },
        "ProductFeedList": {
            "properties": {
                "productFeed": {
                    "items": {
                        "$ref": "#/definitions/ItemProductFeed"
                    },
                    "type": "array"
                }
            }
        },
        "PurchaseOrder": {
            "required": [
                "location",
                "itemList",
                "entity",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "approvalStatus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "billingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "createdFrom": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currencyName": {
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "dueDate": {
                    "x-displayName": "Due Date",
                    "format": "date-time",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "exchangeRate": {
                    "type": "number"
                },
                "expenseList": {
                    "$ref": "#/definitions/PurchaseOrderExpenseList"
                },
                "externalId": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "fob": {
                    "type": "string"
                },
                "intercoStatus": {
                    "$ref": "#/definitions/IntercoStatus"
                },
                "intercoTransaction": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "itemList": {
                    "$ref": "#/definitions/PurchaseOrderItemList"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "linkedTrackingNumbers": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "memo": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "nextApprover": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "orderStatus": {
                    "$ref": "#/definitions/PurchaseOrderOrderStatus"
                },
                "otherRefNum": {
                    "type": "string"
                },
                "purchaseContract": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipAddressList": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipDate": {
                    "format": "date",
                    "type": "string"
                },
                "shipIsResidential": {
                    "type": "boolean"
                },
                "shipMethod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shipTo": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shippingAddress": {
                    "$ref": "#/definitions/Address"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subTotal": {
                    "type": "number"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "supervisorApproval": {
                    "type": "boolean"
                },
                "tax2Total": {
                    "type": "number"
                },
                "taxTotal": {
                    "type": "number"
                },
                "terms": {
                    "$ref": "#/definitions/RecordRef"
                },
                "toBeEmailed": {
                    "type": "boolean"
                },
                "toBeFaxed": {
                    "type": "boolean"
                },
                "toBePrinted": {
                    "type": "boolean"
                },
                "total": {
                    "type": "number"
                },
                "trackingNumbers": {
                    "type": "string"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "tranId": {
                    "type": "string"
                },
                "vatRegNum": {
                    "type": "string"
                }
            }
        },
        "PurchaseOrderExpense": {
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amount": {
                    "type": "number"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdFrom": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "grossAmt": {
                    "type": "number"
                },
                "isBillable": {
                    "type": "boolean"
                },
                "isClosed": {
                    "type": "boolean"
                },
                "line": {
                    "type": "number"
                },
                "linkedOrderList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "memo": {
                    "type": "string"
                },
                "tax1Amt": {
                    "type": "number"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "type": "number"
                },
                "taxRate2": {
                    "type": "number"
                }
            }
        },
        "PurchaseOrderExpenseList": {
            "properties": {
                "expense": {
                    "items": {
                        "$ref": "#/definitions/PurchaseOrderExpense"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "PurchaseOrderItem": {
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "amount": {
                    "type": "number"
                },
                "billVarianceStatus": {
                    "$ref": "#/definitions/TransactionBillVarianceStatus"
                },
                "createdFrom": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "description": {
                    "type": "string"
                },
                "expectedReceiptDate": {
                    "format": "date",
                    "type": "string"
                },
                "grossAmt": {
                    "type": "number"
                },
                "inventoryDetail": {
                    "$ref": "#/definitions/InventoryDetail"
                },
                "isBillable": {
                    "type": "boolean"
                },
                "isClosed": {
                    "type": "boolean"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "landedCostCategory": {
                    "$ref": "#/definitions/RecordRef"
                },
                "line": {
                    "type": "number"
                },
                "linkedOrderList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "matchBillToReceipt": {
                    "type": "boolean"
                },
                "options": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "purchaseContract": {
                    "$ref": "#/definitions/RecordRef"
                },
                "quantity": {
                    "type": "number"
                },
                "quantityAvailable": {
                    "type": "number"
                },
                "quantityBilled": {
                    "type": "number"
                },
                "quantityOnHand": {
                    "type": "number"
                },
                "quantityReceived": {
                    "type": "number"
                },
                "rate": {
                    "type": "string"
                },
                "serialNumbers": {
                    "type": "string"
                },
                "tax1Amt": {
                    "type": "number"
                },
                "taxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxRate1": {
                    "type": "number"
                },
                "taxRate2": {
                    "type": "number"
                },
                "units": {
                    "$ref": "#/definitions/RecordRef"
                },
                "vendorName": {
                    "type": "string"
                }
            }
        },
        "PurchaseOrderItemList": {
            "properties": {
                "item": {
                    "items": {
                        "$ref": "#/definitions/PurchaseOrderItem"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "PurchaseOrderOrderStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "RevenueStatus": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "CreditMemoPartnersList": {
            "properties": {
                "partners": {
                    "$ref": "#/definitions/Partners"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "ScheduleBCode": {
            "properties": {
                "value": {
                    "type": "string",
                    "enum": [
                        "_1000",
                        "_1000cubicMeters",
                        "_barrels",
                        "_carat",
                        "_cleanYieldKilogram",
                        "_contentKilogram",
                        "_contentTon",
                        "_cubicMeters",
                        "_curie",
                        "_dozen",
                        "_dozenPairs",
                        "_dozenPieces",
                        "_fiberMeter",
                        "_gram",
                        "_gross",
                        "_grossContainers",
                        "_hundred",
                        "_kilogram",
                        "_kilogramTotalSugars",
                        "_liter",
                        "_meter",
                        "_millicurie",
                        "_noQuantityReq",
                        "_number",
                        "_pack",
                        "_pairs",
                        "_pieces",
                        "_proofLiter",
                        "_runningBales",
                        "_square",
                        "_squareCentimeters",
                        "_squareMeters",
                        "_ton"
                    ]
                }
            }
        },
        "SelectCustomFieldRef": {
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "scriptId": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/ListOrRecordRef"
                }
            }
        },
        "SiteCategory": {
            "properties": {
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "categoryDescription": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "website": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "SiteCategoryList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "siteCategory": {
                    "items": {
                        "$ref": "#/definitions/SiteCategory"
                    },
                    "type": "array"
                }
            }
        },
        "LotNumberedInventoryItemLocationsList": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LotNumberedInventoryItemLocations"
                    }
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "SitemapPriority": {
            "properties": {
                "value": {
                    "type": "string",
                    "default": "_01",
                    "enum": [
                        "_00",
                        "_01",
                        "_02",
                        "_03",
                        "_04",
                        "_05",
                        "_06",
                        "_07",
                        "_08",
                        "_09",
                        "_10",
                        "_auto"
                    ]
                }
            }
        },
        "Subscriptions": {
            "properties": {
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "subscribed": {
                    "type": "boolean"
                },
                "subscription": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "SubscriptionsList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "subscriptions": {
                    "items": {
                        "$ref": "#/definitions/Subscriptions"
                    },
                    "type": "array"
                }
            }
        },
        "TaxCode": {
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nexusesTaxList": {
                    "$ref": "#/definitions/TaxTypeNexusesTaxList"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                }
            }
        },
        "TaxGroupTaxItem": {
            "properties": {
                "basis": {
                    "type": "number"
                },
                "rate": {
                    "type": "number"
                },
                "taxName": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxType": {
                    "type": "string"
                }
            }
        },
        "TaxGroupTaxItemList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "taxItem": {
                    "items": {
                        "$ref": "#/definitions/TaxGroupTaxItem"
                    },
                    "type": "array"
                }
            }
        },
        "TaxRate": {
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "county": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "includeChildren": {
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "itemId": {
                    "type": "string"
                },
                "nexusCountry": {
                    "$ref": "#/definitions/RecordRef"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "piggyback": {
                    "type": "boolean"
                },
                "rate": {
                    "type": "number"
                },
                "state": {
                    "type": "string"
                },
                "subsidiaryList": {
                    "$ref": "#/definitions/RecordRefList"
                },
                "taxItemList": {
                    "$ref": "#/definitions/TaxGroupTaxItemList"
                },
                "taxType": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxitem1": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxitem2": {
                    "$ref": "#/definitions/RecordRef"
                },
                "unitprice1": {
                    "type": "string"
                },
                "unitprice2": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            }
        },
        "TaxTypeNexusesTax": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "nexus": {
                    "$ref": "#/definitions/RecordRef"
                },
                "purchTaxAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "saleTaxAcct": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "TaxTypeNexusesTaxList": {
            "properties": {
                "nexusesTax": {
                    "items": {
                        "$ref": "#/definitions/TaxTypeNexusesTax"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "TimeActivity": {
            "required": [
                "employee",
                "hours",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "caseTaskEvent": {
                    "$ref": "#/definitions/RecordRef"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "customer": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "employee": {
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "hours": {
                    "$ref": "#/definitions/Duration"
                },
                "internalId": {
                    "type": "string"
                },
                "isBillable": {
                    "type": "boolean"
                },
                "item": {
                    "$ref": "#/definitions/RecordRef"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "memo": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "overrideRate": {
                    "type": "boolean"
                },
                "paidExternally": {
                    "type": "boolean"
                },
                "payrollItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "price": {
                    "$ref": "#/definitions/RecordRef"
                },
                "rate": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "supervisorApproval": {
                    "type": "boolean"
                },
                "temporaryLocalJurisdiction": {
                    "$ref": "#/definitions/RecordRef"
                },
                "temporaryStateJurisdiction": {
                    "$ref": "#/definitions/RecordRef"
                },
                "timeType": {
                    "$ref": "#/definitions/TimeBillTimeType"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "workplace": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "TimeBillTimeType": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "TransactionShipGroup": {
            "properties": {
                "destinationAddress": {
                    "type": "string"
                },
                "destinationAddressRef": {
                    "$ref": "#/definitions/RecordRef"
                },
                "handlingRate": {
                    "type": "number"
                },
                "handlingTax2Amt": {
                    "type": "number"
                },
                "handlingTax2Rate": {
                    "type": "string"
                },
                "handlingTaxAmt": {
                    "type": "number"
                },
                "handlingTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "handlingTaxRate": {
                    "type": "string"
                },
                "id": {
                    "type": "number"
                },
                "isFulfilled": {
                    "type": "boolean"
                },
                "isHandlingTaxable": {
                    "type": "boolean"
                },
                "isShippingTaxable": {
                    "type": "boolean"
                },
                "shippingMethod": {
                    "type": "string"
                },
                "shippingMethodRef": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shippingRate": {
                    "type": "number"
                },
                "shippingTax2Amt": {
                    "type": "number"
                },
                "shippingTax2Rate": {
                    "type": "string"
                },
                "shippingTaxAmt": {
                    "type": "number"
                },
                "shippingTaxCode": {
                    "$ref": "#/definitions/RecordRef"
                },
                "shippingTaxRate": {
                    "type": "string"
                },
                "sourceAddress": {
                    "type": "string"
                },
                "sourceAddressRef": {
                    "$ref": "#/definitions/RecordRef"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "Translation": {
            "properties": {
                "description": {
                    "type": "string",
                    "x-name": true
                },
                "displayName": {
                    "type": "string"
                },
                "featuredDescription": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "locale": {
                    "$ref": "#/definitions/Language"
                },
                "noPriceMessage": {
                    "type": "string"
                },
                "outOfStockMessage": {
                    "type": "string"
                },
                "pageTitle": {
                    "type": "string"
                },
                "salesDescription": {
                    "type": "string"
                },
                "specialsDescription": {
                    "type": "string"
                },
                "storeDescription": {
                    "type": "string"
                },
                "storeDetailedDescription": {
                    "type": "string"
                },
                "storeDisplayName": {
                    "type": "string"
                }
            }
        },
        "TranslationList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "translation": {
                    "items": {
                        "$ref": "#/definitions/Translation"
                    },
                    "type": "array"
                }
            }
        },
        "Vendor": {
            "required": [
                "companyName",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "accountNumber": {
                    "type": "string"
                },
                "addressbookList": {
                    "$ref": "#/definitions/VendorAddressbookList"
                },
                "altEmail": {
                    "type": "string"
                },
                "altName": {
                    "type": "string"
                },
                "altPhone": {
                    "type": "string"
                },
                "balance": {
                    "type": "number"
                },
                "balancePrimary": {
                    "type": "number"
                },
                "bcn": {
                    "type": "string"
                },
                "billPay": {
                    "type": "boolean"
                },
                "category": {
                    "$ref": "#/definitions/RecordRef"
                },
                "comments": {
                    "type": "string"
                },
                "companyName": {
                    "type": "string"
                },
                "creditLimit": {
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currencyList": {
                    "$ref": "#/definitions/VendorCurrencyList"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "dateCreated": {
                    "format": "date-time",
                    "type": "string"
                },
                "defaultAddress": {
                    "type": "string"
                },
                "eligibleForCommission": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "emailPreference": {
                    "$ref": "#/definitions/EmailPreference"
                },
                "emailTransactions": {
                    "type": "boolean"
                },
                "entityId": {
                    "type": "string"
                },
                "expenseAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "externalId": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "faxTransactions": {
                    "type": "boolean"
                },
                "firstName": {
                    "type": "string"
                },
                "giveAccess": {
                    "type": "boolean"
                },
                "globalSubscriptionStatus": {
                    "$ref": "#/definitions/GlobalSubscriptionStatus"
                },
                "homePhone": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/definitions/RecordRef"
                },
                "internalId": {
                    "type": "string"
                },
                "is1099Eligible": {
                    "type": "boolean"
                },
                "isAccountant": {
                    "type": "boolean"
                },
                "isInactive": {
                    "type": "boolean"
                },
                "isJobResourceVend": {
                    "type": "boolean"
                },
                "isPerson": {
                    "type": "boolean"
                },
                "laborCost": {
                    "type": "number"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "lastName": {
                    "type": "string"
                },
                "legalName": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                },
                "mobilePhone": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "openingBalance": {
                    "type": "number"
                },
                "openingBalanceAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "openingBalanceDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "password2": {
                    "type": "string"
                },
                "payablesAccount": {
                    "$ref": "#/definitions/RecordRef"
                },
                "phone": {
                    "type": "string"
                },
                "phoneticName": {
                    "type": "string"
                },
                "pricingScheduleList": {
                    "$ref": "#/definitions/VendorPricingScheduleList"
                },
                "printOnCheckAs": {
                    "type": "string"
                },
                "printTransactions": {
                    "type": "boolean"
                },
                "purchaseOrderAmount": {
                    "type": "number"
                },
                "purchaseOrderQuantity": {
                    "type": "number"
                },
                "purchaseOrderQuantityDiff": {
                    "type": "number"
                },
                "receiptAmount": {
                    "type": "number"
                },
                "receiptQuantity": {
                    "type": "number"
                },
                "receiptQuantityDiff": {
                    "type": "number"
                },
                "representingSubsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "requirePwdChange": {
                    "type": "boolean"
                },
                "rolesList": {
                    "$ref": "#/definitions/VendorRolesList"
                },
                "salutation": {
                    "type": "string"
                },
                "sendEmail": {
                    "type": "boolean"
                },
                "subscriptionsList": {
                    "$ref": "#/definitions/SubscriptionsList"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "taxIdNum": {
                    "type": "string"
                },
                "taxItem": {
                    "$ref": "#/definitions/RecordRef"
                },
                "terms": {
                    "$ref": "#/definitions/RecordRef"
                },
                "title": {
                    "type": "string"
                },
                "unbilledOrders": {
                    "type": "number"
                },
                "unbilledOrdersPrimary": {
                    "type": "number"
                },
                "url": {
                    "type": "string"
                },
                "vatRegNumber": {
                    "type": "string"
                },
                "workCalendar": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "VendorAddressbook": {
            "properties": {
                "addressbookAddress": {
                    "$ref": "#/definitions/Address"
                },
                "defaultBilling": {
                    "type": "boolean"
                },
                "defaultShipping": {
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "VendorAddressbookList": {
            "properties": {
                "addressbook": {
                    "items": {
                        "$ref": "#/definitions/VendorAddressbook"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "VendorCurrency": {
            "properties": {
                "balance": {
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "unbilledOrders": {
                    "type": "number"
                }
            }
        },
        "VendorCurrencyList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "vendorCurrency": {
                    "items": {
                        "$ref": "#/definitions/VendorCurrency"
                    },
                    "type": "array"
                }
            }
        },
        "VendorPayment": {
            "required": [
                "applyList",
                "entity",
                "subsidiary"
            ],
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "_class": {
                    "$ref": "#/definitions/RecordRef"
                },
                "account": {
                    "$ref": "#/definitions/RecordRef"
                },
                "address": {
                    "type": "string"
                },
                "apAcct": {
                    "$ref": "#/definitions/RecordRef"
                },
                "applyList": {
                    "$ref": "#/definitions/VendorPaymentApplyList"
                },
                "balance": {
                    "type": "number"
                },
                "billPay": {
                    "type": "boolean"
                },
                "createdDate": {
                    "x-readOnly": true,
                    "format": "date-time",
                    "type": "string"
                },
                "creditList": {
                    "$ref": "#/definitions/VendorPaymentCreditList"
                },
                "currency": {
                    "$ref": "#/definitions/RecordRef"
                },
                "currencyName": {
                    "type": "string"
                },
                "customFieldList": {
                    "$ref": "#/definitions/CustomFieldList"
                },
                "customForm": {
                    "$ref": "#/definitions/RecordRef"
                },
                "department": {
                    "$ref": "#/definitions/RecordRef"
                },
                "entity": {
                    "$ref": "#/definitions/RecordRef"
                },
                "exchangeRate": {
                    "type": "number"
                },
                "externalId": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "lastModifiedDate": {
                    "format": "date-time",
                    "type": "string",
                    "x-readOnly": true
                },
                "location": {
                    "$ref": "#/definitions/RecordRef"
                },
                "memo": {
                    "type": "string"
                },
                "nullFieldList": {
                    "$ref": "#/definitions/NullField"
                },
                "postingPeriod": {
                    "$ref": "#/definitions/RecordRef"
                },
                "printVoucher": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "subsidiary": {
                    "$ref": "#/definitions/RecordRef"
                },
                "toAch": {
                    "type": "boolean"
                },
                "toBePrinted": {
                    "type": "boolean"
                },
                "total": {
                    "type": "number"
                },
                "tranDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "tranId": {
                    "type": "string"
                },
                "transactionNumber": {
                    "type": "string"
                },
                "voidJournal": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "VendorPaymentApply": {
            "properties": {
                "amount": {
                    "type": "number"
                },
                "apply": {
                    "type": "boolean"
                },
                "applyDate": {
                    "format": "date",
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "disc": {
                    "type": "number"
                },
                "discAmt": {
                    "type": "number"
                },
                "discDate": {
                    "format": "date",
                    "type": "string"
                },
                "doc": {
                    "type": "number"
                },
                "due": {
                    "type": "number"
                },
                "job": {
                    "type": "string"
                },
                "line": {
                    "type": "number"
                },
                "refNum": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "VendorPaymentApplyList": {
            "properties": {
                "apply": {
                    "items": {
                        "$ref": "#/definitions/VendorPaymentApply"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "VendorPaymentCredit": {
            "properties": {
                "amount": {
                    "type": "number"
                },
                "appliedTo": {
                    "type": "string"
                },
                "apply": {
                    "type": "boolean"
                },
                "creditDate": {
                    "format": "date",
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "doc": {
                    "type": "number"
                },
                "due": {
                    "type": "number"
                },
                "line": {
                    "type": "number"
                },
                "refNum": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "VendorPaymentCreditList": {
            "properties": {
                "credit": {
                    "items": {
                        "$ref": "#/definitions/VendorPaymentCredit"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "VendorPricingSchedule": {
            "properties": {
                "scheduleDiscount": {
                    "type": "number"
                },
                "scheduleName": {
                    "type": "string"
                }
            }
        },
        "VendorPricingScheduleList": {
            "properties": {
                "pricingSchedule": {
                    "items": {
                        "$ref": "#/definitions/VendorPricingSchedule"
                    },
                    "type": "array"
                },
                "replaceAll": {
                    "type": "boolean"
                }
            }
        },
        "VendorRoles": {
            "properties": {
                "selectedRole": {
                    "$ref": "#/definitions/RecordRef"
                }
            }
        },
        "VendorRolesList": {
            "properties": {
                "replaceAll": {
                    "type": "boolean"
                },
                "roles": {
                    "items": {
                        "$ref": "#/definitions/VendorRoles"
                    },
                    "type": "array"
                }
            }
        },
        "VsoeDeferral": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "VsoePermitDiscount": {
            "properties": {
                "value": {
                    "type": "string",
                    "x-samplevalue": "_asAllowed",
                    "default": "_asAllowed",
                    "enum": [
                        "_asAllowed",
                        "_never"
                    ],
                    "x-sub-format": "enum"
                }
            }
        },
        "VsoeSopGroup": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "parentItem": {
            "x-primary-key": [
                "internalId"
            ],
            "properties": {
                "internalId": {
                    "type": "string"
                }
            }
        },
        "TransactionSummary": {
            "properties": {
                "amount": {
                    "format": "int32",
                    "type": "integer"
                },
                "parentItem": {
                    "$ref": "#/definitions/parentItem"
                }
            }
        },
        "BulkStatus": {
            "description": "Status of the bulk upload.",
            "type": "object",
            "properties": {
                "batchId": {
                    "description": "Contact/Leads loaded",
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "numOfLeadsProcessed": {
                    "description": "Contact/Leads loaded",
                    "type": "number"
                },
                "numOfRowsFailed": {
                    "description": "Failed count",
                    "type": "number"
                },
                "numOfRowsWithWarning": {
                    "description": "Contact/Leads that had warnings",
                    "type": "number"
                },
                "status": {
                    "description": "Status of the bulk job",
                    "type": "string"
                }
            }
        },
        "BulkQuery": {
            "description": "BulkLoad response of bulk download.",
            "properties": {
                "id": {
                    "description": "Id of the bulk job",
                    "type": "number"
                },
                "status": {
                    "description": "Status of the bulk job",
                    "type": "string"
                }
            }
        },
        "Pong": {
            "properties": {
                "dateTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                }
            }
        },
        "objectsMetadata": {
            "properties": {
                "fields": {
                    "items": {
                        "$ref": "#/definitions/objectsMetadataFields"
                    },
                    "type": "array"
                }
            }
        },
        "objectsMetadataFields": {
            "properties": {
                "mask": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "vendorDisplayName": {
                    "type": "string"
                },
                "vendorPath": {
                    "type": "string"
                },
                "vendorReadOnly": {
                    "type": "boolean"
                },
                "vendorRequired": {
                    "type": "boolean"
                }
            }
        },
        "Object": {
            "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
            "properties": {
                "objectField": {
                    "type": "string"
                }
            }
        },
        "BulkLoad": {
            "description": "BulkLoad response of bulk upload.",
            "properties": {
                "id": {
                    "description": "Id of the bulk job",
                    "type": "number"
                },
                "status": {
                    "description": "Status of the bulk job",
                    "type": "string"
                }
            }
        },
        "ModelDate": {
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        }
    },
    "swagger": "2.0",
    "info": {
        "contact": {
            "email": "support@cloud-elements.com"
        },
        "title": "netsuiteerpv2",
        "version": "api-v2"
    },
    "tags": [
        {
            "name": "service-resale-items"
        },
        {
            "name": "projects"
        },
        {
            "name": "folders"
        },
        {
            "name": "payment-methods"
        },
        {
            "name": "ledger-accounts"
        },
        {
            "name": "objects"
        },
        {
            "name": "non-inventory-resale-items"
        },
        {
            "name": "tax-rates"
        },
        {
            "name": "invoices"
        },
        {
            "name": "payroll-items"
        },
        {
            "name": "vendors"
        },
        {
            "name": "estimates"
        },
        {
            "name": "lot-numbered-inventory-items"
        },
        {
            "name": "purchase-orders"
        },
        {
            "name": "sales-orders"
        },
        {
            "name": "serialized-inventory-items"
        },
        {
            "name": "transaction-summaries"
        },
        {
            "name": "classifications"
        },
        {
            "name": "checks"
        },
        {
            "name": "lot-numbered-assembly-items"
        },
        {
            "name": "tax-codes"
        },
        {
            "name": "leads"
        },
        {
            "name": "vendor-payments"
        },
        {
            "name": "files"
        },
        {
            "name": "bulk"
        },
        {
            "name": "employees"
        },
        {
            "name": "items"
        },
        {
            "name": "credit-memos"
        },
        {
            "name": "prospects"
        },
        {
            "name": "ping"
        },
        {
            "name": "payments"
        },
        {
            "name": "journal-entries"
        },
        {
            "name": "custom-record-types"
        },
        {
            "name": "expense-reports"
        },
        {
            "name": "posting-periods"
        },
        {
            "name": "products"
        },
        {
            "name": "saved-searches"
        },
        {
            "name": "vendor-credits"
        },
        {
            "name": "bills"
        },
        {
            "name": "return-authorizations"
        },
        {
            "name": "customers"
        },
        {
            "name": "departments"
        },
        {
            "name": "customer-refunds"
        },
        {
            "name": "lookups"
        },
        {
            "name": "cases"
        },
        {
            "name": "opportunities"
        },
        {
            "name": "serialized-assembly-items"
        },
        {
            "name": "activities"
        },
        {
            "name": "objectName"
        },
        {
            "name": "credit-terms"
        },
        {
            "name": "locations"
        },
        {
            "name": "subsidiaries"
        },
        {
            "name": "accounts"
        },
        {
            "name": "custom-fields"
        },
        {
            "name": "contacts"
        },
        {
            "name": "time-activities"
        }
    ]
}
